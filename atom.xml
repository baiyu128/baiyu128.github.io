<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaiYu</title>
  
  <subtitle>baiyu`s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://baiyu128.github.io/"/>
  <updated>2020-07-08T08:46:33.674Z</updated>
  <id>https://baiyu128.github.io/</id>
  
  <author>
    <name>bai yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA自定义注解和AOP配合使用</title>
    <link href="https://baiyu128.github.io/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>https://baiyu128.github.io/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</id>
    <published>2020-07-08T07:44:46.000Z</published>
    <updated>2020-07-08T08:46:33.674Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.baixixi.xyz/1575352733280.jpg" alt=""></p><blockquote><p>使用execute到类的方法时遇到的问题：</p><ol><li>不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；</li><li>Controller <strong>包层级过深</strong>时，<strong>导致很多包下的接口切不到</strong>；</li></ol></blockquote><p>本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。</p><p>废话不多说，进入正题 ！</p><a id="more"></a><h2 id="一、先看看切面日志输出效果"><a href="#一、先看看切面日志输出效果" class="headerlink" title="一、先看看切面日志输出效果"></a>一、先看看切面日志输出效果</h2><p>在看看实现方法之前，我们先看下切面日志输出效果咋样：</p><p><img src="http://wx4.sinaimg.cn/large/bed85538ly1ggjnavkh75j225o0si45a.jpg" alt="Spring boot 自定义注解，aop切面统一打印请求日志效果图"></p><p>从上图中可以看到，每个对于每个请求，开始与结束一目了然，并且打印了以下参数：</p><ul><li><strong>URL</strong>: 请求接口地址；</li><li><strong>Description</strong>: 接口的中文说明信息；</li><li><strong>HTTP Method</strong>: 请求的方法，是 <code>POST</code>, <code>GET</code>, 还是 <code>DELETE</code> 等；</li><li><strong>Class Method</strong>: 被请求的方法路径 : <strong>包名 + 方法名</strong>;</li><li><strong>IP</strong>: 请求方的 IP 地址；</li><li><strong>Request Args</strong>: 请求入参，以 JSON 格式输出；</li><li><strong>Response Args</strong>: 响应出参，以 JSON 格式输出；</li><li><strong>Time-Consuming</strong>: 请求耗时，以此估算每个接口的性能指数；</li></ul><p>怎么样？看上去效果还不错呢？接下来看看，我们要如何一步一步实现它呢？</p><h2 id="二、添加-AOP-Maven-依赖"><a href="#二、添加-AOP-Maven-依赖" class="headerlink" title="二、添加 AOP Maven 依赖"></a>二、添加 AOP Maven 依赖</h2><p>在项目 <code>pom.xml</code> 文件中添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- aop 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于日志切面中，以 json 格式打印出入参 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="三、自定义日志注解"><a href="#三、自定义日志注解" class="headerlink" title="三、自定义日志注解"></a>三、自定义日志注解</h2><p>让我们来自定义一个日志注解，如下所示：</p><p>自定义注解</p><ul><li><strong>①</strong> Retention：什么时候使用该注解，我们定义为运行时；</li><li><strong>②</strong> Target：注解用于什么地方，我们定义为作用于方法上；</li><li><strong>③</strong> Documented：注解是否将包含在 JavaDoc 中；</li><li><strong>④</strong> ：注解名为 <code>WebLog</code>;</li><li><strong>⑤</strong> description：定义一个属性，默认为空字符串；</li></ul><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebLog &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志描述信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，一个完整的自定义注解就定义完成了。</p><h2 id="四、配置-AOP-切面"><a href="#四、配置-AOP-切面" class="headerlink" title="四、配置 AOP 切面"></a>四、配置 AOP 切面</h2><p>在配置 AOP 切面之前，我们需要了解下 <code>aspectj</code> 相关注解的作用：</p><ul><li><strong>@Aspect</strong>：声明该类为一个注解类；</li><li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li></ul><p>切点定义好后，就是围绕这个切点做文章了：</p><ul><li><strong>@Before</strong>: 在切点之前，织入相关代码；</li><li><strong>@After</strong>: 在切点之后，织入相关代码;</li><li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li><li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理;</li><li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li></ul><p>注解执行顺序：</p><p>​        Around -&gt;before -&gt; 接口种的逻辑代码 -&gt;after -&gt; afterReturning</p><p>接下来，定义一个 <code>WebLogAspect.java</code> 切面类，声明一个切点：</p><p>然后，定义 <code>@Around</code> 环绕，用于何时执行切点：</p><ul><li><strong>①</strong> startTime：记录一下调用接口的开始时间；</li><li><strong>②</strong> result：执行切点，执行切点后，会去依次调用 <strong>@Before -&gt; 接口逻辑代码 -&gt; @After -&gt; @AfterReturning</strong>；</li><li><strong>③</strong> ：打印出参；</li><li><strong>④</strong> ：打印接口处理耗时；</li><li><strong>⑤</strong>：返回接口返参结果；</li></ul><p>再来看看 <code>@Before</code> 方法：</p><p>看注释功能说明，因为注释说得还是比较清楚的！</p><p>最后，用 <code>@After</code> 来做个收尾：</p><p>我们在每个接口的最后，打印日志结束标志。最后再看下项目包结构：</p><p><img src="http://ww3.sinaimg.cn/large/bed85538ly1ggjmx706wjj20r20lkjt1.jpg" alt="bao.jpg"></p><p>到这里，切面相关的代码就完成了！</p><p>上完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.context.annotation.Profile;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger logger         &#x3D; LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line">    &#x2F;** 换行符 *&#x2F;</span><br><span class="line">    private static final String LINE_SEPARATOR &#x3D; System.lineSeparator();</span><br><span class="line"></span><br><span class="line">    &#x2F;** 以自定义 @WebLog 注解为切点 *&#x2F;</span><br><span class="line">    @Pointcut(&quot;@annotation(site.exception.springbootaopwebrequest.aspect.WebLog)&quot;)</span><br><span class="line">    public void webLog() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之前织入</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Before(&quot;webLog()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始打印请求日志</span><br><span class="line">        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 @WebLog 注解的描述信息</span><br><span class="line">        String methodDescription &#x3D; getAspectLogDescription(joinPoint);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 打印请求相关参数</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 打印请求 url</span><br><span class="line">        logger.info(&quot;URL            : &#123;&#125;&quot;, request.getRequestURL().toString());</span><br><span class="line">        &#x2F;&#x2F; 打印描述信息</span><br><span class="line">        logger.info(&quot;Description    : &#123;&#125;&quot;, methodDescription);</span><br><span class="line">        &#x2F;&#x2F; 打印 Http method</span><br><span class="line">        logger.info(&quot;HTTP Method    : &#123;&#125;&quot;, request.getMethod());</span><br><span class="line">        &#x2F;&#x2F; 打印调用 controller 的全路径以及执行方法</span><br><span class="line">        logger.info(&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());</span><br><span class="line">        &#x2F;&#x2F; 打印请求的 IP</span><br><span class="line">        logger.info(&quot;IP             : &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line">        &#x2F;&#x2F; 打印请求入参</span><br><span class="line">        logger.info(&quot;Request Args   : &#123;&#125;&quot;, new Gson().toJson(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之后织入</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @After(&quot;webLog()&quot;)</span><br><span class="line">    public void doAfter() throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 接口结束后换行，方便分割查看</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; End &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + LINE_SEPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 环绕</span><br><span class="line">     * @param proceedingJoinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Around(&quot;webLog()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        Object result &#x3D; proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F; 打印出参</span><br><span class="line">        logger.info(&quot;Response Args  : &#123;&#125;&quot;, new Gson().toJson(result));</span><br><span class="line">        &#x2F;&#x2F; 执行耗时</span><br><span class="line">        logger.info(&quot;Time-Consuming : &#123;&#125; ms&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取切面注解的描述</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     * @return 描述信息</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getAspectLogDescription(JoinPoint joinPoint)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        String targetName &#x3D; joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments &#x3D; joinPoint.getArgs();</span><br><span class="line">        Class targetClass &#x3D; Class.forName(targetName);</span><br><span class="line">        Method[] methods &#x3D; targetClass.getMethods();</span><br><span class="line">        StringBuilder description &#x3D; new StringBuilder(&quot;&quot;);</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] clazzs &#x3D; method.getParameterTypes();</span><br><span class="line">                if (clazzs.length &#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">                    description.append(method.getAnnotation(WebLog.class).description());</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return description.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、怎么使用呢？"><a href="#五、怎么使用呢？" class="headerlink" title="五、怎么使用呢？"></a>五、怎么使用呢？</h2><p>因为我们的切点是自定义注解 <code>@WebLog</code>, 所以我们仅仅需要在 Controller 控制器的每个接口方法添加 @WebLog 注解即可，如果我们不想某个接口打印出入参日志，不加注解就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"><span class="meta">@WebLog</span>(description=<span class="string">"请求了用户登录接口"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">  logger.info(<span class="string">"user login ..."</span>);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、对于文件上传好使不？"><a href="#六、对于文件上传好使不？" class="headerlink" title="六、对于文件上传好使不？"></a>六、对于文件上传好使不？</h2><p>是好使的！不论是单文件上传，抑或是多文件上传，切面日志均运行良好，这里测试的东西，就不贴出来了。有兴趣的小伙伴可以试试！</p><h2 id="七、只想在开发环境和测试环境中使用？"><a href="#七、只想在开发环境和测试环境中使用？" class="headerlink" title="七、只想在开发环境和测试环境中使用？"></a>七、只想在开发环境和测试环境中使用？</h2><p>对于那些性能要求较高的应用，不想在生产环境中打印日志，只想在开发环境或者测试环境中使用，要怎么做呢？我们只需为切面添加 <code>@Profile</code> 就可以了，如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Compent</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>,<span class="string">"test"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger  logger = LoggerFactory.getLogger(WebLogAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就指定了只能作用于 <code>dev</code> 开发环境和 <code>test</code> 测试环境，生产环境 <code>prod</code> 是不生效的！</p><h2 id="八、多切面如何指定优先级？"><a href="#八、多切面如何指定优先级？" class="headerlink" title="八、多切面如何指定优先级？"></a>八、多切面如何指定优先级？</h2><p>假设说我们的服务中不止定义了一个切面，比如说我们针对 Web 层的接口，不止要打印日志，还要校验 token 等。要如何指定切面的优先级呢？也就是如何指定切面的执行顺序？</p><p>我们可以通过 <code>@Order(i)</code>注解来指定优先级，注意：<strong>i 值越小，优先级则越高</strong>。</p><p>假设说我们定义上面这个日志切面的优先级为 <code>@Order(10)</code>, 然后我们还有个校验 <code>token</code> 的切面 <code>CheckTokenAspect.java</code>，我们定义为了 <code>@Order(11)</code>, 那么它们之间的执行顺序如下：</p><p><img src="http://ww3.sinaimg.cn/large/bed85538ly1ggjn9pol5aj20iu0mojrt.jpg" alt="order.jpg"></p><p>我们可以总结一下：</p><ul><li>在切点之前，<code>@Order</code> 从小到大被执行，也就是说越小的优先级越高；</li><li>在切点之后，<code>@Order</code> 从大到小被执行，也就是说越大的优先级越高；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.baixixi.xyz/1575352733280.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用execute到类的方法时遇到的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；&lt;/li&gt;
&lt;li&gt;Controller &lt;strong&gt;包层级过深&lt;/strong&gt;时，&lt;strong&gt;导致很多包下的接口切不到&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。&lt;/p&gt;
&lt;p&gt;废话不多说，进入正题 ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOP" scheme="https://baiyu128.github.io/categories/AOP/"/>
    
    
      <category term="springboot" scheme="https://baiyu128.github.io/tags/springboot/"/>
    
      <category term="AOP" scheme="https://baiyu128.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目脚本（启动、停止、重启、状态)</title>
    <link href="https://baiyu128.github.io/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/"/>
    <id>https://baiyu128.github.io/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/</id>
    <published>2020-06-22T12:48:45.000Z</published>
    <updated>2020-06-22T12:56:29.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.baixixi.xyz/1575206542142.jpg" alt=""></p><p>此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。</p><p>如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 <code>BUILD_ID=dontKillMe</code> , 不然 jenkins 会杀掉进程。</p><a id="more"></a><p>参考: <a href="https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m" target="_blank" rel="noopener">https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m</a></p><h3 id="spring-boot-sh"><a href="#spring-boot-sh" class="headerlink" title="spring-boot.sh"></a>spring-boot.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SpringBoot=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入操作名 \033[0m  \033[0;34m &#123;start|stop|restart|status&#125; \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SpringBoot</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入应用名 \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start <span class="variable">$SpringBoot</span> success..."</span></span><br><span class="line">        nohup java -jar <span class="variable">$SpringBoot</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stop <span class="variable">$SpringBoot</span>"</span></span><br><span class="line">    boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> <span class="variable">$boot_id</span></span><br><span class="line">        count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">        boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$boot_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> restart()</span><br><span class="line">&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> status()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is not running..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    *)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m Usage: \033[0m  \033[0;34m sh  <span class="variable">$0</span>  &#123;start|stop|restart|status&#125;  &#123;SpringBootJarName&#125; \033[0m</span></span><br><span class="line"><span class="string">\033[0;31m Example: \033[0m</span></span><br><span class="line"><span class="string">      \033[0;33m sh  <span class="variable">$0</span>  start esmart-test.jar \033[0m"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.baixixi.xyz/1575206542142.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。&lt;/p&gt;
&lt;p&gt;如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 &lt;code&gt;BUILD_ID=dontKillMe&lt;/code&gt; , 不然 jenkins 会杀掉进程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="script" scheme="https://baiyu128.github.io/categories/script/"/>
    
    
      <category term="springboot" scheme="https://baiyu128.github.io/tags/springboot/"/>
    
      <category term="script" scheme="https://baiyu128.github.io/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>第一次使用</title>
    <link href="https://baiyu128.github.io/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <id>https://baiyu128.github.io/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-21T07:48:37.000Z</published>
    <updated>2020-06-21T13:26:53.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><a id="more"></a><blockquote><p>Test for more</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"test for md"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题一&quot;&gt;&lt;a href=&quot;#标题一&quot; class=&quot;headerlink&quot; title=&quot;标题一&quot;&gt;&lt;/a&gt;标题一&lt;/h1&gt;&lt;h2 id=&quot;标题二&quot;&gt;&lt;a href=&quot;#标题二&quot; class=&quot;headerlink&quot; title=&quot;标题二&quot;&gt;&lt;/a&gt;标题二&lt;/h2&gt;&lt;h3 id=&quot;标题三&quot;&gt;&lt;a href=&quot;#标题三&quot; class=&quot;headerlink&quot; title=&quot;标题三&quot;&gt;&lt;/a&gt;标题三&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Testing" scheme="https://baiyu128.github.io/categories/Testing/"/>
    
    
      <category term="blog" scheme="https://baiyu128.github.io/tags/blog/"/>
    
      <category term="test" scheme="https://baiyu128.github.io/tags/test/"/>
    
  </entry>
  
</feed>
