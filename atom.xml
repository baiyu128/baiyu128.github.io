<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BaiYu</title>
  
  <subtitle>baiyu`s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://baiyu128.github.io/"/>
  <updated>2022-03-02T05:50:14.175Z</updated>
  <id>https://baiyu128.github.io/</id>
  
  <author>
    <name>bai yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速搭建一个网关服务，动态路由、鉴权</title>
    <link href="https://baiyu128.github.io/2022/03/02/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E3%80%81%E9%89%B4%E6%9D%83/"/>
    <id>https://baiyu128.github.io/2022/03/02/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E3%80%81%E9%89%B4%E6%9D%83/</id>
    <published>2022-03-02T05:44:10.000Z</published>
    <updated>2022-03-02T05:50:14.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录一下我是如何使用Gateway搭建网关服务及实现动态路由的，帮助大家学习如何快速搭建一个网关服务，了解路由相关配置，鉴权的流程及业务处理，有兴趣的一定看到最后，非常适合没接触过网关服务的同学当作入门教程。</p><a id="more"></a><h2 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h2><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>SpringBoot 2.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.1.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p>Spring-cloud-gateway-core</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-cloud-gateway-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>common-lang3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><p>网关作为请求统一入口，路由就相当于是每个业务系统的入口，通过路由规则则可以匹配到对应微服务的入口，将请求命中到对应的业务系统中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      enabled: true</span><br><span class="line">      routes:</span><br><span class="line">      - id: demo-server</span><br><span class="line">        uri: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;demo-server&#x2F;**</span><br><span class="line">        filters:</span><br><span class="line">          - StripPrefix&#x3D; 1</span><br></pre></td></tr></table></figure><p>routes</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/sTnayibHfVq6bLy8aFDuHbml5ne6ru6KwaiaL4WA9skFVK0prib0jBGDo7qaBhsQ6GeAbJFs9JDUtjs3yiaRc5jVhg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>图片</p><h4 id="解读配置"><a href="#解读配置" class="headerlink" title="解读配置"></a>解读配置</h4><ul><li>现在有一个服务demo-server部署在本机，地址和端口为<code>127.0.0.1:8081</code>，所以路由配置uri为<code>http://localhost:8081</code></li><li>使用网关服务路由到此服务，<code>predicates -Path=/demo-server/**</code>,网关服务的端口为8080，启动网关服务，访问<code>localhost:8080/demo-server</code>,路由断言就会将请求路由到demo-server</li><li>直接访问demo-server的接口<code>localhost:8081/api/test</code>,通过网关的访问地址则为<code>localhost:8080/demo-server/api/test,predicates</code>配置将请求断言到此路由，<code>filters-StripPrefix=1</code>代表将地址中/后的第一个截取，所以demo-server就截取掉了</li></ul><p>使用gateway通过配置文件即可完成路由的配置，非常方便，我们只要充分的了解配置项的含义及规则就可以了;但是这些配置如果要修改则需要重启服务，重启网关服务会导致整个系统不可用，这一点是无法接受的，下面介绍如何通过Nacos实现动态路由</p><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>使用nacos结合gateway-server实现动态路由，我们需要先部署一个nacos服务，可以使用docker部署或下载源码在本地启动,具体操作可以参考官方文档即可</p><h4 id="Nacos配置"><a href="#Nacos配置" class="headerlink" title="Nacos配置"></a>Nacos配置</h4><p><img src="https://static01.imgkr.com/temp/4b3a20cde03440299941b4a9270bafc6.jpg" alt="图片"></p><p>groupId: 使用网关服务名称即可</p><p>dataId: routes</p><p>配置格式：json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"xxx-server"</span>,</span><br><span class="line">      "order": 1, #优先级</span><br><span class="line">      "predicates": [&#123; #路由断言</span><br><span class="line">          "args": &#123;</span><br><span class="line">              "pattern": "/xxx-server/**"</span><br><span class="line">          &#125;,</span><br><span class="line">          "name": "Path"</span><br><span class="line">      &#125;],</span><br><span class="line">      "filters":[&#123; #过滤规则</span><br><span class="line">          "args": &#123;</span><br><span class="line">              "parts": 0 #k8s服务内部访问容器为http://xxx-server/xxx-server的话,配置0即可</span><br><span class="line">          &#125;,</span><br><span class="line">          "name": "StripPrefix" #截取的开始索引</span><br><span class="line">      &#125;],</span><br><span class="line">      "uri": "http://localhost:8080/xxx-server" #目标地址</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure><p>json格式配置项与yaml中对应，需要了解配置在json中的写法</p><h4 id="比对一下json配置与yaml配置"><a href="#比对一下json配置与yaml配置" class="headerlink" title="比对一下json配置与yaml配置"></a>比对一下json配置与yaml配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"demo-server"</span>,</span><br><span class="line">    <span class="attr">"predicates"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"args"</span>:&#123;</span><br><span class="line">                <span class="attr">"pattern"</span>:<span class="string">"/demo-server/**"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"Path"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"filters"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"args"</span>:&#123;</span><br><span class="line">                <span class="attr">"parts"</span>:<span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"StripPrefix"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"uri"</span>:<span class="string">"http://localhost:8081"</span></span><br><span class="line">&#125;</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      enabled: true</span><br><span class="line">      routes:</span><br><span class="line">      - id: demo-server</span><br><span class="line">        uri: http://localhost:8081</span><br><span class="line">        predicates:</span><br><span class="line">        - Path=/demo-server/**</span><br><span class="line">        filters:</span><br><span class="line">          - StripPrefix= 1</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>Nacos实现动态路由的方式核心就是通过Nacos配置监听，配置发生改变后执行网关相关api创建路由</p><p><img src="https://static01.imgkr.com/temp/212d0d13ae944aeba8c08f3c6fd17c56.jpg" alt="ll"></p><p>图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class NacosDynamicRouteService implements ApplicationEventPublisherAware &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(NacosDynamicRouteService.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line"></span><br><span class="line">    private ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 路由id *&#x2F;</span><br><span class="line">    private static List&lt;String&gt; routeIds &#x3D; Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 监听nacos路由配置，动态改变路由</span><br><span class="line">     * @param configInfo</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @NacosConfigListener(dataId &#x3D; &quot;routes&quot;, groupId &#x3D; &quot;gateway-server&quot;)</span><br><span class="line">    public void routeConfigListener(String configInfo) &#123;</span><br><span class="line">        clearRoute();</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;RouteDefinition&gt; gatewayRouteDefinitions &#x3D; JSON.parseArray(configInfo, RouteDefinition.class);</span><br><span class="line">            for (RouteDefinition routeDefinition : gatewayRouteDefinitions) &#123;</span><br><span class="line">                addRoute(routeDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">            publish();</span><br><span class="line">            LOGGER.info(&quot;Dynamic Routing Publish Success&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 清空路由</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void clearRoute() &#123;</span><br><span class="line">        for (String id : routeIds) &#123;</span><br><span class="line">            routeDefinitionWriter.delete(Mono.just(id)).subscribe();</span><br><span class="line">        &#125;</span><br><span class="line">        routeIds.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) &#123;</span><br><span class="line">        this.applicationEventPublisher &#x3D; applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 添加路由</span><br><span class="line">     * </span><br><span class="line">     * @param definition</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void addRoute(RouteDefinition definition) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">            routeIds.add(definition.getId());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 发布路由、使路由生效</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void publish() &#123;</span><br><span class="line">        this.applicationEventPublisher.publishEvent(new RefreshRoutesEvent(this.routeDefinitionWriter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>gateway提供GlobalFilter及Ordered两个接口用来定义过滤器，我们自定义过滤器只需要实现这个两个接口即可</p><ul><li><code>GlobalFilter filter()</code> 实现过滤器业务</li><li><code>Ordered getOrder()</code> 定义过滤器执行顺序</li></ul><p>通常一个网关服务的过滤主要包含 鉴权（是否登录、是否黑名单、是否免登录接口…） 限流（ip限流等等）功能，我们今天简单介绍鉴权过滤器的流程实现</p><h4 id="鉴权过滤器"><a href="#鉴权过滤器" class="headerlink" title="鉴权过滤器"></a>鉴权过滤器</h4><p>需要实现鉴权过滤器，我们先得了解登录及鉴权流程，如下图所示</p><p><img src="https://static01.imgkr.com/temp/9e6eaadc95ed4689819140e6affeb8b9.jpg" alt="ee"></p><p>图片</p><p>由图可知，我们鉴权过滤核心就是验证token是否有效，所以我们网关服务需要与业务系统在同一个redis库，先给网关添加redis依赖及配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: redis-server</span><br><span class="line">    port: 6379</span><br><span class="line">    password:</span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><ol><li>定义过滤器AuthFilter</li><li>获取请求对象 从请求头或参数或cookie中获取token(支持多种方式传token对于客户端更加友好，比如部分web下载请求会新建一个页面，在请求头中传token处理起来比较麻烦)</li><li>没有token,返回401</li><li>有token，查询redis是否有效</li><li>无效则返回401，有效则完成验证放行</li><li>重置token过期时间、添加内部请求头信息方便业务系统权限处理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_HEADER_KEY = <span class="string">"auth_token"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取请求对象</span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        <span class="comment">// 2.获取token</span></span><br><span class="line">        String token = getToken(request);</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 3.token为空 返回401</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.验证token是否有效</span></span><br><span class="line">        String userId = getUserIdByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(userId)) &#123;</span><br><span class="line">            <span class="comment">// 5.token无效 返回401</span></span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// token有效，后续业务处理</span></span><br><span class="line">        <span class="comment">// 从写请求头，方便业务系统从请求头获取用户id进行权限相关处理</span></span><br><span class="line">        ServerHttpRequest.Builder builder = exchange.getRequest().mutate();</span><br><span class="line">        request = builder.header(<span class="string">"user_id"</span>, userId).build();</span><br><span class="line">        <span class="comment">// 延长缓存过期时间-token缓存用户如果一直在操作就会一直重置过期</span></span><br><span class="line">        <span class="comment">// 这样避免用户操作过程中突然过期影响业务操作及体验，只有用户操作间隔时间大于缓存过期时间才会过期</span></span><br><span class="line">        resetTokenExpirationTime(token, userId);</span><br><span class="line">        <span class="comment">// 完成验证</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 优先级 越小越优先</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis中获取用户id</span></span><br><span class="line"><span class="comment">     * 在登录操作时候 登陆成功会生成一个token, redis得key为auth_token:token 值为用户id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUserIdByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String redisKey = String.join(<span class="string">":"</span>, <span class="string">"auth_token"</span>, token);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置token过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetTokenExpirationTime</span><span class="params">(String token, String userId)</span> </span>&#123;</span><br><span class="line">        String redisKey = String.join(<span class="string">":"</span>, <span class="string">"auth_token"</span>, token);</span><br><span class="line">        redisTemplate.opsForValue().set(redisKey, userId, <span class="number">2</span>, TimeUnit.HOURS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(ServerHttpRequest request)</span> </span>&#123;</span><br><span class="line">        HttpHeaders headers = request.getHeaders();</span><br><span class="line">        <span class="comment">// 从请求头获取token</span></span><br><span class="line">        String token = headers.getFirst(TOKEN_HEADER_KEY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 请求头无token则从url获取token</span></span><br><span class="line">            token = request.getQueryParams().getFirst(TOKEN_HEADER_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 请求头和url都没有token则从cookies获取</span></span><br><span class="line">            HttpCookie cookie = request.getCookies().getFirst(TOKEN_HEADER_KEY);</span><br><span class="line">            <span class="keyword">if</span> (cookie != <span class="keyword">null</span>) &#123;</span><br><span class="line">                token = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Gateway通过配置项可以实现路由功能，整合Nacos及配置监听可以实现动态路由，实现GlobalFilter, Ordered两个接口可以快速实现一个过滤器，文中也详细的介绍了登录后的请求鉴权流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文记录一下我是如何使用Gateway搭建网关服务及实现动态路由的，帮助大家学习如何快速搭建一个网关服务，了解路由相关配置，鉴权的流程及业务处理，有兴趣的一定看到最后，非常适合没接触过网关服务的同学当作入门教程。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="-java -gateway" scheme="https://baiyu128.github.io/tags/java-gateway/"/>
    
  </entry>
  
  <entry>
    <title>Java微基准测试框架JMH</title>
    <link href="https://baiyu128.github.io/2022/03/02/Java%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6JMH/"/>
    <id>https://baiyu128.github.io/2022/03/02/Java%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6JMH/</id>
    <published>2022-03-02T02:39:09.000Z</published>
    <updated>2022-03-02T02:49:48.064Z</updated>
    
    <content type="html"><![CDATA[<p>JMH，即Java Microbenchmark Harness，这是专门用于进行代码的微基准测试的一套工具API。</p><p>JMH 由 OpenJDK/Oracle 里面那群开发了 Java 编译器的大牛们所开发 。何谓 Micro Benchmark 呢？ 简单地说就是在 method 层面上的 benchmark，精度可以精确到微秒级。</p><p>Java的基准测试需要注意的几个点：</p><ul><li>测试前需要预热。</li><li>防止无用代码进入测试方法中。</li><li>并发测试。</li><li>测试结果呈现。</li></ul><a id="more"></a><p>比较典型的使用场景：</p><ol><li>当你已经找出了热点函数，而需要对热点函数进行进一步的优化时，就可以使用 JMH 对优化的效果进行定量的分析。</li><li>想定量地知道某个函数需要执行多长时间，以及执行时间和输入 n 的相关性</li><li>一个函数有两种不同实现（例如JSON序列化/反序列化有Jackson和Gson实现），不知道哪种实现性能更好</li></ol><p>尽管 JMH 是一个相当不错的 Micro Benchmark Framework，但很无奈的是网上能够找到的文档比较少，而官方也没有提供比较详细的文档，对使用造成了一定的障碍。 但是有个好消息是官方的 <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener">Code Sample</a> 写得非常浅显易懂， 推荐在需要详细了解 JMH 的用法时可以通读一遍——本文则会介绍 JMH 最典型的用法和部分常用选项。</p><h2 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h2><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><p>如果使用maven项目，只需要添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JMH--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写性能测试"><a href="#编写性能测试" class="headerlink" title="编写性能测试"></a>编写性能测试</h3><p>接下来我写一个比较字符串连接操作的时候，直接使用字符串相加和使用StringBuilder的append方式的性能比较测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较字符串直接相加和StringBuilder的效率</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XiongNeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/1/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.Throughput)</span><br><span class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">3</span>)</span><br><span class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">10</span>, time = <span class="number">5</span>, timeUnit = TimeUnit.SECONDS)</span><br><span class="line"><span class="meta">@Threads</span>(<span class="number">8</span>)</span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MILLISECONDS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderBenchmark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            a += i;</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringBuilderAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        print(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><p>这个代码里面有好多注解，你第一次见可能不知道什么意思。先不用管，我待会一一介绍。</p><p>我们来运行这个测试，运行JMH基准测试有多种方式，一个是生成jar文件执行， 一个是直接写main函数或写单元测试执行。</p><p>一般对于大型的测试，需要测试时间比较久，线程比较多的话，就需要去写好了丢到linux程序里执行， 不然本机执行很久时间什么都干不了了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">java -jar target/benchmarks.jar</span><br></pre></td></tr></table></figure><p>先编译打包之后，然后执行就可以了。当然在执行的时候可以输入-h参数来看帮助。</p><p>另外如果对于一些小的测试，比如我写的上面这个小例子，在IDE里面就可以完成了，丢到linux上去太麻烦。 这时候可以在里面添加一个main函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 仅限于IDE中运行</span></span><br><span class="line"><span class="comment"> * 命令行模式 则是 build 然后 java -jar 启动</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 这是benchmark 启动的入口</span></span><br><span class="line"><span class="comment"> * 2. 这里同时还完成了JMH测试的一些配置工作</span></span><br><span class="line"><span class="comment"> * 3. 默认场景下，JMH会去找寻标注了<span class="doctag">@Benchmark</span>的方法，可以通过include和exclude两个方法来完成包含以及排除的语义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">    Options options = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">      <span class="comment">// 包含语义</span></span><br><span class="line">            <span class="comment">// 可以用方法名，也可以用XXX.class.getSimpleName()</span></span><br><span class="line">            .include(StringBuilderBenchmark<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span></span><br><span class="line">            .output("E:/Benchmark.log")</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">new</span> Runner(options).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实也比较简单，new个Options，然后传入要运行哪个测试，选择基准测试报告输出文件地址，然后通过Runner的run方法就可以跑起来了。</p><h3 id="报告结果"><a href="#报告结果" class="headerlink" title="报告结果"></a>报告结果</h3><p>我们跑一下这个基准测试，完成后打开<code>E:/Benchmark.log</code>，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"># JMH version: 1.20</span><br><span class="line"># VM version: JDK 1.8.0_131, VM 25.131-b11</span><br><span class="line"># VM invoker: C:\Program Files\Java\jdk1.8.0_131\jre\bin\java.exe</span><br><span class="line"># VM options: -javaagent:E:\Program Files\JetBrains\IntelliJ IDEA 2017.3\lib\idea_rt.jar&#x3D;62744:E:\Program Files\JetBrains\IntelliJ IDEA 2017.3\bin -Dfile.encoding&#x3D;UTF-8</span><br><span class="line"># Warmup: 3 iterations, 1 s each</span><br><span class="line"># Measurement: 10 iterations, 5 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 16 threads, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops&#x2F;time</span><br><span class="line"># Benchmark: com.xncoding.benchmark.string.StringBuilderBenchmark.testStringAdd</span><br><span class="line"></span><br><span class="line"># Run progress: 0.00% complete, ETA 00:03:32</span><br><span class="line"># Fork: 1 of 2</span><br><span class="line"># Warmup Iteration   1: 7332.410 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 8758.506 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 9078.783 ops&#x2F;ms</span><br><span class="line">Iteration   1: 8824.713 ops&#x2F;ms</span><br><span class="line">Iteration   2: 9084.977 ops&#x2F;ms</span><br><span class="line">Iteration   3: 9412.712 ops&#x2F;ms</span><br><span class="line">Iteration   4: 8843.631 ops&#x2F;ms</span><br><span class="line">Iteration   5: 9030.556 ops&#x2F;ms</span><br><span class="line">Iteration   6: 9090.677 ops&#x2F;ms</span><br><span class="line">Iteration   7: 9493.148 ops&#x2F;ms</span><br><span class="line">Iteration   8: 8664.593 ops&#x2F;ms</span><br><span class="line">Iteration   9: 8835.227 ops&#x2F;ms</span><br><span class="line">Iteration  10: 8570.212 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"># Run progress: 25.00% complete, ETA 00:03:15</span><br><span class="line"># Fork: 2 of 2</span><br><span class="line"># Warmup Iteration   1: 5350.686 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 8862.238 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 8086.594 ops&#x2F;ms</span><br><span class="line">Iteration   1: 9105.306 ops&#x2F;ms</span><br><span class="line">Iteration   2: 8288.588 ops&#x2F;ms</span><br><span class="line">Iteration   3: 9307.902 ops&#x2F;ms</span><br><span class="line">Iteration   4: 9195.150 ops&#x2F;ms</span><br><span class="line">Iteration   5: 8715.555 ops&#x2F;ms</span><br><span class="line">Iteration   6: 9075.069 ops&#x2F;ms</span><br><span class="line">Iteration   7: 9041.037 ops&#x2F;ms</span><br><span class="line">Iteration   8: 9187.099 ops&#x2F;ms</span><br><span class="line">Iteration   9: 9145.134 ops&#x2F;ms</span><br><span class="line">Iteration  10: 9124.229 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;com.xncoding.benchmark.string.StringBuilderBenchmark.testStringAdd&quot;:</span><br><span class="line">  9001.776 ±(99.9%) 253.496 ops&#x2F;ms [Average]</span><br><span class="line">  (min, avg, max) &#x3D; (8288.588, 9001.776, 9493.148), stdev &#x3D; 291.926</span><br><span class="line">  CI (99.9%): [8748.280, 9255.272] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMH version: 1.20</span><br><span class="line"># VM version: JDK 1.8.0_131, VM 25.131-b11</span><br><span class="line"># VM invoker: C:\Program Files\Java\jdk1.8.0_131\jre\bin\java.exe</span><br><span class="line"># VM options: -javaagent:E:\Program Files\JetBrains\IntelliJ IDEA 2017.3\lib\idea_rt.jar&#x3D;62744:E:\Program Files\JetBrains\IntelliJ IDEA 2017.3\bin -Dfile.encoding&#x3D;UTF-8</span><br><span class="line"># Warmup: 3 iterations, 1 s each</span><br><span class="line"># Measurement: 10 iterations, 5 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 16 threads, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops&#x2F;time</span><br><span class="line"># Benchmark: com.xncoding.benchmark.string.StringBuilderBenchmark.testStringBuilderAdd</span><br><span class="line"></span><br><span class="line"># Run progress: 50.00% complete, ETA 00:02:07</span><br><span class="line"># Fork: 1 of 2</span><br><span class="line"># Warmup Iteration   1: 27202.528 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 26500.586 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 27190.346 ops&#x2F;ms</span><br><span class="line">Iteration   1: 27891.257 ops&#x2F;ms</span><br><span class="line">Iteration   2: 28704.541 ops&#x2F;ms</span><br><span class="line">Iteration   3: 27785.951 ops&#x2F;ms</span><br><span class="line">Iteration   4: 26841.454 ops&#x2F;ms</span><br><span class="line">Iteration   5: 26024.288 ops&#x2F;ms</span><br><span class="line">Iteration   6: 25592.494 ops&#x2F;ms</span><br><span class="line">Iteration   7: 25626.875 ops&#x2F;ms</span><br><span class="line">Iteration   8: 25302.248 ops&#x2F;ms</span><br><span class="line">Iteration   9: 25519.780 ops&#x2F;ms</span><br><span class="line">Iteration  10: 25275.334 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"># Run progress: 75.00% complete, ETA 00:01:02</span><br><span class="line"># Fork: 2 of 2</span><br><span class="line"># Warmup Iteration   1: 30376.008 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 25131.064 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 25622.342 ops&#x2F;ms</span><br><span class="line">Iteration   1: 25386.845 ops&#x2F;ms</span><br><span class="line">Iteration   2: 25825.139 ops&#x2F;ms</span><br><span class="line">Iteration   3: 26029.607 ops&#x2F;ms</span><br><span class="line">Iteration   4: 25531.748 ops&#x2F;ms</span><br><span class="line">Iteration   5: 25374.934 ops&#x2F;ms</span><br><span class="line">Iteration   6: 25204.530 ops&#x2F;ms</span><br><span class="line">Iteration   7: 22934.211 ops&#x2F;ms</span><br><span class="line">Iteration   8: 23907.677 ops&#x2F;ms</span><br><span class="line">Iteration   9: 24337.963 ops&#x2F;ms</span><br><span class="line">Iteration  10: 24660.626 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;com.xncoding.benchmark.string.StringBuilderBenchmark.testStringBuilderAdd&quot;:</span><br><span class="line">  25687.875 ±(99.9%) 1167.955 ops&#x2F;ms [Average]</span><br><span class="line">  (min, avg, max) &#x3D; (22934.211, 25687.875, 28704.541), stdev &#x3D; 1345.019</span><br><span class="line">  CI (99.9%): [24519.920, 26855.830] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:04:08</span><br><span class="line"></span><br><span class="line">Benchmark                                     Mode  Cnt      Score      Error   Units</span><br><span class="line">StringBuilderBenchmark.testStringAdd         thrpt   20   9001.776 ±  253.496  ops&#x2F;ms</span><br><span class="line">StringBuilderBenchmark.testStringBuilderAdd  thrpt   20  25687.875 ± 1167.955  ops&#x2F;ms</span><br></pre></td></tr></table></figure><p>仔细看，三大部分，第一部分是字符串用加号连接执行的结果，第二部分是StringBuilder执行的结果，第三部分就是两个的简单结果比较。这里注意我们forks传的2，所以每个测试有两个fork结果。</p><p>前两部分是一样的，简单说下。首先会写出每部分的一些参数设置，然后是预热迭代执行（Warmup Iteration）， 然后是正常的迭代执行（Iteration），最后是结果（Result）。这些看看就好，我们最关注的就是第三部分， 其实也就是最终的结论。千万别看歪了，他输出的也确实很不爽，error那列其实没有内容，score的结果是xxx ± xxx，单位是每毫秒多少个操作。可以看到，StringBuilder的速度还确实是要比String进行文字叠加的效率好太多。</p><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><p>好了，当你对JMH有了一个基本认识后，现在来详细解释一下前面代码中的各个注解含义。</p><h3 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a>@BenchmarkMode</h3><p>基准测试类型。这里选择的是Throughput也就是吞吐量。根据源码点进去，每种类型后面都有对应的解释，比较好理解，吞吐量会得到单位时间内可以进行的操作数。</p><ul><li>Throughput: 整体吞吐量，例如”1秒内可以执行多少次调用”。</li><li>AverageTime: 调用的平均时间，例如”每次调用平均耗时xxx毫秒”。</li><li>SampleTime: 随机取样，最后输出取样结果的分布，例如”99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li><li>SingleShotTime: 以上模式都是默认一次 iteration 是 1s，唯有 SingleShotTime 是只运行一次。往往同时把 warmup 次数设为0，用于测试冷启动时的性能。</li><li>All(“all”, “All benchmark modes”);</li></ul><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="@Warmup"></a>@Warmup</h3><p>上面我们提到了，进行基准测试前需要进行预热。一般我们前几次进行程序测试的时候都会比较慢， 所以要让程序进行几轮预热，保证测试的准确性。其中的参数iterations也就非常好理解了，就是预热轮数。</p><p>为什么需要预热？因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。所以为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p><h3 id="Measurement"><a href="#Measurement" class="headerlink" title="@Measurement"></a>@Measurement</h3><p>度量，其实就是一些基本的测试参数。</p><ol><li>iterations 进行测试的轮次</li><li>time 每轮进行的时长</li><li>timeUnit 时长单位</li></ol><p>都是一些基本的参数，可以根据具体情况调整。一般比较重的东西可以进行大量的测试，放到服务器上运行。</p><h3 id="Threads"><a href="#Threads" class="headerlink" title="@Threads"></a>@Threads</h3><p>每个进程中的测试线程，这个非常好理解，根据具体情况选择，一般为cpu乘以2。</p><h3 id="Fork"><a href="#Fork" class="headerlink" title="@Fork"></a>@Fork</h3><p>进行 fork 的次数。如果 fork 数是2的话，则 JMH 会 fork 出两个进程来进行测试。</p><h3 id="OutputTimeUnit"><a href="#OutputTimeUnit" class="headerlink" title="@OutputTimeUnit"></a>@OutputTimeUnit</h3><p>这个比较简单了，基准测试结果的时间类型。一般选择秒、毫秒、微秒。</p><h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a>@Benchmark</h3><p>方法级注解，表示该方法是需要进行 benchmark 的对象，用法和 JUnit 的 @Test 类似。</p><h3 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h3><p>属性级注解，@Param 可以用来指定某项参数的多种情况。特别适合用来测试一个函数在不同的参数输入的情况下的性能。</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="@Setup"></a>@Setup</h3><p>方法级注解，这个注解的作用就是我们需要在测试之前进行一些准备工作，比如对一些数据的初始化之类的。</p><h3 id="TearDown"><a href="#TearDown" class="headerlink" title="@TearDown"></a>@TearDown</h3><p>方法级注解，这个注解的作用就是我们需要在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</p><h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p>当使用@Setup参数的时候，必须在类上加这个参数，不然会提示无法运行。</p><p>State 用于声明某个类是一个”状态”，然后接受一个 Scope 参数用来表示该状态的共享范围。 因为很多 benchmark 会需要一些表示状态的类，JMH 允许你把这些类以依赖注入的方式注入到 benchmark 函数里。Scope 主要分为三种。</p><ol><li>Thread: 该状态为每个线程独享。</li><li>Group: 该状态为同一个组里面所有线程共享。</li><li>Benchmark: 该状态在所有线程间共享。</li></ol><p>关于State的用法，官方的 code sample 里有比较好的<a href="http://hg.openjdk.java.net/code-tools/jmh/file/cb9aa824b55a/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_03_States.java" target="_blank" rel="noopener">例子</a>。</p><h2 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h2><p>再来看一个更常规一点性能测试的例子，</p><p>计算 1 ~ n 之和，比较串行算法和并行算法的效率，看 n 在大约多少时并行算法开始超越串行算法</p><p>首先定义一个表示这两种实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XiongNeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/1/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * calculate sum of an integer array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numbers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shutdown pool or reclaim any related resources</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的两种实现代码我就不贴了，主要说明一下串行算法和并行算法实现原理：</p><ul><li>串行算法：使用 for-loop 来计算 n 个正整数之和。</li><li>并行算法：将所需要计算的 n 个正整数分成 m 份，交给 m 个线程分别计算出和以后，再把它们的结果相加。</li></ul><p>进行 benchmark 的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自然数求和的串行和并行算法性能测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XiongNeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/1/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MICROSECONDS)</span><br><span class="line"><span class="meta">@State</span>(Scope.Benchmark)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondBenchmark</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Param</span>(&#123;<span class="string">"10000"</span>, <span class="string">"100000"</span>, <span class="string">"1000000"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] numbers;</span><br><span class="line">    <span class="keyword">private</span> Calculator singleThreadCalc;</span><br><span class="line">    <span class="keyword">private</span> Calculator multiThreadCalc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 仅限于IDE中运行</span></span><br><span class="line"><span class="comment">   * 命令行模式 则是 build 然后 java -jar 启动</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 1. 这是benchmark 启动的入口</span></span><br><span class="line"><span class="comment">   * 2. 这里同时还完成了JMH测试的一些配置工作</span></span><br><span class="line"><span class="comment">   * 3. 默认场景下，JMH会去找寻标注了<span class="doctag">@Benchmark</span>的方法，可以通过include和exclude两个方法来完成包含以及排除的语义</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">          <span class="comment">// 包含语义</span></span><br><span class="line">            <span class="comment">// 可以用方法名，也可以用XXX.class.getSimpleName()</span></span><br><span class="line">                .include(SecondBenchmark<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span></span><br><span class="line"><span class="class">          // 排除语义</span></span><br><span class="line">            .exclude("Pref")</span><br><span class="line">              <span class="comment">//  forks(3)指的是做3轮测试，</span></span><br><span class="line">                <span class="comment">// 因为一次测试无法有效的代表结果，</span></span><br><span class="line">                <span class="comment">// 所以通过3轮测试较为全面的测试，</span></span><br><span class="line">                <span class="comment">// 而每一轮都是先预热，再正式计量。</span></span><br><span class="line">                .forks(<span class="number">3</span>)</span><br><span class="line">          <span class="comment">// 预热10轮</span></span><br><span class="line">                .warmupIterations(<span class="number">5</span>)</span><br><span class="line">              <span class="comment">// 代表正式计量测试做10轮，</span></span><br><span class="line">                <span class="comment">// 而每次都是先执行完预热再执行正式计量，</span></span><br><span class="line">                <span class="comment">// 内容都是调用标注了@Benchmark的代码。</span></span><br><span class="line">                .measurementIterations(<span class="number">2</span>)</span><br><span class="line">                .build();</span><br><span class="line">        Collection&lt;RunResult&gt; results =  <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">        ResultExporter.exportResult(<span class="string">"单线程与多线程求和性能"</span>, results, <span class="string">"length"</span>, <span class="string">"微秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">singleThreadBench</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleThreadCalc.sum(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">multiThreadBench</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> multiThreadCalc.sum(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        numbers = IntStream.rangeClosed(<span class="number">1</span>, length).toArray();</span><br><span class="line">        singleThreadCalc = <span class="keyword">new</span> SinglethreadCalculator();</span><br><span class="line">        multiThreadCalc = <span class="keyword">new</span> MultithreadCalculator(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TearDown</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        singleThreadCalc.shutdown();</span><br><span class="line">        multiThreadCalc.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在自己的笔记本电脑上跑下来的结果，总数在10000时并行算法不如串行算法， 总数达到100000时并行算法开始和串行算法接近，总数达到1000000时并行算法所耗时间约是串行算法的一半左右。<br><img src="https://static01.imgkr.com/temp/e5d15610f4124527b79633b9bdbbfaad.png" alt="jmh"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JMH，即Java Microbenchmark Harness，这是专门用于进行代码的微基准测试的一套工具API。&lt;/p&gt;
&lt;p&gt;JMH 由 OpenJDK/Oracle 里面那群开发了 Java 编译器的大牛们所开发 。何谓 Micro Benchmark 呢？ 简单地说就是在 method 层面上的 benchmark，精度可以精确到微秒级。&lt;/p&gt;
&lt;p&gt;Java的基准测试需要注意的几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试前需要预热。&lt;/li&gt;
&lt;li&gt;防止无用代码进入测试方法中。&lt;/li&gt;
&lt;li&gt;并发测试。&lt;/li&gt;
&lt;li&gt;测试结果呈现。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="-java" scheme="https://baiyu128.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>解锁if-else的另一种姿势：Map+函数式接口方法.md</title>
    <link href="https://baiyu128.github.io/2022/01/26/%E8%A7%A3%E9%94%81if-else%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%A7%BF%E5%8A%BF%EF%BC%9AMap-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95-md/"/>
    <id>https://baiyu128.github.io/2022/01/26/%E8%A7%A3%E9%94%81if-else%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%A7%BF%E5%8A%BF%EF%BC%9AMap-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95-md/</id>
    <published>2022-01-26T08:47:12.000Z</published>
    <updated>2022-01-27T00:55:37.745Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍策略模式的具体应用以及Map+函数式接口如何 “更完美” 的解决 if-else的问题。</p><p><strong>需求</strong></p><p>最近写了一个服务：根据优惠券的类型resourceType和编码resourceId来 查询 发放方式grantType和领取规则</p><p><strong>实现方式</strong></p><ul><li>根据优惠券类型resourceType -&gt; 确定查询哪个数据表</li><li>根据编码resourceId -&gt; 到对应的数据表里边查询优惠券的派发方式grantType和领取规则</li></ul><a id="more"></a><p>优惠券有多种类型，分别对应了不同的数据库表：</p><ul><li>红包 —— 红包发放规则表</li><li>购物券 —— 购物券表</li><li>QQ会员</li><li>外卖会员</li></ul><p>实际的优惠券远不止这些，这个需求是要我们写一个业务分派的逻辑</p><p>第一个能想到的思路就是if-else或者switch case：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">switch(resourceType)&#123;</span><br><span class="line"> case &quot;红包&quot;: </span><br><span class="line">  查询红包的派发方式 </span><br><span class="line">  break;</span><br><span class="line"> case &quot;购物券&quot;: </span><br><span class="line">  查询购物券的派发方式</span><br><span class="line">  break;</span><br><span class="line"> case &quot;QQ会员&quot; :</span><br><span class="line">  break;</span><br><span class="line"> case &quot;外卖会员&quot; :</span><br><span class="line">  break;</span><br><span class="line"> ......</span><br><span class="line"> default : logger.info(&quot;查找不到该优惠券类型resourceType以及对应的派发方式&quot;);</span><br><span class="line">  break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要这么写的话， 一个方法的代码可就太长了，影响了可读性。（别看着上面case里面只有一句话，但实际情况是有很多行的）</p><p>而且由于 整个 if-else的代码有很多行，也不方便修改，可维护性低。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式是把 if语句里面的逻辑抽出来写成一个类，如果要修改某个逻辑的话，仅修改一个具体的实现类的逻辑即可，可维护性会好不少。</p><p>以下是策略模式的具体结构</p><p>策略模式在业务逻辑分派的时候还是if-else，只是说比第一种思路的if-else 更好维护一点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(resourceType)&#123;</span><br><span class="line"> case &quot;红包&quot;: </span><br><span class="line">  String grantType&#x3D;new Context(new RedPaper()).ContextInterface();</span><br><span class="line">  break;</span><br><span class="line"> case &quot;购物券&quot;: </span><br><span class="line">  String grantType&#x3D;new Context(new Shopping()).ContextInterface();</span><br><span class="line">  break;</span><br><span class="line"> </span><br><span class="line"> ......</span><br><span class="line"> default : logger.info(&quot;查找不到该优惠券类型resourceType以及对应的派发方式&quot;);</span><br><span class="line">  break;</span><br></pre></td></tr></table></figure><p>但缺点也明显：</p><ul><li>如果 if-else的判断情况很多，那么对应的具体策略实现类也会很多，上边的具体的策略实现类还只是2个，查询红包发放方式写在类RedPaper里边，购物券写在另一个类Shopping里边；那资源类型多个QQ会员和外卖会员，不就得再多写两个类？有点麻烦了</li><li>没法俯视整个分派的业务逻辑</li></ul><h3 id="Map-函数式接口"><a href="#Map-函数式接口" class="headerlink" title="Map+函数式接口"></a>Map+函数式接口</h3><p>用上了Java8的新特性lambda表达式</p><ul><li>判断条件放在key中</li><li>对应的业务逻辑放在value中</li></ul><p>这样子写的好处是非常直观，能直接看到判断条件对应的业务逻辑</p><blockquote><p>需求：根据优惠券(资源)类型resourceType和编码resourceId查询派发方式grantType</p></blockquote><p>上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class QueryGrantTypeService &#123;</span><br><span class="line"> </span><br><span class="line">    @Autowired</span><br><span class="line">    private GrantTypeSerive grantTypeSerive;</span><br><span class="line">    private Map&lt;String, Function&lt;String,String&gt;&gt; grantTypeMap&#x3D;new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  初始化业务分派逻辑,代替了if-else部分</span><br><span class="line">     *  key: 优惠券类型</span><br><span class="line">     *  value: lambda表达式,最终会获得该优惠券的发放方式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void dispatcherInit()&#123;</span><br><span class="line">        grantTypeMap.put(&quot;红包&quot;,resourceId-&gt;grantTypeSerive.redPaper(resourceId));</span><br><span class="line">        grantTypeMap.put(&quot;购物券&quot;,resourceId-&gt;grantTypeSerive.shopping(resourceId));</span><br><span class="line">        grantTypeMap.put(&quot;qq会员&quot;,resourceId-&gt;grantTypeSerive.QQVip(resourceId));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getResult(String resourceType)&#123;</span><br><span class="line">        &#x2F;&#x2F;Controller根据 优惠券类型resourceType、编码resourceId 去查询 发放方式grantType</span><br><span class="line">        Function&lt;String,String&gt; result&#x3D;getGrantTypeMap.get(resourceType);</span><br><span class="line">        if(result!&#x3D;null)&#123;</span><br><span class="line">         &#x2F;&#x2F;传入resourceId 执行这段表达式获得String型的grantType</span><br><span class="line">            return result.apply(resourceId);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;查询不到该优惠券的发放方式&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果单个 if 语句块的业务逻辑有很多行的话，我们可以把这些 业务操作抽出来，写成一个单独的Service，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;具体的逻辑操作</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class GrantTypeSerive &#123;</span><br><span class="line"></span><br><span class="line">    public String redPaper(String resourceId)&#123;</span><br><span class="line">        &#x2F;&#x2F;红包的发放方式</span><br><span class="line">        return &quot;每周末9点发放&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public String shopping(String resourceId)&#123;</span><br><span class="line">        &#x2F;&#x2F;购物券的发放方式</span><br><span class="line">        return &quot;每周三9点发放&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public String QQVip(String resourceId)&#123;</span><br><span class="line">        &#x2F;&#x2F;qq会员的发放方式</span><br><span class="line">        return &quot;每周一0点开始秒杀&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入参String resourceId是用来查数据库的，这里简化了，传参之后不做处理。</p><p>用http调用的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class GrantTypeController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private QueryGrantTypeService queryGrantTypeService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;&#x2F;grantType&quot;)</span><br><span class="line">    public String test(String resourceName)&#123;</span><br><span class="line">        return queryGrantTypeService.getResult(resourceName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Map+函数式接口也有弊端：</p><p>你的队友得会lambda表达式才行啊，他不会让他自己百度去</p><h3 id="最后捋一捋本文讲了什么"><a href="#最后捋一捋本文讲了什么" class="headerlink" title="最后捋一捋本文讲了什么"></a>最后捋一捋本文讲了什么</h3><p>策略模式通过接口、实现类、逻辑分派来完成，把 if语句块的逻辑抽出来写成一个类，更好维护。</p><p>Map+函数式接口通过Map.get(key)来代替 if-else的业务分派，能够避免策略模式带来的类增多、难以俯视整个业务逻辑的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍策略模式的具体应用以及Map+函数式接口如何 “更完美” 的解决 if-else的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近写了一个服务：根据优惠券的类型resourceType和编码resourceId来 查询 发放方式grantType和领取规则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据优惠券类型resourceType -&amp;gt; 确定查询哪个数据表&lt;/li&gt;
&lt;li&gt;根据编码resourceId -&amp;gt; 到对应的数据表里边查询优惠券的派发方式grantType和领取规则&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="-java" scheme="https://baiyu128.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IP地址分类和网段详解.md</title>
    <link href="https://baiyu128.github.io/2021/06/30/IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB%E5%92%8C%E7%BD%91%E6%AE%B5%E8%AF%A6%E8%A7%A3/"/>
    <id>https://baiyu128.github.io/2021/06/30/IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB%E5%92%8C%E7%BD%91%E6%AE%B5%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-06-30T01:49:45.000Z</published>
    <updated>2021-06-30T02:00:00.313Z</updated>
    
    <content type="html"><![CDATA[<p>｜ 突然遇到一个涉及ip的问题，发现概念都模糊了，特来复习</p><p>IP地址分类/IP地址10开头和172开头和192开头的区别/判断是否同一网段</p><p>简单来说在公司或企业内部看到的就基本都是内网IP，ABC三类IP地址里的常见IP段。</p><a id="more"></a><p>每个IP地址都包含两部分，即网络号和主机号。<br>InterNIC将IP地址分为五类:<br>A类保留给ZF或大型企业，<br>B类分配给中等规模的公司，<br>C类分配给小公司或个人，<br>D类用于组播，<br>E类用于实验，<br>注：各类可容纳的地址数目不同。</p><p>A、B、C三类IP地址的特征：当将IP地址写成二进制形式时，<br>A类地址的第一位总是O，如，10.0.0.1==00001010-00000000-00000000-00000001<br>==》1.0.0.0-127.255.255.255，默认子网掩码为255.0.0.0，最多可容纳16777215台计算机<br>B类地址的前两位总是10，如，172.16.0.1==10101100-00010000-00000000-00000001<br>==》128.0.0.0-191.255.255.255，默认子网掩码为255.255.0.0，最多可容纳65535台计算机<br>C类地址的前三位总是110。如，192.168.0.1==11000000-10101000-00000000-00000001<br>==》192.0.0.0-223.255.255.255，默认子网掩码是255.255.255.0，最多可容纳254台计算机</p><p>IP地址中保留地址：主机部分全为0的IP地址保留用于网络地址，主机部分全为1的IP地址保留为广播地址，224–255部分保留作为组播和实验目的。 同时注意IP地址分配时不能使用最末位为0和255的地址，因为这是广播地址，普通计算机上不能使用，但可用于网关和路由器上。</p><p>专用IP地址： 就是我们在3类地址中常见到内网的IP段。</p><p>10.0.0.0–10.255.255.255<br>172.16.0.0–172.31.255.255<br>192.168.0.0–192.168.255.255</p><p>内网的计算机以NAT（网络地址转换）协议，通过一个公共的网关访问Internet。内网的计算机可向Internet上的其他计算机发送连接请求，但Internet上其他的计算机无法向内网的计算机发送连接请求。</p><p>主机地址种类</p><p>概述<br>　　通过IP地址的引导位(最高位)来区分不同类别的IP地址：</p><p>　　注：n为网络编号位，h为主机编号位</p><p>A类地址<br>　　A类地址：0nnnnnnn.hhhhhhhh.hhhhhhhh.hhhhhhhh</p><p>　　A类地址具有7位网络编号，因此可定义126个A类网络{2^7－2(网络编号不能是全0或全1 注1)-1(127为环回地址 注2)}每个网络可以拥有的主机数为16777214{2^24-2(主机位不能是全0或全1)}</p><p>　　十进制表示范围：1.0.0.1-126.255.255.254,任何一个0到127间的网络地址均是一个A类地址。</p><p>B类地址<br>　　B类地址：10nnnnnn.nnnnnnnn.hhhhhhhh.hhhhhhhh</p><p>　　B类地址具有14位网络编号，因此可定义16382个B类网络{2^14-2}</p><p>　　每个网络可以拥有的主机数为65534{2^16-2}</p><p>　　十进制表示范围：129.0.0.1-191.255.255.254,任何一个128到191间的网络地址是一个B类地址。</p><p>C类地址<br>　　C类地址：110nnnnn.nnnnnnnn.nnnnnnnn.hhhhhhhh</p><p>　　C类地址具有21位网络编号，因此可定义2097152个C类地址{2^21-2}</p><p>　　每个网络可以拥有的主机数为254{2^8-2}</p><p>　　十进制表示范围：192.0.0.1-223.255.255.254,任何一个192到223间的网络地址是一个C类地址。</p><p>D类地址<br>　　D类地址：1110xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx</p><p>　　D类地址用于组播，前面4位1110引导，后面28位为组播地址ID。</p><p>　　十进制表示范围：224.0.0.0-239.255.255.255</p><p>E类地址<br>　　E类地址：总是以1111四位引导</p><p>　　E类地址用于研究用</p><p>　　十进制表示范围：240-</p><p>　　IP地址由InterNIC(因特网信息中心)统一分配，以保证IP地址的唯一性，但有一类IP地址是不用申请可直接用于企业内部网的，这就是Private Address，Private Address不会被INTERNET上的任何路由器转发，欲接入INTERNET必须要通过NAT/PAT转换，以公有IP的形式接入。</p><p>　　这些私为地址为：</p><p>　　10.0.0.0-10.255.255.255（一个A类地址）</p><p>　　172.16.0.0－172.31.255.255（16个B类地址）</p><p>　　192.168.0.0－192.168.255.255（256个C类地址）</p><p>　　任何一个第一个八位组在224到239间的网络地址是一个组播地址</p><p>　　任何一个专用I P网络均可以使用包括:</p><p>　　1个A类地址( 10.0.0.0 )、</p><p>　　16个B类地址(从172.16.0.0到172.31.0.0 )</p><p>　　256个C类地址(从192.168.0.0到192.168.255.0 )</p><p>子网掩码的前缀表示法！11111111 11111111 1111111 00000000 24个1组成转成成十进制等于 255.255.255.011111111 11111111 1111111 11111100 30个1组成转成成十进制等于 255.255.255.252</p><p>机房总是发一个类似 10.0.0.1/29 或 10.0.0.1/28 或 10.0.0.1/30 或 10.0.0.1/27 的地址给我们，对于不熟悉网络的人来说，真的莫名其妙。到底有哪些可用的IP？ 网关,子网掩码，广播地址是什么？</p><p>“/24”表示这个IP的子网为24位，为子网掩码，指有24个“1”，即“255.255.255.0”。</p><p>子网掩码是4个8位2进制数组成的, 换化成10进制是就是现在这样的, 如255.255.255.0, 换成2进制的话就是11111111 11111111 11111111 00000000, 前面有24个1, 也就是ip/24，10.10.1.1/24    就表示ip是10.10.1.1, 子网掩码是255.255.255。</p><p>表示网络ID是10.10.10.0,24表示子网掩码为255.255.255.0  也就是网段可用IP位10.10.10.1-254</p><table><thead><tr><th></th><th>IP总数</th><th>子网掩码</th><th>C段个数</th></tr></thead><tbody><tr><td>/30</td><td>4</td><td>255.255.255.252</td><td>1/64</td></tr><tr><td>/29</td><td>8</td><td>255.255.255.248</td><td>1/32</td></tr><tr><td>/28</td><td>16</td><td>255.255.255.240</td><td>1/16</td></tr><tr><td>/27</td><td>32</td><td>255.255.255.224</td><td>1/8</td></tr><tr><td>/26</td><td>64</td><td>255.255.255.192</td><td>1/4</td></tr><tr><td>/24</td><td>256</td><td>255.255.255.0</td><td>1</td></tr><tr><td>/23</td><td>512</td><td>255.255.254.0</td><td>2</td></tr><tr><td>/22</td><td>1024</td><td>255.255.252.0</td><td>4</td></tr><tr><td>/21</td><td>2048</td><td>255.255.248.0</td><td>8</td></tr><tr><td>/20</td><td>4096</td><td>255.255.240.0</td><td>16</td></tr><tr><td>/19</td><td>8192</td><td>255.255.224.0</td><td>32</td></tr><tr><td>/18</td><td>16384</td><td>255.255.192.0</td><td>64</td></tr><tr><td>/17</td><td>32768</td><td>255.255.128.0</td><td>128</td></tr><tr><td>/16</td><td>65536</td><td>255.255.0.0</td><td>256</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;｜ 突然遇到一个涉及ip的问题，发现概念都模糊了，特来复习&lt;/p&gt;
&lt;p&gt;IP地址分类/IP地址10开头和172开头和192开头的区别/判断是否同一网段&lt;/p&gt;
&lt;p&gt;简单来说在公司或企业内部看到的就基本都是内网IP，ABC三类IP地址里的常见IP段。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="-ip" scheme="https://baiyu128.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-分区表基本类型-最佳实践</title>
    <link href="https://baiyu128.github.io/2021/04/01/MYSQL-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://baiyu128.github.io/2021/04/01/MYSQL-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-04-01T07:19:36.000Z</published>
    <updated>2021-04-01T07:44:16.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL分区表概述"><a href="#MySQL分区表概述" class="headerlink" title="MySQL分区表概述"></a>MySQL分区表概述</h2><p>随着MySQL越来越流行，Mysql里面的保存的数据也越来越大。在日常的工作中，我们经常遇到一张表里面保存了上亿甚至过十亿的记录。这些表里面保存了大量的历史记录。 对于这些历史数据的清理是一个非常头疼事情，由于所有的数据都一个普通的表里。所以只能是启用一个或多个带where条件的delete语句去删除（一般where条件是时间）。 这对数据库的造成了很大压力。即使我们把这些删除了，但底层的数据文件并没有变小。面对这类问题，最有效的方法就是在使用分区表。最常见的分区方法就是按照时间进行分区。 分区一个最大的优点就是可以非常高效的进行历史数据的清理。</p><a id="more"></a><h2 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h2><p>目前MySQL支持范围分区（RANGE），列表分区（LIST），哈希分区（HASH）以及KEY分区四种。下面我们逐一介绍每种分区：</p><h3 id="RANGE分区"><a href="#RANGE分区" class="headerlink" title="RANGE分区"></a>RANGE分区</h3><p>基于属于一个给定连续区间的列值，把多行分配给分区。最常见的是基于时间字段. 基于分区的列最好是整型，如果日期型的可以使用函数转换为整型。本例中使用to_days函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_range_datetime(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    hiredate DATETIME</span><br><span class="line">) </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">TO_DAYS</span>(hiredate) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171202'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171203'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171204'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171205'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171206'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p6 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171207'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p7 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171208'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p8 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171209'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p9 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171210'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p10 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">TO_DAYS</span>(<span class="string">'20171211'</span>) )，</span><br><span class="line">    <span class="keyword">PARTITION</span> p11 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (MAXVALUE) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建议分区名称按照日期分，比如表名my_range_datetime ，分区p1 改名为 my_range_datetime_20171201，方便知道对应分区内数据为那一天的数据</span></span><br></pre></td></tr></table></figure><p>p11是一个默认分区，所有大于20171211的记录都会在这个分区。MAXVALUE是一个无穷大的值。p11是一个可选分区。如果在定义表的没有指定的这个分区，当我们插入大于20171211的数据的时候，会收到一个错误。</p><p>我们在执行查询的时候，必须带上分区字段。这样可以使用分区剪裁功能</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into my_range_datetime select * from test;                                                                    </span><br><span class="line">Query OK, <span class="number">1000000</span> rows affected (<span class="number">8</span>.<span class="number">15</span> sec)</span><br><span class="line"><span class="function">Records: 1000000  <span class="title">Duplicates</span>: 0  <span class="title">Warnings</span>: 0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">explain</span> <span class="title">partitions</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">my_range_datetime</span> <span class="title">where</span> <span class="title">hiredate</span> &gt;= '20171207124503' <span class="title">and</span> <span class="title">hiredate</span>&lt;='20171210111230'; </span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">| <span class="title">id</span> | <span class="title">select_type</span> | <span class="title">table</span>             | <span class="title">partitions</span>   | <span class="title">type</span> | <span class="title">possible_keys</span> | <span class="title">key</span>  | <span class="title">key_len</span> | <span class="title">ref</span>  | <span class="title">rows</span>   | <span class="title">Extra</span>       |</span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">|  1 | <span class="title">SIMPLE</span>      | <span class="title">my_range_datetime</span> | <span class="title">p7</span>,<span class="title">p8</span>,<span class="title">p9</span>,<span class="title">p10</span> | <span class="title">ALL</span>  | <span class="title">NULL</span>          | <span class="title">NULL</span> | <span class="title">NULL</span>    | <span class="title">NULL</span> | 400061 | <span class="title">Using</span> <span class="title">where</span> |</span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">1 <span class="title">row</span> <span class="title">in</span> <span class="title">set</span> (0.03 <span class="title">sec</span>)</span></span><br></pre></td></tr></table></figure><p>注意执行计划中的partitions的内容，只查询了p7，p8，p9，p10三个分区，由此来看，使用to_days函数确实可以实现分区裁剪。</p><p>上面是基于datetime的，如果是timestamp类型，我们遇到上面问题呢？</p><p>事实上，MySQL提供了一种基于UNIX_TIMESTAMP函数的RANGE分区方案，而且，只能使用UNIX_TIMESTAMP函数，如果使用其它函数，譬如to_days，会报如下错误：“ERROR 1486 (HY000): Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed”。</p><p>而且官方文档中也提到“Any other expressions involving TIMESTAMP values are not permitted. (See Bug #42849.)”。</p><p>下面来测试一下基于UNIX_TIMESTAMP函数的RANGE分区方案，看其能否实现分区裁剪。</p><p>针对TIMESTAMP的分区方案</p><p>创表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_range_timestamp (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    hiredate <span class="built_in">TIMESTAMP</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(hiredate) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-02 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-03 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-04 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-05 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-06 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p6 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-07 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p7 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-08 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p8 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-09 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p9 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> ( <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-10 00:00:00'</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p10 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2017-12-11 00:00:00'</span>) )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据并查看上述查询的执行计划</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into my_range_timestamp select * from test;</span><br><span class="line">Query OK, <span class="number">1000000</span> rows affected (<span class="number">13</span>.<span class="number">25</span> sec)</span><br><span class="line"><span class="function">Records: 1000000  <span class="title">Duplicates</span>: 0  <span class="title">Warnings</span>: 0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">explain</span> <span class="title">partitions</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">my_range_timestamp</span> <span class="title">where</span> <span class="title">hiredate</span> &gt;= '20171207124503' <span class="title">and</span> <span class="title">hiredate</span>&lt;='20171210111230';</span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">| <span class="title">id</span> | <span class="title">select_type</span> | <span class="title">table</span>             | <span class="title">partitions</span>   | <span class="title">type</span> | <span class="title">possible_keys</span> | <span class="title">key</span>  | <span class="title">key_len</span> | <span class="title">ref</span>  | <span class="title">rows</span>   | <span class="title">Extra</span>       |</span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">|  1 | <span class="title">SIMPLE</span>      | <span class="title">my_range_timestamp</span> | <span class="title">p7</span>,<span class="title">p8</span>,<span class="title">p9</span>,<span class="title">p10</span> | <span class="title">ALL</span>  | <span class="title">NULL</span>          | <span class="title">NULL</span> | <span class="title">NULL</span>    | <span class="title">NULL</span> | 400448 | <span class="title">Using</span> <span class="title">where</span> |</span></span><br><span class="line"><span class="function">+----+-------------+-------------------+--------------+------+---------------+------+---------+------+--------+-------------+</span></span><br><span class="line"><span class="function">1 <span class="title">row</span> <span class="title">in</span> <span class="title">set</span> (0.00 <span class="title">sec</span>)</span></span><br></pre></td></tr></table></figure><p>同样也能实现分区裁剪。</p><p>在5.7版本之前，对于DATA和DATETIME类型的列，如果要实现分区裁剪，只能使用YEAR() 和TO_DAYS()函数，在5.7版本中，又新增了TO_SECONDS()函数。</p><h3 id="LIST-分区"><a href="#LIST-分区" class="headerlink" title="LIST 分区"></a>LIST 分区</h3><p>LIST分区</p><p>LIST分区和RANGE分区类似，区别在于LIST是枚举值列表的集合，RANGE是连续的区间值的集合。二者在语法方面非常的相似。同样建议LIST分区列是非null列，否则插入null值如果枚举列表里面不存在null值会插入失败，这点和其它的分区不一样，RANGE分区会将其作为最小分区值存储，HASH\KEY分为会将其转换成0存储，主要LIST分区只支持整形，非整形字段需要通过函数转换成整形.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_list( </span><br><span class="line">　　a <span class="built_in">int</span>(<span class="number">11</span>), </span><br><span class="line">　　b <span class="built_in">int</span>(<span class="number">11</span>) </span><br><span class="line">　　)(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">list</span> (b) </span><br><span class="line">　　<span class="keyword">partition</span> p0 <span class="keyword">values</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>), </span><br><span class="line">　　<span class="keyword">partition</span> p1 <span class="keyword">values</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>) </span><br><span class="line">　　);</span><br></pre></td></tr></table></figure><h3 id="Hash-分区"><a href="#Hash-分区" class="headerlink" title="Hash 分区"></a>Hash 分区</h3><p>我们在实际工作中经常遇到像会员表的这种表。并没有明显可以分区的特征字段。但表数据有非常庞大。为了把这类的数据进行分区打散mysql 提供了hash分区。基于给定的分区个数，将数据分配到不同的分区，HASH分区只能针对整数进行HASH，对于非整形的字段只能通过表达式将其转换成整数。表达式可以是mysql中任意有效的函数或者表达式，对于非整形的HASH往表插入数据的过程中会多一步表达式的计算操作，所以不建议使用复杂的表达式这样会影响性能。</p><p>Hash分区表的基本语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_member (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    fname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    created <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1970-01-01'</span>,</span><br><span class="line">    separated <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'9999-12-31'</span>,</span><br><span class="line">    job_code <span class="built_in">INT</span>,</span><br><span class="line">    store_id <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">HASH</span>(<span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>HASH分区可以不用指定PARTITIONS子句，如上文中的PARTITIONS 4，则默认分区数为1。</li><li>不允许只写PARTITIONS，而不指定分区数。</li><li>同RANGE分区和LIST分区一样，PARTITION BY HASH (expr)子句中的expr返回的必须是整数值。</li><li>HASH分区的底层实现其实是基于MOD函数。譬如，对于下表</li></ol><p>CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY HASH( YEAR(col3) ) PARTITIONS 4; 如果你要插入一个col3为“2017-09-15”的记录，则分区的选择是根据以下值决定的：</p><p>MOD(YEAR(‘2017-09-01’),4) = MOD(2017,4) = 1</p><h4 id="LINEAR-HASH分区"><a href="#LINEAR-HASH分区" class="headerlink" title="LINEAR HASH分区"></a>LINEAR HASH分区</h4><p>LINEAR HASH分区是HASH分区的一种特殊类型，与HASH分区是基于MOD函数不同的是，它基于的是另外一种算法。</p><p>格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_members (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    fname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1970-01-01'</span>,</span><br><span class="line">    separated <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'9999-12-31'</span>,</span><br><span class="line">    job_code <span class="built_in">INT</span>,</span><br><span class="line">    store_id <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LINEAR <span class="keyword">HASH</span>( <span class="keyword">id</span> )</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>说明： 它的优点是在数据量大的场景，譬如TB级，增加、删除、合并和拆分分区会更快，缺点是，相对于HASH分区，它数据分布不均匀的概率更大。</p><h3 id="KEY分区"><a href="#KEY分区" class="headerlink" title="KEY分区"></a>KEY分区</h3><p>KEY分区其实跟HASH分区差不多，不同点如下：</p><ol><li>KEY分区允许多列，而HASH分区只允许一列。</li><li>如果在有主键或者唯一键的情况下，key中分区列可不指定，默认为主键或者唯一键，如果没有，则必须显性指定列。</li><li>KEY分区对象必须为列，而不能是基于列的表达式。</li><li>KEY分区和HASH分区的算法不一样，PARTITION BY HASH (expr)，MOD取值的对象是expr返回的值，而PARTITION BY KEY (column_list)，基于的是列的MD5值。</li></ol><p>格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> k1 (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,    </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">KEY</span>()</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>在没有主键或者唯一键的情况下，格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tm1 (</span><br><span class="line">    s1 <span class="built_in">CHAR</span>(<span class="number">32</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">KEY</span>(s1)</span><br><span class="line"><span class="keyword">PARTITIONS</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="查询分区是否已存在"><a href="#查询分区是否已存在" class="headerlink" title="查询分区是否已存在"></a>查询分区是否已存在</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> information_schema.PARTITIONS</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_NAME = <span class="string">'my_member'</span> <span class="keyword">and</span> PARTITION_NAME=<span class="string">'p1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果不为0表示已存在</span></span><br></pre></td></tr></table></figure><h3 id="添加分区"><a href="#添加分区" class="headerlink" title="添加分区"></a>添加分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> my_member <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">partition</span> p11 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span>(<span class="number">20171212</span>));</span><br></pre></td></tr></table></figure><h3 id="从指定分区查询数据"><a href="#从指定分区查询数据" class="headerlink" title="从指定分区查询数据"></a>从指定分区查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> my_member <span class="keyword">where</span> <span class="keyword">version</span> = <span class="number">20210204</span>;</span><br><span class="line"><span class="comment">-- version为对应range分区时的对应索引列</span></span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>MySQL分区中如果存在主键或唯一键，则分区列必须包含在其中。</li><li>对于原生的RANGE分区，LIST分区，HASH分区，分区对象返回的只能是整数值。</li><li>分区字段不能为NULL，要不然怎么确定分区范围呢，所以尽量NOT NULL</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL分区表概述&quot;&gt;&lt;a href=&quot;#MySQL分区表概述&quot; class=&quot;headerlink&quot; title=&quot;MySQL分区表概述&quot;&gt;&lt;/a&gt;MySQL分区表概述&lt;/h2&gt;&lt;p&gt;随着MySQL越来越流行，Mysql里面的保存的数据也越来越大。在日常的工作中，我们经常遇到一张表里面保存了上亿甚至过十亿的记录。这些表里面保存了大量的历史记录。 对于这些历史数据的清理是一个非常头疼事情，由于所有的数据都一个普通的表里。所以只能是启用一个或多个带where条件的delete语句去删除（一般where条件是时间）。 这对数据库的造成了很大压力。即使我们把这些删除了，但底层的数据文件并没有变小。面对这类问题，最有效的方法就是在使用分区表。最常见的分区方法就是按照时间进行分区。 分区一个最大的优点就是可以非常高效的进行历史数据的清理。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://baiyu128.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>教你使用Gson Streaming轻松解析超大json文件</title>
    <link href="https://baiyu128.github.io/2021/03/23/%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Gson-Streaming%E8%BD%BB%E6%9D%BE%E8%A7%A3%E6%9E%90%E8%B6%85%E5%A4%A7json%E6%96%87%E4%BB%B6/"/>
    <id>https://baiyu128.github.io/2021/03/23/%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Gson-Streaming%E8%BD%BB%E6%9D%BE%E8%A7%A3%E6%9E%90%E8%B6%85%E5%A4%A7json%E6%96%87%E4%BB%B6/</id>
    <published>2021-03-23T00:14:49.000Z</published>
    <updated>2021-03-23T00:23:40.401Z</updated>
    
    <content type="html"><![CDATA[<p>关于如何将<strong>大型Json文件解析为Java对象的指南</strong>。使用Gson Streaming<strong>读取非常大的Json文件</strong>并将其秘密转换为对象。</p><h2 id="教程内容"><a href="#教程内容" class="headerlink" title="教程内容"></a>教程内容</h2><ul><li>概述</li><li>写入大型JSON文件</li><li>通过流读取大型JSON文件</li><li>概括</li></ul><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="https://mvnrepository.com/artifact/com.google.code.gson/gson" target="_blank" rel="noopener">Gson</a>是一个非常流行的API，用于将<a href="https://www.amitph.com/java-gson-json-to-object/" target="_blank" rel="noopener">JSON字符串解析为Objects</a>。<em>Gson</em>提供的parse方法非常适合读取整个JSON字符串并将其一次性解析为Java Objects。为此，首先将JSON字符串加载到内存中，然后将其转换为对象。但是，当我们处理一个非常大的JSON文件时，它可能导致OutOfMemoryError。为了避免这种情况，我们可以使用Gson流技术来分块解析一个大文件。</p><p>在本教程中，我们使用Gson Streaming并将400 MB JSON文件有效地解析为Java Objects，而无需将其完全加载到内存中。我们还将监视程序消耗的内存量。但是，在执行此操作之前，让我们从快速设置开始。</p><h3 id="写入大型JSON文件"><a href="#写入大型JSON文件" class="headerlink" title="写入大型JSON文件"></a>写入大型JSON文件</h3><p>首先，我们将使用Java程序创建一个400MB的Json文件。接下来是一个示例JSON形式的Person记录示例。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"name"</span>:<span class="string">"John"</span>,</span><br><span class="line">   <span class="attr">"age"</span>:<span class="number">31</span>,</span><br><span class="line">   <span class="attr">"city"</span>:<span class="string">"New York"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将创建一个包含一千万个人记录的JSON数组，并将其存储到Json文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(target);</span><br><span class="line">OutputStreamWriter ow = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">ow.write(<span class="string">"["</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        ow.write(<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ow.write(person);</span><br><span class="line">&#125;</span><br><span class="line">ow.write(<span class="string">"]"</span>);</span><br><span class="line">ow.flush();</span><br></pre></td></tr></table></figure><p>我们正在使用OutputStreamWriter将每个人记录写入文件。不要忘记关闭所有打开的流和阅读器。</p><h3 id="通过流读取大型JSON文件"><a href="#通过流读取大型JSON文件" class="headerlink" title="通过流读取大型JSON文件"></a>通过流读取大型JSON文件</h3><p>现在我们的输入JSON文件已准备就绪，我们将对其进行流传输，并使用Gson Streaming的内存高效方式将每条记录转换为Java对象。</p><p>为了流式传输Json文件，Gson提供了<em>JsonReader</em>类。使用此类，我们可以浏览JSON对象和嵌套对象，并将它们迭代地转换为java对象。</p><p>接下来是示例，在该示例中，我们读取大型JSON文件，遍历其内容，然后将其解析为对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readLargeJson</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">            InputStream inputStream = Files.newInputStream(Path.of(path));</span><br><span class="line">            JsonReader reader = <span class="keyword">new</span> JsonReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">    ) &#123;            </span><br><span class="line">        reader.beginArray();</span><br><span class="line">        <span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Gson().fromJson(reader, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//System.out.println(Person);</span></span><br><span class="line">        &#125;</span><br><span class="line">        reader.endArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们在文件上创建一个<em>InputStream</em>，并使用它来创建<em>InputStreamReader</em>。接下来，我们实例化<em>JsonReader</em>包装器并将其用于解析JSON文件。</p><p>当我们处理人员对象的Json数组时，我们使用<code>beginArray()</code>方法来流经数组元素。然后，我们遍历Json数组的所有元素，并将每个元素隐式转换为新的Person对象。最后，我们关闭数组。请注意，我们使用try-with-resources块自动关闭流和读取器。</p><p>同样，如果要处理大型Json对象，则可以使用<code>beginObject()</code>方法访问嵌套对象。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>现在，我们将使用我们创建的<strong>400MB Json文件对其</strong>进行流式处理。为了监视内存消耗，我们将在单独的线程中运行<em>readLargeJson（）</em>方法。主线程以固定的时间间隔在控制台上以MB为单位打印可用内存量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Source File Size 400</span><br><span class="line">Memory used: 9</span><br><span class="line">Memory used: 139</span><br><span class="line">Memory used: 112</span><br><span class="line">Memory used: 122</span><br><span class="line">Memory used: 96</span><br><span class="line">Memory used: 121</span><br><span class="line">Memory used: 150</span><br><span class="line">Memory used: 82</span><br><span class="line">total time 35023</span><br></pre></td></tr></table></figure><p>输出清楚地表明我们的内存消耗是最佳的，并且我们没有将整个JSON文件读入内存。</p><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>在本快速教程中，我们学习了如何以<strong>内存有效的方式</strong>解析超大型JSON文件，<strong>以避免**</strong>OutOfMemoryError**。我们使用GSON API来流化一个400 MB的Json文件，并将其迭代地转换为Java对象。</p><p>要使用Jackson API解析Json对象，请访问将<a href="https://www.amitph.com/java-jackson-json-to-object/" target="_blank" rel="noopener"><strong>JSON字符串读取</strong></a>为使用Jackson API的<a href="https://www.amitph.com/java-jackson-json-to-object/" target="_blank" rel="noopener"><strong>Java对象</strong></a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于如何将&lt;strong&gt;大型Json文件解析为Java对象的指南&lt;/strong&gt;。使用Gson Streaming&lt;strong&gt;读取非常大的Json文件&lt;/strong&gt;并将其秘密转换为对象。&lt;/p&gt;
&lt;h2 id=&quot;教程内容&quot;&gt;&lt;a href=&quot;#教程内容&quot; class=&quot;headerlink&quot; title=&quot;教程内容&quot;&gt;&lt;/a&gt;教程内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概述&lt;/li&gt;
&lt;li&gt;写入大型JSON文件&lt;/li&gt;
&lt;li&gt;通过流读取大型JSON文件&lt;/li&gt;
&lt;li&gt;概括&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="gson" scheme="https://baiyu128.github.io/tags/gson/"/>
    
      <category term="json" scheme="https://baiyu128.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>从一个支付案例学习策略模式</title>
    <link href="https://baiyu128.github.io/2021/03/19/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%94%AF%E4%BB%98%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://baiyu128.github.io/2021/03/19/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%94%AF%E4%BB%98%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-03-19T05:23:40.000Z</published>
    <updated>2021-03-19T05:26:49.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>在开发时，总会遇到支付的需求，但是支付的方式有很多，支付宝支付，微信支付，银行卡支付，每种支付方式的接口不一样，参数信息也不一样，一般情况下，会有很多if/else来进行判断，但是业务逻辑的逐渐增多，if/else显得那么的沉重，通过策略模式即可更优雅的来处理这种代码。</p><p>什么是策略模式呢？比如一个人要从广州去北京，这个人可以选择乘坐飞机去，也可以选择乘坐火车去。两种交通方式的选择，可以认为是两种策略。映射到程序中，可以认为是两种算法，比如支付的时候，选择支付宝支付或者微信支付。</p><p>策略模式的特点是不管过程怎么样，结果都是一样的。不管乘坐飞机还是火车，最后都会到达北京；不管哪种支付方式，最终都会支付成功。过程不一样，结果都一样。</p><a id="more"></a><h3 id="一、支付案例"><a href="#一、支付案例" class="headerlink" title="一、支付案例"></a>一、支付案例</h3><p>支付时，会有很多参数，很多逻辑，经常会遇到一种支付方式，上百行的代码，而且还需要很好的把控事务。如果多种支付方式，代码也会成倍的上涨。维护起来相当难受。</p><h4 id="1-普通代码"><a href="#1-普通代码" class="headerlink" title="1.普通代码"></a>1.普通代码</h4><p>代码如下（示例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/makeOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultData <span class="title">makeOrder</span><span class="params">(@RequestBody  Order order)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 生成自己的订单，并且设置订单的失效时间，并且定时回滚</span></span><br><span class="line">    <span class="comment">//  ... 此处代码省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理支付方式</span></span><br><span class="line">    <span class="keyword">if</span>(order.getType==<span class="string">"alipay"</span>)&#123; <span class="comment">// 支付宝</span></span><br><span class="line">        <span class="keyword">this</span>.payService.alipay(order);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (order.getType==<span class="string">"weixin"</span>)&#123; <span class="comment">// 微信</span></span><br><span class="line">        <span class="keyword">this</span>.payService.weixinpay(order);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (order.getType==<span class="string">"jd"</span>)&#123; <span class="comment">// 京东支付</span></span><br><span class="line">        <span class="keyword">this</span>.payService.jtpay(order);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (order.getType==<span class="string">"yunshanfu"</span>)&#123; <span class="comment">// 云闪付</span></span><br><span class="line">        <span class="keyword">this</span>.payService.yunshanfupay(order);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送到mq，进行广播。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.ok(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信代码肯定会很多，而且if/else来处理会显得代码很杂乱。或者有通过增加接口来减少if/else</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/alipay"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultData <span class="title">makeOrder</span><span class="params">(@RequestBody  Order order)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/jdpay"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultData <span class="title">makeOrder</span><span class="params">(@RequestBody  Order order)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在逻辑少，代码不会显得杂乱，如果有很多种支付方式呢？代码会显得很杂乱，而且扩展受限。推荐阅读：最新 Java 核心技术教程。</p><h4 id="2-引入策略模式"><a href="#2-引入策略模式" class="headerlink" title="2.引入策略模式"></a>2.引入策略模式</h4><p>代码如下（入口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/makeOrder"</span>)</span><br><span class="line"><span class="comment">// 商品id</span></span><br><span class="line"><span class="comment">// 支付类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultData <span class="title">makeOrder</span><span class="params">(Long goodsId,String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 生成本地的订单</span></span><br><span class="line">    Order order = <span class="keyword">this</span>.orderService.makeOrder(goodsId);</span><br><span class="line">    <span class="comment">//选择支付方式</span></span><br><span class="line">    PayType payType = PayType.getByCode(type);</span><br><span class="line">    <span class="comment">//进行支付</span></span><br><span class="line">    payType.get().pay(order.getId(),order.getAmount());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如下（支付方式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PayType &#123;</span><br><span class="line">    <span class="comment">//支付宝        AliPay 是实现类</span></span><br><span class="line">    ALI_PAY(<span class="string">"1"</span>,<span class="keyword">new</span> AliPay()),</span><br><span class="line">    <span class="comment">//微信</span></span><br><span class="line">    WECHAT_PAY(<span class="string">"2"</span>,<span class="keyword">new</span> WechatPay());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String payType;</span><br><span class="line">    <span class="comment">// 这是一个接口</span></span><br><span class="line">    <span class="keyword">private</span> Payment payment;</span><br><span class="line">    PayType(String payType,Payment payment)&#123;</span><br><span class="line">        <span class="keyword">this</span>.payment = payment;</span><br><span class="line">        <span class="keyword">this</span>.payType = payType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过get方法获取支付方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">get</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>  <span class="keyword">this</span>.payment;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PayType <span class="title">getByCode</span><span class="params">(String payType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (PayType e : PayType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.payType.equals(payType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如下（支付接口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long order, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如下（支付宝支付实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long order, <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----支付宝支付----"</span>);</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付111元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如下（微信支付实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatPay</span> <span class="keyword">implements</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(Long orderId, <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---微信支付---"</span>);</span><br><span class="line">        System.out.println(<span class="string">"支付222元"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过枚举来优雅的选择支付类型，共用一个支付接口，不同的支付方式实现自己的逻辑，更加贴合面向对象的思想。这种方式相对与if/else更加优雅。单例模式的 8 种写法，推荐看下。</p><p>但是，其实这样一看，哇，使用策略模式，创建了好多类，好麻烦的样子，还是使用if/else代码少一点，但是长远来说，支付的逻辑一定是错综复杂，通过策略模式可以更加友好的进行扩展。但是if/else进行扩展，代码会比较冗余，如果本来就没几行代码，缺强制使用策略模式，无意是画蛇添足。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发时，总会遇到支付的需求，但是支付的方式有很多，支付宝支付，微信支付，银行卡支付，每种支付方式的接口不一样，参数信息也不一样，一般情况下，会有很多if/else来进行判断，但是业务逻辑的逐渐增多，if/else显得那么的沉重，通过策略模式即可更优雅的来处理这种代码。&lt;/p&gt;
&lt;p&gt;什么是策略模式呢？比如一个人要从广州去北京，这个人可以选择乘坐飞机去，也可以选择乘坐火车去。两种交通方式的选择，可以认为是两种策略。映射到程序中，可以认为是两种算法，比如支付的时候，选择支付宝支付或者微信支付。&lt;/p&gt;
&lt;p&gt;策略模式的特点是不管过程怎么样，结果都是一样的。不管乘坐飞机还是火车，最后都会到达北京；不管哪种支付方式，最终都会支付成功。过程不一样，结果都一样。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://baiyu128.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mysql通过时间定时为数据库创建动态表名</title>
    <link href="https://baiyu128.github.io/2021/02/04/mysql%E9%80%9A%E8%BF%87%E6%97%B6%E9%97%B4%E5%AE%9A%E6%97%B6%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E8%A1%A8%E5%90%8D/"/>
    <id>https://baiyu128.github.io/2021/02/04/mysql%E9%80%9A%E8%BF%87%E6%97%B6%E9%97%B4%E5%AE%9A%E6%97%B6%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E8%A1%A8%E5%90%8D/</id>
    <published>2021-02-04T01:10:53.000Z</published>
    <updated>2021-02-04T01:19:09.680Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL事件是基于预定义的时间表运行的任务，因此有时它被称为预定事件。MySQL事件也被称为“时间触发”，因为它是由时间触发的，而不是像触发器一样更新表来触发的。MySQL事件类似于UNIX中的cron作业或Windows中的任务调度程序。</p><p>您可以在许多情况下使用MySQL事件，例如优化数据库表，清理日志，归档数据或在非高峰时间生成复杂的报告。</p><a id="more"></a><h3 id="检测事件是否开启"><a href="#检测事件是否开启" class="headerlink" title="检测事件是否开启"></a>检测事件是否开启</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'event_scheduler'</span>;</span><br></pre></td></tr></table></figure><p>###开启事件（最好在my.init设置，因为重启后还会变回默认值OFF）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> event_scheduler = <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><p>###关闭事件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> event_scheduler = <span class="keyword">OFF</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL事件调度器配置"><a href="#MySQL事件调度器配置" class="headerlink" title="MySQL事件调度器配置"></a>MySQL事件调度器配置</h2><p>MySQL使用一个名为事件调度线程的特殊线程来执行所有调度的事件。可以通过执行以下命令来查看事件调度程序线程的状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span>;</span><br></pre></td></tr></table></figure><p>执行上面查询语句，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW PROCESSLIST;</span></span><br><span class="line">+----+------+-----------------+----------+---------+------+----------+------------------+</span><br><span class="line">| Id | User | Host            | db       | Command | Time | State    | Info             |</span><br><span class="line">+----+------+-----------------+----------+---------+------+----------+------------------+</span><br><span class="line">|  2 | root | localhost:50405 | NULL     | Sleep   | 1966 |          | NULL             |</span><br><span class="line">|  3 | root | localhost:50406 | yiibaidb | Sleep   | 1964 |          | NULL             |</span><br><span class="line">|  4 | root | localhost:50407 | yiibaidb | Query   |    0 | starting | SHOW PROCESSLIST |</span><br><span class="line">+----+------+-----------------+----------+---------+------+----------+------------------+</span><br><span class="line">3 rows in set</span><br></pre></td></tr></table></figure><p>默认情况下，事件调度程序线程未启用。 要启用和启动事件调度程序线程，需要执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> event_scheduler = <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><p>现在看到事件调度器线程的状态，再次执行<code>SHOW PROCESSLIST</code>命令，结果如下所示 - </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW PROCESSLIST;</span><br><span class="line">+<span class="comment">----+-----------------+-----------------+----------+---------+------+------------------------+------------------+</span></span><br><span class="line">| Id | User            | Host            | db       | Command | Time | State                  | Info             |</span><br><span class="line">+<span class="comment">----+-----------------+-----------------+----------+---------+------+------------------------+------------------+</span></span><br><span class="line">|  2 | root            | localhost:50405 | NULL     | Sleep   | 1986 |                        | NULL             |</span><br><span class="line">|  3 | root            | localhost:50406 | yiibaidb | Sleep   | 1984 |                        | NULL             |</span><br><span class="line">|  4 | root            | localhost:50407 | yiibaidb | Query   |    0 | starting               | <span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span> |</span><br><span class="line">|  <span class="number">5</span> | event_scheduler | localhost       | <span class="literal">NULL</span>     | Daemon  |    <span class="number">6</span> | Waiting <span class="keyword">on</span> <span class="keyword">empty</span> queue | <span class="literal">NULL</span>             |</span><br><span class="line">+<span class="comment">----+-----------------+-----------------+----------+---------+------+------------------------+------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span></span><br></pre></td></tr></table></figure><h2 id="创建新的MySQL事件"><a href="#创建新的MySQL事件" class="headerlink" title="创建新的MySQL事件"></a>创建新的MySQL事件</h2><p>创建事件与创建其他数据库对象(如存储过程或触发器)类似。事件是一个包含SQL语句的命名对象。</p><p><a href="http://www.yiibai.com/mysql/stored-procedure.html" target="_blank" rel="noopener">存储过程</a>仅在直接调用时执行; <a href="http://www.yiibai.com/mysql/triggers.html" target="_blank" rel="noopener">触发器</a>则与一个表相关联的事件(例如<a href="http://www.yiibai.com/mysql/insert-statement.html" target="_blank" rel="noopener">插入</a>，<a href="http://www.yiibai.com/mysql/update-data.html" target="_blank" rel="noopener">更新</a>或<a href="http://www.yiibai.com/mysql/delete-statement.html" target="_blank" rel="noopener">删除</a>)事件发生时，可以在一次或更多的规则间隔执行事件时执行触发。</p><p>要创建和计划新事件，请使用<code>CREATE EVENT</code>语句，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EVENT</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> EXIST]  event_name</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE schedule</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line">event_body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>下面让我们更详细地解释语法中的一些参数 -</p><ul><li><em>首先</em>，在<code>CREATE EVENT</code>子句之后指定事件名称。事件名称在数据库模式中必须是唯一的。</li><li><em>其次</em>，在<code>ON SCHEDULE</code>子句后面加上一个表。如果事件是一次性事件，则使用语法：<code>AT timestamp [+ INTERVAL]</code>，如果事件是循环事件，则使用<code>EVERY</code>子句：<code>EVERY interval STARTS timestamp [+INTERVAL] ENDS timestamp [+INTERVAL]</code></li><li><em>第三</em>，将<code>DO</code>语句放在<code>DO</code>关键字之后。请注意，可以在事件主体内调用存储过程。 如果您有复合SQL语句，可以将它们放在<code>BEGIN END</code>块中。</li></ul><p>#创建事件（从11月24号开始每天执行一次）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">EVENT</span> eve_createTable</span><br><span class="line"><span class="keyword">ON</span> SCHEDULE EVERY <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line">STARTS <span class="string">'2016-11-24 00:00:00'</span> <span class="keyword">ON</span> COMPLETION <span class="keyword">PRESERVE</span> <span class="keyword">ENABLE</span></span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line"><span class="keyword">CALL</span> pro_createTable();</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、ON&#96; &#96;COMPLETION PRESERVE ENABLE  是创建此事件即开始自动执行</span><br><span class="line">2、SCHEDULE EVERY 1 DAY STARTS &#39;2016-11-24 00:00:00&#39; 从指定时间开始每天执行一次  时间可用 now()</span><br></pre></td></tr></table></figure><p>#创建存储过程（动态表名）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_createTable()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">str</span> <span class="built_in">VARCHAR</span>(<span class="number">20000</span>);</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">str</span>= <span class="keyword">CONCAT</span>(<span class="string">'CREATE TABLE member_network_'</span>,<span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(),<span class="string">'%Y%m%d'</span>),<span class="string">'(</span></span><br><span class="line"><span class="string">`id`  bigint(20) NOT NULL AUTO_INCREMENT ,</span></span><br><span class="line"><span class="string">`member_id`  bigint(20) NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`host_ip`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`serv_crc`  varchar(2000) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`app_crc`  varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`sync_time`  timestamp NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`online_time`  datetime NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`type`  varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`up_stream_flux`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`down_stream_flux`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`total_stream_flux`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`line_no`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`url`  text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,</span></span><br><span class="line"><span class="string">`action`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`sev_port`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`sor_port`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`protocol`  varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`regionCode`  varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">`memo`  varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`policy`  varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`dns`  varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`name`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,</span></span><br><span class="line"><span class="string">`idcard`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">`client_name`  varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (`id`),</span></span><br><span class="line"><span class="string">INDEX `dept_type` (`regionCode`(255), `serv_crc`(255), `online_time`, `name`, `type`(255)) USING BTREE </span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">ENGINE=InnoDB</span></span><br><span class="line"><span class="string">DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci</span></span><br><span class="line"><span class="string">AUTO_INCREMENT=1</span></span><br><span class="line"><span class="string">ROW_FORMAT=COMPACT</span></span><br><span class="line"><span class="string">'</span>);</span><br><span class="line"><span class="keyword">SET</span> @sqlstr=<span class="keyword">str</span>;</span><br><span class="line"><span class="keyword">PREPARE</span> stmt <span class="keyword">from</span> @sqlstr;</span><br><span class="line"><span class="keyword">EXECUTE</span> stmt;</span><br><span class="line"><span class="keyword">deallocate</span> <span class="keyword">prepare</span> stmt;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>执行时报错，因为CONCAT拼接超过最大值；<br>#sql语句查看该参数，修改并重启mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">VARIABLES</span> <span class="keyword">like</span> <span class="string">'%max_allowed_packet%'</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet = <span class="number">25600</span></span><br></pre></td></tr></table></figure><p>mysql的前天、今天、后天</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2016-12-09</span></span><br><span class="line">DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y%m%d')</span><br><span class="line"><span class="comment">#2016-12-10</span></span><br><span class="line">DATE_FORMAT(date_sub(curdate(),interval 0 day),'%Y%m%d')</span><br><span class="line"><span class="comment">#2016-12-11</span></span><br><span class="line">DATE_FORMAT(date_sub(curdate(),interval -1 day),'%Y%m%d')</span><br></pre></td></tr></table></figure><h2 id="删除MySQL事件"><a href="#删除MySQL事件" class="headerlink" title="删除MySQL事件"></a>删除MySQL事件</h2><p>要删除现有事件，请使用<code>DROP EVENT</code>语句，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">EVENT</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] event_name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL</span><br></pre></td></tr></table></figure><p>例如，要删除<code>test_event_03</code>的事件，请使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">EVENT</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> test_event_03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL</span><br></pre></td></tr></table></figure><p>在本教程中，您已经了解了MySQL事件，如何从数据库模式创建和删除事件。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL事件是基于预定义的时间表运行的任务，因此有时它被称为预定事件。MySQL事件也被称为“时间触发”，因为它是由时间触发的，而不是像触发器一样更新表来触发的。MySQL事件类似于UNIX中的cron作业或Windows中的任务调度程序。&lt;/p&gt;
&lt;p&gt;您可以在许多情况下使用MySQL事件，例如优化数据库表，清理日志，归档数据或在非高峰时间生成复杂的报告。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://baiyu128.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator 整合 Prometheus监控</title>
    <link href="https://baiyu128.github.io/2021/01/13/Spring-Boot-Actuator-%E6%95%B4%E5%90%88-Prometheus%E7%9B%91%E6%8E%A7/"/>
    <id>https://baiyu128.github.io/2021/01/13/Spring-Boot-Actuator-%E6%95%B4%E5%90%88-Prometheus%E7%9B%91%E6%8E%A7/</id>
    <published>2021-01-13T06:54:38.000Z</published>
    <updated>2021-01-13T07:06:42.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关于Prometheus"><a href="#1-关于Prometheus" class="headerlink" title="1.关于Prometheus"></a>1.关于Prometheus</h1><p>Prometheus是一个根据应用的metrics来进行监控的开源工具。</p><p>Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)。Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。<br>2016年由Google发起Linux基金会旗下的原生云基金会(Cloud Native Computing Foundation), 将Prometheus纳入其下第二大开源项目。<br>Prometheus目前在开源社区相当活跃。<br>Prometheus和Heapster(Heapster是K8S的一个子项目，用于获取集群的性能数据。)相比功能更完善、更全面。Prometheus性能也足够支撑上万台规模的集群。</p><a id="more"></a><h2 id="Prometheus的特点"><a href="#Prometheus的特点" class="headerlink" title="Prometheus的特点"></a>Prometheus的特点</h2><ul><li>多维度数据模型。</li><li>灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点是自主的。</li><li>通过基于HTTP的pull方式采集时序数据。</li><li>可以通过中间网关进行时序列数据推送。</li><li>通过服务发现或者静态配置来发现目标服务对象。</li><li>支持多种多样的图表和界面展示，比如Grafana等。</li></ul><p>官网地址：<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a></p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115806797-1750460125.png" alt="img"><br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115354474-1478270204.png" alt="img"></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p><h2 id="服务过程"><a href="#服务过程" class="headerlink" title="服务过程"></a>服务过程</h2><ul><li>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。</li><li>Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</li><li>Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</li><li>PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</li><li>Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</li></ul><h2 id="三大套件"><a href="#三大套件" class="headerlink" title="三大套件"></a>三大套件</h2><ul><li>Server 主要负责数据采集和存储，提供PromQL查询语言的支持。</li><li>Alertmanager 警告管理器，用来进行报警。</li><li>Push Gateway 支持临时性Job主动推送指标的中间网关。</li></ul><h1 id="安装Prometheus-Server"><a href="#安装Prometheus-Server" class="headerlink" title="安装Prometheus Server"></a>安装Prometheus Server</h1><p>通过docker方式<br>首先创建一个配置文件/home/chenqionghe/test/prometheus/prometheus.yml<br>挂载之前需要改变文件权限为777，要不会引起修改宿主机上的文件内容不同步的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # 默认抓取间隔, 15秒向目标抓取一次数据。</span><br><span class="line">  external_labels:</span><br><span class="line">    monitor: &#39;codelab-monitor&#39;</span><br><span class="line"># 这里表示抓取对象的配置</span><br><span class="line">scrape_configs:</span><br><span class="line">    #这个配置是表示在这个配置内的时间序例，每一条都会自动添加上这个&#123;job_name:&quot;prometheus&quot;&#125;的标签  - job_name: &#39;prometheus&#39;</span><br><span class="line">    scrape_interval: 5s # 重写了全局抓取间隔时间，由15秒重写成5秒</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#39;localhost:9090&#39;]</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f prometheus</span><br><span class="line">docker run --name&#x3D;prometheus -d \</span><br><span class="line">-p 9090:9090 \</span><br><span class="line">-v &#x2F;home&#x2F;chenqionghe&#x2F;promethues&#x2F;server&#x2F;prometheus.yml:&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml \</span><br><span class="line">-v &#x2F;home&#x2F;chenqionghe&#x2F;promethues&#x2F;server&#x2F;rules.yml:&#x2F;etc&#x2F;prometheus&#x2F;rules.yml \</span><br><span class="line">prom&#x2F;prometheus:v2.7.2 \</span><br><span class="line">--config.file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml \</span><br><span class="line">--web.enable-lifecycle</span><br></pre></td></tr></table></figure><p>启动时加上–web.enable-lifecycle启用远程热加载配置文件<br>调用指令是curl -X POST <a href="http://localhost:9090/-/reload" target="_blank" rel="noopener">http://localhost:9090/-/reload</a></p><p>访问<a href="http://10.211.55.25:9090" target="_blank" rel="noopener">http://10.211.55.25:9090</a><br>我们会看到如下l界面<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308120421903-117006715.png" alt="img"></p><p>访问<a href="http://10.211.55.25:9090/metrics" target="_blank" rel="noopener">http://10.211.55.25:9090/metrics</a><br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308120433999-2023519443.png" alt="img"></p><p>我们配置了9090端口，默认prometheus会抓取自己的/metrics接口<br>在Graph选项已经可以看到监控的数据<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115422639-2083020411.png" alt="img"></p><h1 id="安装Grafana展示"><a href="#安装Grafana展示" class="headerlink" title="安装Grafana展示"></a>安装Grafana展示</h1><p>Grafana是用于可视化大型测量数据的开源程序，它提供了强大和优雅的方式去创建、共享、浏览数据。<br>Dashboard中显示了你不同metric数据源中的数据。<br>Grafana最常用于因特网基础设施和应用分析，但在其他领域也有用到，比如：工业传感器、家庭自动化、过程控制等等。<br>Grafana支持热插拔控制面板和可扩展的数据源，目前已经支持Graphite、InfluxDB、OpenTSDB、Elasticsearch、Prometheus等。</p><p>我们使用docker安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name grafana grafana&#x2F;grafana</span><br></pre></td></tr></table></figure><p>默认登录账户和密码都是admin，进入后界面如下<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115539209-1034408605.png" alt="img"><br>我们添加一个数据源<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115742521-1216773920.png" alt="img"><br>把Prometheus的地址填上<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115608797-630123242.png" alt="img"><br>导入prometheus的模板<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115620090-1083923378.png" alt="img"><br>打开左上角选择已经导入的模板会看到已经有各种图<br><img src="https://img2018.cnblogs.com/blog/662544/201903/662544-20190308115633809-1013780572.png" alt="img"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建用于测试的 Spring Boot 项目，主要代码如下。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.micrometer&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;micrometer-registry-prometheus&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#39;*&#39;</span><br><span class="line"></span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: always</span><br><span class="line"></span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      application: actuator-demo</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>management.endpoints.web.exposure.include：大多数actuator的端口都不会通过http公开，* 代表公开所有这些端点。对于生产环境，应该仔细选择要公开的端点。</li><li>management.metrics.tags.application：为应用设置 tag ，方便区分不同的应用。</li></ul><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class SpringbootActuatorPrometheusDemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringbootActuatorPrometheusDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hello&quot;)</span><br><span class="line">    public String  sayHello() &#123;</span><br><span class="line">        for (int i &#x3D; 1 ; i &lt;&#x3D; 10 ; i++) &#123;</span><br><span class="line">            Thread t &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(5000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; , &quot;HelloThread - &quot; + i);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;ok&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    @Bean</span><br><span class="line">    MeterRegistryCustomizer&lt;MeterRegistry&gt; metricsCommonTags() &#123;</span><br><span class="line">        return registry -&gt; registry.config().commonTags(&quot;application&quot;, &quot;springboot-actuator-prometheus-demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="配置-Prometheus-和-Grafana"><a href="#配置-Prometheus-和-Grafana" class="headerlink" title="配置 Prometheus 和 Grafana"></a>配置 Prometheus 和 Grafana</h3><p>在 prometheus.yml 中添加针对该 Spring Boot 应用 的监控 job</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &#39;actuator-demo&#39;</span><br><span class="line">    metrics_path: &#39;&#x2F;prometheus&#39;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#39;172.16.2.204:8080&#39;]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>运行 Prometheus 和 Grafana：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start prometheus grafana</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>访问 Prometheus UI <a href="http://172.16.2.101:9090" target="_blank" rel="noopener">http://172.16.2.101:9090</a> ，查看 targets ，可以看到 job 处于 UP 状态，说明配置成功了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/22/16def11fa153fedf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>启动Prometheus，浏览器访问，查看Prometheus页面，如图所示。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f3ddc434806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>点击如图所示位置，可以查看Prometheus监控的应用。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f44f8be877f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>列表中UP的页面为存活的实例，如图所示。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f5598c8b806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>也可以查看很多指数，如下所示。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f64e6b87b64?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>Grafana UI <a href="http://172.16.2.101:3000" target="_blank" rel="noopener">http://172.16.2.101:3000</a>，通过Grafana的 <strong>+</strong>  图标导入(Import) JVM (Micrometer) dashboard：</p><ul><li>grafana id = 4701</li><li>注意选中prometheus数据源</li></ul><p>查看JVM (Micormeter) dashboard：</p><p><a href="https://user-gold-cdn.xitu.io/2019/10/22/16def122dffc19e4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><h1 id="Grafana配置"><a href="#Grafana配置" class="headerlink" title="Grafana配置"></a>Grafana配置</h1><p>启动Grafana，配置Prometheus数据源，这里以ID是4701的Doshboard为例（地址：<a href="https://grafana.com/dashboards/4701" target="_blank" rel="noopener">grafana.com/dashboards/…</a>）如图。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f807cb5cf43?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>在Grafana内点击如图所示import按钮</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953f8a3482a975?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>在如图所示位置填写4701，然后点击load。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953fb4412c6d14?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>接下来导入Doshboard。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953fba06ed9339?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>导入后就可以看到我们的SpringBoot项目对应的指标图表了，如图。</p><p><a href="https://user-gold-cdn.xitu.io/2019/3/7/16953fc3c0368962?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" target="_blank" rel="noopener">img</a></p><p>可以看到应用的 JVM 的 堆栈、 线程、 IO 等等信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-关于Prometheus&quot;&gt;&lt;a href=&quot;#1-关于Prometheus&quot; class=&quot;headerlink&quot; title=&quot;1.关于Prometheus&quot;&gt;&lt;/a&gt;1.关于Prometheus&lt;/h1&gt;&lt;p&gt;Prometheus是一个根据应用的metrics来进行监控的开源工具。&lt;/p&gt;
&lt;p&gt;Prometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)。Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。&lt;br&gt;2016年由Google发起Linux基金会旗下的原生云基金会(Cloud Native Computing Foundation), 将Prometheus纳入其下第二大开源项目。&lt;br&gt;Prometheus目前在开源社区相当活跃。&lt;br&gt;Prometheus和Heapster(Heapster是K8S的一个子项目，用于获取集群的性能数据。)相比功能更完善、更全面。Prometheus性能也足够支撑上万台规模的集群。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="springboot" scheme="https://baiyu128.github.io/tags/springboot/"/>
    
      <category term="prometheus" scheme="https://baiyu128.github.io/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>使用ELK搭建日记系统</title>
    <link href="https://baiyu128.github.io/2021/01/13/%E4%BD%BF%E7%94%A8ELK%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0%E7%B3%BB%E7%BB%9F/"/>
    <id>https://baiyu128.github.io/2021/01/13/%E4%BD%BF%E7%94%A8ELK%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-01-13T06:17:28.000Z</published>
    <updated>2021-01-13T06:34:07.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>搭建日志系统的目的主要为了在生产环境下能够方便的查看多个项目的实时日记，增加开发效率。特别是在线上多台服务器部署时候，不用在登录服务器进入项目目录，通过 tail -f 等命令来查看日记了。</p><a id="more"></a><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>使用 ELK (Elasticsearch、Logstash、Kibana) 构建日记系统。</li><li>实现多台服务器收集 Laravel 应用日记与 Nginx 日记。</li><li>Kibana 报表的展示日记信息。</li></ul><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Filebeat + Redis + ELK ( Elasticsearch、Logstash、Kibana )</p><p><img src="https://cdn.learnku.com/uploads/images/202006/05/14921/bDzHC1jtK3.png!large" alt=""></p><ol><li>Filebeat 从服务器取日志文件并存储到 Redis 中。</li><li>Logstash 从 Redis 中取出日志记录，解析处理后并转发到 Elasticsearch 中。</li><li>Kibana 从 Elasticsearch 中读取数据并展示。</li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="elasticsearch安装"><a href="#elasticsearch安装" class="headerlink" title="elasticsearch安装"></a>elasticsearch安装</h2><p>1.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install elasticsearch</span><br></pre></td></tr></table></figure><p><em>安装目录：/usr/local/Cellar/elasticsearch/{elasticsearch-version}/</em></p><p><em>日志目录：/usr/local/var/log/elasticsearch/</em></p><p><em>插件目录：/usr/local/var/elasticsearch/plugins/</em></p><p><em>配置目录：/usr/local/etc/elasticsearch/</em></p><p>2.启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start elasticsearch</span><br></pre></td></tr></table></figure><p>首次启动，默认的端口号是9200，用户名是elastic，密码changeme</p><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><p>1.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kibana</span><br></pre></td></tr></table></figure><p><em>安装目录：/usr/local/Cellar/kibana/{kibana-version}/</em></p><p><em>配置目录：/usr/local/etc/kibana/</em></p><p>2.修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kibana&#x2F;kibana.yml</span><br><span class="line"></span><br><span class="line">erver.name: kibana</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;localhost&quot;</span><br><span class="line">elasticsearch.hosts: &quot;http:&#x2F;&#x2F;localhost:9200&quot;</span><br><span class="line">elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">elasticsearch.password: &quot;changeme&quot;</span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><p>3.启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start kibana</span><br></pre></td></tr></table></figure><p>首次启动，默认端口号是5601，打开浏览器访问<code>http://localhost:5601</code>访问kibana管理页面，会弹框要求输入用户名密码，输入elastic和123456即可。</p><h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><p>1.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install logstash</span><br></pre></td></tr></table></figure><p><em>安装目录：/usr/local/Cellar/logstash/{logstash-version}/</em></p><p>2.安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;logstash&#x2F;&#123;logstash-version&#125;&#x2F;</span><br><span class="line">.&#x2F;logstash-plugin install logstash-input-jdbc</span><br></pre></td></tr></table></figure><p>3.编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vi jdbc.conf</span><br><span class="line">input &#123;</span><br><span class="line">        jdbc &#123;</span><br><span class="line">                jdbc_driver_library &#x3D;&gt; &quot;mysql连接jar包&quot;</span><br><span class="line">                jdbc_driver_class &#x3D;&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                jdbc_connection_string &#x3D;&gt; &quot;jdbc:mysql:&#x2F;&#x2F;数据库地址及数据库?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&quot;</span><br><span class="line">                jdbc_user &#x3D;&gt; &quot;数据库账号&quot;</span><br><span class="line">                jdbc_password &#x3D;&gt; &quot;数据库密码&quot;</span><br><span class="line">                schedule &#x3D;&gt; &quot;* * * * *&quot;</span><br><span class="line">                jdbc_paging_enabled &#x3D;&gt; true</span><br><span class="line">                statement &#x3D;&gt; &quot;select * from tb_item&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        jdbc &#123;</span><br><span class="line">                jdbc_driver_library &#x3D;&gt; &quot;mysql连接jar包&quot;</span><br><span class="line">                jdbc_driver_class &#x3D;&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                jdbc_connection_string &#x3D;&gt; &quot;jdbc:mysql:&#x2F;&#x2F;数据库地址及数据库?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&quot;</span><br><span class="line">                jdbc_user &#x3D;&gt; &quot;数据库账号&quot;</span><br><span class="line">                jdbc_password &#x3D;&gt; &quot;数据库密码&quot;</span><br><span class="line">                schedule &#x3D;&gt; &quot;* * * * *&quot;</span><br><span class="line">                jdbc_paging_enabled &#x3D;&gt; true</span><br><span class="line">                #执行语句</span><br><span class="line">                statement &#x3D;&gt; &quot;select * from tb_item where updated &gt; :sql_last_value&quot;</span><br><span class="line">                #使用数据库表的列</span><br><span class="line">                use_column_value &#x3D;&gt; true</span><br><span class="line">                tracking_column &#x3D;&gt; &quot;updated&quot;</span><br><span class="line">                tracking_column_type &#x3D;&gt; &quot;timestamp&quot;</span><br><span class="line">                #这是存放上一次执行之后id的值</span><br><span class="line">                last_run_metadata_path &#x3D;&gt; &quot;lastUpdated.txt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        #输入es地址</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts &#x3D;&gt; [&quot;172.26.43.37:9200&quot;]</span><br><span class="line">            # 索引名字，必须小写</span><br><span class="line">            index &#x3D;&gt; &quot;tb_item&quot;</span><br><span class="line">            # 数据唯一索引</span><br><span class="line">            document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        stdout &#123; codec &#x3D;&gt; json_lines &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.执行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;logstash -f jdbc.conf</span><br></pre></td></tr></table></figure><h2 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h2><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install filebeat</span><br></pre></td></tr></table></figure><p><em>安装目录：/usr/local/Cellar/filebeat/{filebeat-version}/</em></p><p><em>配置目录：/usr/local/etc/filebeat/</em></p><p><em>缓存目录：/usr/local/var/lib/filebeat/</em></p><h2 id="logstash安装"><a href="#logstash安装" class="headerlink" title="logstash安装"></a>logstash安装</h2><p>Logstash的安装脚本如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载logstash的压缩包</span></span><br><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/artifacts.elastic.co/downloads</span><span class="regexp">/logstash/logstash</span>-<span class="number">7.2</span>.<span class="number">0</span>.zip</span><br><span class="line"><span class="comment"># 解压压缩包 </span></span><br><span class="line">upzip logstash-<span class="number">7.2</span>.<span class="number">0</span>.zip</span><br><span class="line"><span class="comment"># 将解压的包移到/usr/share目录下</span></span><br><span class="line">mv logstash-<span class="number">7.2</span>.<span class="number">0</span> /usr/share/</span><br><span class="line">cd /usr/share/logstash-<span class="number">7.2</span>.<span class="number">0</span>/</span><br></pre></td></tr></table></figure><h2 id="stash第一个事件"><a href="#stash第一个事件" class="headerlink" title="stash第一个事件"></a>stash第一个事件</h2><p>Logstash管道有两个必需元素，输入和输出，以及一个可选元素filter。 输入插件使用来自源的数据，过滤器插件在您指定时修改数据，输出插件将数据写入目标。<br> 如下如</p><p><img src="https:////upload-images.jianshu.io/upload_images/2279594-b10bc217400bbe0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1089/format/webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datasource -&gt; [logstash pipeline](inputs-filter-outputs) -&gt; elasticsearch</span><br></pre></td></tr></table></figure><p>要测试Logstash安装成功，运行最基本的Logstash管道。 执行以下的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br></pre></td></tr></table></figure><p>-e标志使您可以直接从命令行指定配置。 通过在命令行指定配置，可以快速测试配置，而无需在迭代之间编辑文件。 示例中的管道从标准输入stdin获取输入，并以结构化格式将输入移动到标准输出stdout。<br> 启动Logstash后，等到看到“Pipeline main started”，然后在命令提示符下输入hello world，显示的如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">&#123;</span><br><span class="line">          <span class="string">"host"</span> =&gt; <span class="string">"VM_0_13_centos"</span>,</span><br><span class="line">       <span class="string">"message"</span> =&gt; <span class="string">"hello world"</span>,</span><br><span class="line">      <span class="string">"@version"</span> =&gt; <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"@timestamp"</span> =&gt; <span class="number">2019</span><span class="number">-07</span><span class="number">-02</span>T06:<span class="number">26</span>:<span class="number">28.684</span>Z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置logstash输出到elasticsearch"><a href="#配置logstash输出到elasticsearch" class="headerlink" title="配置logstash输出到elasticsearch"></a>配置logstash输出到elasticsearch</h2><p>修改logstash的安装目录的config目录下的logstash-sample.conf文件，配置如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; <span class="number">5044</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"http://10.0.0.5:9200"</span>, <span class="string">"http://10.0.0.13:9200"</span>, <span class="string">"http://10.0.0.17:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">    #user =&gt; <span class="string">"elastic"</span></span><br><span class="line">    #password =&gt; <span class="string">"changeme"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的配置中，输入数据源为filebeat，关于filebeat见下一小节，输出源为elasticsearch。更多的输入和输出源的配置见官网<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Flogstash%2Fcurrent%2Fadvanced-pipeline.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html</a></p><p>用下面的命令从后台启动logstash：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f config/logstash-sample.conf &gt;logstash.<span class="built_in">log</span>  <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="logstash结合filebeat"><a href="#logstash结合filebeat" class="headerlink" title="logstash结合filebeat"></a>logstash结合filebeat</h2><p>在分布式系统中，一台主机可能有多个应用，应用将日志输出到主机的指定目录，这时由logstash来搬运日志并解析日志，然后输出到elasticsearch上。由于于<br> logstash是java应用，解析日志是非的消耗cpu和内存，logstash安装在应用部署的机器上显得非常的笨重。最常见的做法是用filebeat部署在应用的机器上，logstash单独部署，然后由<br> filebeat将日志输出给logstash解析，解析完由logstash再传给elasticsearch。</p><p>下载filebeat，下载命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> wget  https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf filebeat-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">mv filebeat-7.2.0-linux-x86_64 /usr/share/</span><br><span class="line"><span class="built_in">cd</span> /usr/share/filebeat-7.2.0-linux-x86_64/</span><br></pre></td></tr></table></figure><p>vim filebeat.yml修改配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/service-hi.log</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.1.4:5044"</span>]</span><br></pre></td></tr></table></figure><p>主要配置的是日志的搜集目录为/var/log/service-hi.log，这个目录是应用service-hi输出日志的文件。输出到logstsh的地址为192.168.1.4</p><p>启动filebeat，执行一下命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root filebeat.yml</span><br><span class="line">sudo ./filebeat -e &gt;filebeat.<span class="built_in">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot整合ELK-Filebear构建日志系统"><a href="#Spring-Boot整合ELK-Filebear构建日志系统" class="headerlink" title="Spring Boot整合ELK+Filebear构建日志系统"></a>Spring Boot整合ELK+Filebear构建日志系统</h2><p>在SpringBoot应用service-hi，定时输出日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElkTestApplication</span> </span>&#123;</span><br><span class="line">    Logger logger= LoggerFactory.getLogger(ElkTestApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Random random=<span class="keyword">new</span> Random(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ElkTestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="keyword">new</span> ElkTestApplication().initTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.info(<span class="string">"seed:"</span>+random.nextInt(<span class="number">999999</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">100</span>,<span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在部署了filebeat的机器上部署该应用，应用的输出文件为/var/log/service-hi.log，应用启动命令如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar  elk-test<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar &gt; /var/<span class="built_in">log</span>/service-hi.<span class="built_in">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>  &amp;</span><br></pre></td></tr></table></figure><p>应用启动成功后日志输出如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019<span class="selector-tag">-07-02</span> 17<span class="selector-pseudo">:13</span><span class="selector-pseudo">:13.530</span>  <span class="selector-tag">INFO</span> 31579 <span class="selector-tag">---</span> <span class="selector-attr">[pool-1-thread-1]</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.elktest</span><span class="selector-class">.ElkTestApplication</span>   : <span class="selector-tag">seed</span><span class="selector-pseudo">:562779</span></span><br><span class="line">2019<span class="selector-tag">-07-02</span> 17<span class="selector-pseudo">:13</span><span class="selector-pseudo">:13.630</span>  <span class="selector-tag">INFO</span> 31579 <span class="selector-tag">---</span> <span class="selector-attr">[pool-1-thread-1]</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.elktest</span><span class="selector-class">.ElkTestApplication</span>   : <span class="selector-tag">seed</span><span class="selector-pseudo">:963836</span></span><br><span class="line">2019<span class="selector-tag">-07-02</span> 17<span class="selector-pseudo">:13</span><span class="selector-pseudo">:13.730</span>  <span class="selector-tag">INFO</span> 31579 <span class="selector-tag">---</span> <span class="selector-attr">[pool-1-thread-1]</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.elktest</span><span class="selector-class">.ElkTestApplication</span>   : <span class="selector-tag">seed</span><span class="selector-pseudo">:825694</span></span><br><span class="line">2019<span class="selector-tag">-07-02</span> 17<span class="selector-pseudo">:13</span><span class="selector-pseudo">:13.830</span>  <span class="selector-tag">INFO</span> 31579 <span class="selector-tag">---</span> <span class="selector-attr">[pool-1-thread-1]</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.elktest</span><span class="selector-class">.ElkTestApplication</span>   : <span class="selector-tag">seed</span><span class="selector-pseudo">:33228</span></span><br><span class="line">2019<span class="selector-tag">-07-02</span> 17<span class="selector-pseudo">:13</span><span class="selector-pseudo">:13.930</span>  <span class="selector-tag">INFO</span> 31579 <span class="selector-tag">---</span> <span class="selector-attr">[pool-1-thread-1]</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.elktest</span><span class="selector-class">.ElkTestApplication</span>   : <span class="selector-tag">seed</span><span class="selector-pseudo">:685589</span></span><br></pre></td></tr></table></figure><p>这时的日志数据的传输路径如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/2279594-5e974fc79f61ae4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/802/format/webp" alt="img"></p><p>1.png</p><p>在kibana组件上查看，可以看到创建了一个filebeat开头的数据索引，如下图:</p><p><img src="https://upload-images.jianshu.io/upload_images/2279594-2359e59308d9d787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>微信截图_20190702170554.png</p><p>在日志搜索界面，可以看到service-hi应用输出的日志，如图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2279594-8338b551bdcbcd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;搭建日志系统的目的主要为了在生产环境下能够方便的查看多个项目的实时日记，增加开发效率。特别是在线上多台服务器部署时候，不用在登录服务器进入项目目录，通过 tail -f 等命令来查看日记了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Elasticsearch" scheme="https://baiyu128.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理之InvocationHandler</title>
    <link href="https://baiyu128.github.io/2021/01/13/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8BInvocationHandler/"/>
    <id>https://baiyu128.github.io/2021/01/13/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B9%8BInvocationHandler/</id>
    <published>2021-01-13T05:51:41.000Z</published>
    <updated>2021-01-13T06:01:06.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-d09969a5f84b543c93a8f50206ead383_1440w.jpg?source=172ae18b" alt=""></p><p>网上关于Java的动态代理，Proxy和InvocationHandler这些概念有讲解得非常高深的文章.现在咱们通过一个最简单的例子认识什么是InvocationHandler。值得一提的是，InvocationHandler在Spring框架实现中被广泛使用，这意味着我们吃透了InvocationHandler，就为将来的Spring源码学习打下一个坚实的基础。</p><a id="more"></a><p>开发一个接口，包含两个方法，可以向指定的人问候“你好”或者“再见”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">sayGoogBye</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个简单的类，实现这个IHello接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloimplements</span> <span class="keyword">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayGoogBye</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">" GoodBye!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费这个实现类，迄今为止没什么特别的。</p><p>现在假设我们接到了这个需求：老板要求在该实现类每次问候某人时，必须把问候的细节记录到日志文件里。为了简单起见，我们在问候前打印下面的一行语句来模拟日志记录的动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">您也许会说，这还不简单？直接修改Helloimplements的对应方法，把这行日志插入到对应方法即可。</span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;pic1.zhimg.com&#x2F;80&#x2F;v2-2fb60bea5ca37e2f08e1cc246c53d434_1440w.jpg)</span><br><span class="line"></span><br><span class="line">然而，老板的要求是：不允许你修改原来的Helloimplements类。在现实场景中，Helloimplements可能是第三方的jar包提供的，我们没有办法修改代码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;pic4.zhimg.com&#x2F;80&#x2F;v2-f318edcd4f7488ba4ff7273cb1d8c9f7_1440w.jpg)</span><br><span class="line"></span><br><span class="line">您也许会说，我们可以用设计模式里的代理模式，即创建一个新的Java类作为代理类，同样实现IHello接口，然后将Helloimplements类的实例传入代理类。我们虽然被要求不允许修改Helloimplements的代码，但是可以把日志记录代码写在代理类里。完整代码如下：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class StaticProxy implements IHello &#123;</span><br><span class="line"></span><br><span class="line">  private IHello iHello;</span><br><span class="line"></span><br><span class="line">  public void setImpl(IHello impl)&#123;</span><br><span class="line"></span><br><span class="line">  this.iHello &#x3D; impl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">public void sayHello(String name) &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;问候之前的日志记录...&quot;);</span><br><span class="line"></span><br><span class="line">    iHello.sayHello(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">public void sayGoogBye(String name) &#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(&quot;问候之前的日志记录...&quot;);</span><br><span class="line"></span><br><span class="line">     iHello.sayGoogBye(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static public void main(String[] arg) &#123;</span><br><span class="line"></span><br><span class="line">     Helloimplements hello &#x3D; new Helloimplements();</span><br><span class="line"></span><br><span class="line">     StaticProxy proxy &#x3D; new StaticProxy();</span><br><span class="line"></span><br><span class="line">     proxy.setImpl(hello);</span><br><span class="line"></span><br><span class="line">     proxy.sayHello(&quot;Jerry&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法能够实现需求：</p><p><img src="https://pic3.zhimg.com/80/v2-0cd0504320c08c6eb8352ce1bfa700d6_1440w.jpg" alt="img"></p><p>下面我们再看如何用InvocationHandler实现同样的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">InvocationHandler是一个JDK提供的标准接口。看下面的代码：</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynaProxyHello</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object delegate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">        <span class="keyword">this</span>.delegate.getClass().getClassLoader(), <span class="keyword">this</span>.delegate</span><br><span class="line">        .getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"问候之前的日志记录..."</span>);</span><br><span class="line">            <span class="comment">// JVM通过这条语句执行原来的方法(反射机制)</span></span><br><span class="line">            result = method.invoke(<span class="keyword">this</span>.delegate, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码里的bind方法很想我之前代理类StaticProxy的setImpl方法，只不过这个bind方法的输入参数类型更加通用。日志记录的代码写在方法invoke里。</p><p>看看如何使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">    DynaProxyHello helloproxy = <span class="keyword">new</span> DynaProxyHello();</span><br><span class="line">    Helloimplements hello = <span class="keyword">new</span> Helloimplements();</span><br><span class="line">    IHello ihello = (IHello) helloproxy.bind(hello);</span><br><span class="line">    ihello.sayHello(<span class="string">"Jerry"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果和StaticProxy那种解决方案完全一致。</p><p>咱们先来调试一下。当bind方法执行时，方法Proxy.newProxyInstance被调用，Helloimplements类的实例被传入。</p><p><img src="https://pic1.zhimg.com/80/v2-81cc7441d1e99a478bff126c7ab5426c_1440w.jpg" alt="img"></p><p>我们在调试器里观察IHello ihello = (IHello) helloproxy.bind(hello)这行语句返回的ihello变量。虽然它的静态类型是IHello，但请注意，在调试器里观察它的实际类型，并不是Helloimplements的实例，而是JVM给我们加过工的，包含了我们在invoke方法里手写的那行日志记录代码。这个ihello类型为$Proxy0。</p><p><img src="https://pic2.zhimg.com/80/v2-07d0736deb036f03321c7b26b0353595_1440w.jpg" alt="img"></p><p>当这个被JVM加过工的变量的sayHello方法被调用时，JVM自动将调用转交到DynaProxyHello.invoke去：</p><p><img src="https://pic1.zhimg.com/80/v2-07f35c7f15b7a7012f246cb453f5ad88_1440w.jpg" alt="img"></p><p>于是，在invoke方法里，我们手写的日志记录代码被执行，然后通过Java反射执行原始的sayHello代码。</p><p>有的朋友可能会问，你这个InvocationHandler看起来比静态代理StaticProxy还复杂啊？有什么好处？</p><p>假设老板的需求又变了，在调用问候和说再见的方法里，要使用不同的日志记录策略。</p><p>看看用InvocationHandler如何优雅实现吧：</p><p><img src="https://pic3.zhimg.com/80/v2-4b79eca3b74d927fc4ebbd41aec878d2_1440w.jpg" alt="img"></p><p>希望这个例子能让大家对Java的动态代理之InvocationHandler有了最基本的了解。</p><p>也可以将其用在服务转发，如前置服务收到请求后，将请求预处理后，分发至具体的server来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyManager</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(ProxyManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz Proxied interface</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url server provider url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> okHttpClient http client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyManager</span><span class="params">(Class&lt;T&gt; clazz, String url, OkHttpClient okHttpClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.okHttpClient = okHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get proxy instance of api.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> Class[]&#123;clazz&#125;, <span class="keyword">new</span> ProxyInvocation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocation</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            String serverUrl = url + <span class="string">"/"</span> + method.getName() ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CIMException(VALIDATION_FAIL);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (method.getParameterTypes().length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                Object para = args[<span class="number">0</span>];</span><br><span class="line">                Class&lt;?&gt; parameterType = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span> (Field field : parameterType.getDeclaredFields()) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    jsonObject.put(field.getName(), field.get(para));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> HttpClient.call(okHttpClient, jsonObject.toString(), serverUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法很多，这里就不一一列举了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d09969a5f84b543c93a8f50206ead383_1440w.jpg?source=172ae18b&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;网上关于Java的动态代理，Proxy和InvocationHandler这些概念有讲解得非常高深的文章.现在咱们通过一个最简单的例子认识什么是InvocationHandler。值得一提的是，InvocationHandler在Spring框架实现中被广泛使用，这意味着我们吃透了InvocationHandler，就为将来的Spring源码学习打下一个坚实的基础。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://baiyu128.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM的内存结构及GC机制</title>
    <link href="https://baiyu128.github.io/2020/08/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%8F%8AGC%E6%9C%BA%E5%88%B6/"/>
    <id>https://baiyu128.github.io/2020/08/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%8F%8AGC%E6%9C%BA%E5%88%B6/</id>
    <published>2020-08-25T04:15:37.000Z</published>
    <updated>2020-08-25T04:34:58.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>​       <strong>JAVA GC</strong>（Garbage Collection，垃圾回收）机制是区别C++的一个重要特征，C++需要开发者自己实现垃圾回收的逻辑，而JAVA开发者则只需要专注于业务开发，因为垃圾回收这件繁琐的事情JVM已经为我们代劳了，从这一点上来说，JAVA还是要做的比较完善一些。但这并不意味着我们不用去理解GC机制的原理，因为如果不了解其原理，可能会引发内存泄漏、频繁GC导致应用卡顿,甚至出现OOM等问题，因此我们需要深入理解其原理，才能编写出高性能的应用程序，解决性能瓶颈。</p><p>​       想要理解GC的原理，我们必须先理解JVM内存管理机制，因为这样我们才能知道回收哪些对象、什么时候回收以及怎么回收。</p><a id="more"></a><h1 id="二、JVM内存管理"><a href="#二、JVM内存管理" class="headerlink" title="二、JVM内存管理"></a>二、JVM内存管理</h1><p>​       根据JVM规范，JVM把内存划分成了如下几个区域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.方法区（Method Area）</span><br><span class="line">2.堆区（Heap）</span><br><span class="line">3.虚拟机栈（VM Stack）</span><br><span class="line">4.本地方法栈（Native Method Stack）</span><br><span class="line">5.程序计数器（Program Counter Register）复制代码</span><br></pre></td></tr></table></figure><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.44.56.png" alt="截屏2019-08-22上午10.44.56"></p><p>​       其中，方法区和堆所有线程共享。</p><h2 id="2-1-方法区（Method-Area）"><a href="#2-1-方法区（Method-Area）" class="headerlink" title="2.1 方法区（Method Area）"></a>2.1 方法区（Method Area）</h2><p>​       方法区存放了要加载的类的信息（如类名、修饰符等）、静态变量、构造函数、final定义的常量、类中的字段和方法等信息。方法区是全局共享的，在一定条件下也会被GC。当方法区超过它允许的大小时，就会抛出OutOfMemory：PermGen Space异常。</p><p>​       在Hotspot虚拟机中，这块区域对应<strong>持久代（Permanent Generation）</strong>，一般来说，方法区上执行GC的情况很少，因此方法区被称为持久代的原因之一，但这并不代表方法区上完全没有GC，其上的GC主要针对常量池的回收和已加载类的卸载。在方法区上进行GC，条件相当苛刻而且困难。</p><p>​       <strong>运行时常量池（Runtime Constant Pool）</strong>是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符”hello”已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。</p><h2 id="2-2-堆区（Heap）"><a href="#2-2-堆区（Heap）" class="headerlink" title="2.2 堆区（Heap）"></a>2.2 堆区（Heap）</h2><p>​       堆区是GC最频繁的，也是理解GC机制最重要的区域。堆区由所有线程共享，在虚拟机启动时创建。堆区主要用于存放对象实例及数组，所有new出来的对象都存储在该区域。</p><h2 id="2-3-虚拟机栈（VM-Stack）"><a href="#2-3-虚拟机栈（VM-Stack）" class="headerlink" title="2.3 虚拟机栈（VM Stack）"></a>2.3 虚拟机栈（VM Stack）</h2><p>​       虚拟机栈占用的是操作系统内存，每个线程对应一个虚拟机栈，它是线程私有的，生命周期和线程一样，每个方法被执行时产生一个<strong>栈帧（Statck Frame）</strong>，栈帧用于存储局部变量表、动态链接、操作数和方法出口等信息，当方法被调用时，栈帧入栈，当方法调用结束时，栈帧出栈。</p><p>​       <strong>局部变量表</strong>中存储着方法相关的局部变量，包括各种基本数据类型及对象的引用地址等，因此他有个特点：内存空间可以在编译期间就确定，运行时不再改变。</p><p>​       虚拟机栈定义了两种<strong>异常类型</strong>：<strong>StackOverFlowError(栈溢出)和OutOfMemoryError（内存溢出）</strong>。如果线程调用的栈深度大于虚拟机允许的最大深度，则抛出StackOverFlowError；不过大多数虚拟机都允许动态扩展虚拟机栈的大小，所以线程可以一直申请栈，直到内存不足时，抛出OutOfMemoryError。</p><h2 id="2-4-本地方法栈（Native-Method-Stack）"><a href="#2-4-本地方法栈（Native-Method-Stack）" class="headerlink" title="2.4 本地方法栈（Native Method Stack）"></a>2.4 本地方法栈（Native Method Stack）</h2><p>​       <strong>本地方法栈</strong>用于支持native方法的执行，存储了每个native方法的执行状态。本地方法栈和虚拟机栈他们的运行机制一致，唯一的区别是，虚拟机栈执行Java方法，本地方法栈执行native方法。在很多虚拟机中（如Sun的JDK默认的HotSpot虚拟机），会将虚拟机栈和本地方法栈一起使用。</p><h2 id="2-5-程序计数器（Program-Counter-Register）"><a href="#2-5-程序计数器（Program-Counter-Register）" class="headerlink" title="2.5 程序计数器（Program Counter Register）"></a>2.5 程序计数器（Program Counter Register）</h2><p>​       <strong>程序计数器</strong>是一个很小的内存区域，不在RAM上，而是直接划分在CPU上，程序猿无法操作它，它的作用是：JVM在解释字节码（.class）文件时，存储当前线程执行的字节码行号，只是一种概念模型，各种JVM所采用的方式不一样。字节码解释器工作时，就是通过改变程序计数器的值来取下一条要执行的指令，分支、循环、跳转等基础功能都是依赖此技术区完成的。</p><p>​       每个程序计数器只能记录一个线程的行号，因此它是线程私有的。</p><p>​       如果程序当前正在执行的是一个java方法，则程序计数器记录的是正在执行的虚拟机字节码指令地址，如果执行的是native方法，则计数器的值为空，此内存区是唯一不会抛出OutOfMemoryError的区域。</p><h1 id="三、GC机制"><a href="#三、GC机制" class="headerlink" title="三、GC机制"></a>三、GC机制</h1><p>​       随着程序的运行，内存中的实例对象、变量等占据的内存越来越多，如果不及时进行回收，会降低程序运行效率，甚至引发系统异常。</p><p>​       在上面介绍的五个内存区域中，有3个是不需要进行垃圾回收的：本地方法栈、程序计数器、虚拟机栈。因为他们的生命周期是和线程同步的，随着线程的销毁，他们占用的内存会自动释放。所以，只有方法区和堆区需要进行垃圾回收，回收的对象就是那些不存在任何引用的对象。</p><h2 id="3-1-查找算法"><a href="#3-1-查找算法" class="headerlink" title="3.1 查找算法"></a>3.1 查找算法</h2><p>​        经典的<strong>引用计数算法</strong>，每个对象添加到引用计数器，每被引用一次，计数器+1，失去引用，计数器-1，当计数器在一段时间内为0时，即认为该对象可以被回收了。但是这个算法有个明显的缺陷：当两个对象相互引用，但是二者都已经没有作用时，理应把它们都回收，但是由于它们相互引用，不符合垃圾回收的条件，所以就导致无法处理掉这一块内存区域。因此，Sun的JVM并没有采用这种算法，而是采用一个叫——<strong>根搜索算法</strong>，如图：</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.46.01.png" alt="截屏2019-08-22上午10.46.01"></p><p>​       基本思想是：从一个叫GC Roots的根节点出发，向下搜索，如果一个对象不能达到GC Roots的时候，说明该对象不再被引用，可以被回收。如上图中的Object5、Object6、Object7，虽然它们三个依然相互引用，但是它们其实已经没有作用了，这样就解决了引用计数算法的缺陷。</p><p>​       补充概念，在JDK1.2之后引入了四个概念：<strong>强引用、软引用、弱引用、虚引用</strong>。<br>​       <strong>强引用</strong>：new出来的对象都是强引用，GC无论如何都不会回收，即使抛出OOM异常。<br>​       <strong>软引用</strong>：只有当JVM内存不足时才会被回收。<br>​       <strong>弱引用</strong>：只要GC,就会立马回收，不管内存是否充足。<br>​       <strong>虚引用</strong>：可以忽略不计，JVM完全不会在乎虚引用，你可以理解为它是来凑数的，凑够”四大天王”。它唯一的作用就是做一些跟踪记录，辅助finalize函数的使用。</p><p>​       最后总结，什么样的类需要被回收：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.该类的所有实例都已经被回收；</span><br><span class="line">b.加载该类的ClassLoad已经被回收；</span><br><span class="line">c.该类对应的反射类java.lang.Class对象没有被任何地方引用。复制代码</span><br></pre></td></tr></table></figure><h2 id="3-2-内存分区"><a href="#3-2-内存分区" class="headerlink" title="3.2 内存分区"></a>3.2 内存分区</h2><p>​       内存主要被分为三块：<strong>新生代（Youn Generation）、旧生代（Old Generation）、持久代（Permanent Generation）</strong>。三代的特点不同，造就了他们使用的GC算法不同，新生代适合生命周期较短，快速创建和销毁的对象，旧生代适合生命周期较长的对象，持久代在Sun Hotpot虚拟机中就是指方法区（有些JVM根本就没有持久代这一说法）。</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.46.54.png" alt="截屏2019-08-22上午10.46.54"></p><p>​       <strong>新生代（Youn Generation）</strong>：大致分为Eden区和Survivor区，Survivor区又分为大小相同的两部分：FromSpace和ToSpace。新建的对象都是从新生代分配内存，Eden区不足的时候，会把存活的对象转移到Survivor区。当新生代进行垃圾回收时会出发<strong>Minor GC</strong>（也称作<strong>Youn GC</strong>）。</p><p>​       <strong>旧生代（Old Generation）</strong>：旧生代用于存放新生代多次回收依然存活的对象，如缓存对象。当旧生代满了的时候就需要对旧生代进行回收，旧生代的垃圾回收称作Major GC（也称作Full GC）。</p><p>​       <strong>持久代（Permanent Generation）</strong>：在Sun 的JVM中就是方法区的意思，尽管大多数JVM没有这一代。</p><h2 id="3-3-GC算法"><a href="#3-3-GC算法" class="headerlink" title="3.3 GC算法"></a>3.3 GC算法</h2><p>​       <strong>常见的GC算法</strong>：<strong>复制、标记-清除和标记-压缩</strong></p><p>​       <strong>复制</strong>：复制算法采用的方式为从根集合进行扫描，将存活的对象移动到一块空闲的区域，如图所示：</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.34.png" alt="截屏2019-08-22上午10.47.34"></p><p>当存活的对象较少时，复制算法会比较高效（新生代的Eden区就是采用这种算法），其带来的成本是需要一块额外的空闲空间和对象的移动。</p><p>​       <strong>标记-清除</strong>：该算法采用的方式是从跟集合开始扫描，对存活的对象进行标记，标记完毕后，再扫描整个空间中未被标记的对象，并进行清除。标记和清除的过程如下：</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.45.png" alt="截屏2019-08-22上午10.47.45"></p><p>上图中蓝色部分是有被引用的对象，褐色部分是没有被引用的对象。在Marking阶段，需要进行全盘扫描，这个过程是比较耗时的。</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.55.png" alt="截屏2019-08-22上午10.47.55"></p><p>清除阶段清理的是没有被引用的对象，存活的对象被保留。</p><p>标记-清除动作不需要移动对象，且仅对不存活的对象进行清理，在空间中存活对象较多的时候，效率较高，但由于只是清除，没有重新整理，因此会造成内存碎片。</p><p>​       <strong>标记-压缩</strong>：该算法与标记-清除算法类似，都是先对存活的对象进行标记，但是在清除后会把活的对象向左端空闲空间移动，然后再更新其引用对象的指针，如下图所示</p><p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.48.03.png" alt="截屏2019-08-22上午10.48.03"></p><p>由于进行了移动规整动作，该算法避免了标记-清除的碎片问题，但由于需要进行移动，因此成本也增加了。（该算法适用于旧生代）</p><h1 id="四、垃圾收集器"><a href="#四、垃圾收集器" class="headerlink" title="四、垃圾收集器"></a>四、垃圾收集器</h1><p>​       在JVM中，GC是由垃圾回收器来执行，所以，在实际应用场景中，我们需要选择合适的垃圾收集器，下面我们介绍一下垃圾收集器。</p><h2 id="4-1-串行收集器（Serial-GC）"><a href="#4-1-串行收集器（Serial-GC）" class="headerlink" title="4.1 串行收集器（Serial GC）"></a>4.1 串行收集器（Serial GC）</h2><p>​       <strong>Serial GC</strong>是最古老也是最基本的收集器，但是现在依然广泛使用，JAVA SE5和JAVA SE6中客户端虚拟机采用的默认配置。比较适合于只有一个处理器的系统。在串行处理器中minor和major GC过程都是用一个线程进行回收的。它的最大特点是在进行垃圾回收时，需要对所有正在执行的线程暂停（stop the world），对于有些应用是难以接受的，但是如果应用的实时性要求不是那么高，只要停顿的时间控制在N毫秒之内，大多数应用还是可以接受的，而且事实上，它并没有让我们失望，几十毫秒的停顿，对于我们客户机是完全可以接受的，该收集器适用于单CPU、新生代空间较小且对暂停时间要求不是特别高的应用上，是client级别的默认GC方式。</p><h2 id="4-2-ParNew-GC"><a href="#4-2-ParNew-GC" class="headerlink" title="4.2 ParNew GC"></a>4.2 ParNew GC</h2><p>​       基本和Serial GC一样，但本质区别是加入了多线程机制，提高了效率，这样它就可以被用于服务端上（server），同时它可以与CMS GC配合，所以，更加有理由将他用于server端。</p><h2 id="4-3-Parallel-Scavenge-GC"><a href="#4-3-Parallel-Scavenge-GC" class="headerlink" title="4.3 Parallel Scavenge GC"></a>4.3 Parallel Scavenge GC</h2><p>​       在整个扫描和复制过程采用多线程的方式进行，适用于多CPU、对暂停时间要求较短的应用，是server级别的默认GC方式。</p><h2 id="4-4-CMS-Concurrent-Mark-Sweep-收集器"><a href="#4-4-CMS-Concurrent-Mark-Sweep-收集器" class="headerlink" title="4.4 CMS (Concurrent Mark Sweep)收集器"></a>4.4 CMS (Concurrent Mark Sweep)收集器</h2><p>​       该收集器的目标是解决Serial GC停顿的问题，以达到最短回收时间。常见的B/S架构的应用就适合这种收集器，因为其高并发、高响应的特点，CMS是基于标记-清楚算法实现的。</p><p>CMS收集器的优点：并发收集、低停顿，但远没有达到完美；</p><p>CMS收集器的缺点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.CMS收集器对CPU资源非常敏感，在并发阶段虽然不会导致用户停顿，但是会占用CPU资源而导致应用程序变慢，总吞吐量下降。</span><br><span class="line">b.CMS收集器无法处理浮动垃圾，可能出现“Concurrnet Mode Failure”，失败而导致另一次的Full GC。</span><br><span class="line">c.CMS收集器是基于标记-清除算法的实现，因此也会产生碎片。复制代码</span><br></pre></td></tr></table></figure><h2 id="4-5-G1收集器"><a href="#4-5-G1收集器" class="headerlink" title="4.5 G1收集器"></a>4.5 G1收集器</h2><p>​       相比CMS收集器有不少改进，首先，基于标记-压缩算法，不会产生内存碎片，其次可以比较精确的控制停顿。</p><h2 id="4-6-Serial-Old收集器"><a href="#4-6-Serial-Old收集器" class="headerlink" title="4.6 Serial Old收集器"></a>4.6 Serial Old收集器</h2><p>​       Serial Old是Serial收集器的老年代版本，它同样使用一个单线程执行收集，使用“标记-整理”算法。主要使用在Client模式下的虚拟机。</p><h2 id="4-7-Parallel-Old收集器"><a href="#4-7-Parallel-Old收集器" class="headerlink" title="4.7 Parallel Old收集器"></a>4.7 Parallel Old收集器</h2><p>​       Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p><h2 id="4-8-RTSJ垃圾收集器"><a href="#4-8-RTSJ垃圾收集器" class="headerlink" title="4.8 RTSJ垃圾收集器"></a>4.8 RTSJ垃圾收集器</h2><p>​       RTSJ垃圾收集器，用于Java实时编程。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>​       深入理解JVM的内存模型和GC机制有助于帮助我们编写高性能代码和提供代码优化的思路与方向。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;​       &lt;strong&gt;JAVA GC&lt;/strong&gt;（Garbage Collection，垃圾回收）机制是区别C++的一个重要特征，C++需要开发者自己实现垃圾回收的逻辑，而JAVA开发者则只需要专注于业务开发，因为垃圾回收这件繁琐的事情JVM已经为我们代劳了，从这一点上来说，JAVA还是要做的比较完善一些。但这并不意味着我们不用去理解GC机制的原理，因为如果不了解其原理，可能会引发内存泄漏、频繁GC导致应用卡顿,甚至出现OOM等问题，因此我们需要深入理解其原理，才能编写出高性能的应用程序，解决性能瓶颈。&lt;/p&gt;
&lt;p&gt;​       想要理解GC的原理，我们必须先理解JVM内存管理机制，因为这样我们才能知道回收哪些对象、什么时候回收以及怎么回收。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JAVA基础核心总结</title>
    <link href="https://baiyu128.github.io/2020/08/25/JAVA%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E6%80%BB%E7%BB%93/"/>
    <id>https://baiyu128.github.io/2020/08/25/JAVA%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-25T04:13:18.000Z</published>
    <updated>2020-08-25T04:34:35.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础核心总结"><a href="#java基础核心总结" class="headerlink" title="java基础核心总结"></a>java基础核心总结</h1><h2 id="java的基本语法"><a href="#java的基本语法" class="headerlink" title="java的基本语法"></a>java的基本语法</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte,short,int,long,     1byte &#x3D; 8bits   1short &#x3D; 16bits  1int &#x3D; 32bits  1long &#x3D; 64bits</span><br><span class="line">double,float,   1float &#x3D; 32bits   1double &#x3D; 64bits</span><br><span class="line">char,     最小 \u0000,   最大 \uffff</span><br><span class="line">boolean</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大小写敏感： </span><br><span class="line">类名： 首字母大写</span><br><span class="line">包名： 尽量小写</span><br><span class="line">方法名： 首字母小写，小驼峰，见名知意</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">赋值运算符： &#x3D;。     int a &#x3D; 5;</span><br><span class="line">算数运算符： + - * &#x2F; %</span><br><span class="line">自增、自减运算符：  ++a   a--   </span><br><span class="line">比较运算符：&gt; &lt; &#x3D;&#x3D; &lt;&#x3D; &gt;&#x3D; !&#x3D;</span><br><span class="line">逻辑运算符：&amp;&amp;  || ! &amp; | ^</span><br><span class="line">按位运算符： &amp;: 4&amp;5&#x3D;4  |:4|5&#x3D;4   ^:4^5&#x3D;1   ~:~4&#x3D;~5</span><br><span class="line">移位运算符： &gt;&gt;:8&gt;&gt;1 &#x3D; 4    &lt;&lt;:9&lt;&lt;2 &#x3D; 36</span><br><span class="line">三元运算符：  条件表达式？表达式1:表达式2</span><br></pre></td></tr></table></figure><h2 id="java执行控制流程"><a href="#java执行控制流程" class="headerlink" title="java执行控制流程"></a>java执行控制流程</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a&gt;<span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h4 id="if…else条件语句"><a href="#if…else条件语句" class="headerlink" title="if…else条件语句"></a>if…else条件语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span> (a&gt;=b)&#123;</span><br><span class="line">  System.out.println(<span class="string">"a&gt;=b"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">"a&lt;b"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if…else-if-多分支语句"><a href="#if…else-if-多分支语句" class="headerlink" title="if…else if 多分支语句"></a>if…else if 多分支语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">40</span>; <span class="keyword">if</span>(x &gt; <span class="number">60</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于60"</span>); &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">30</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于30但小于60"</span>); &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于0但小于30"</span>); &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值小于等于0"</span>); &#125;</span><br></pre></td></tr></table></figure><h4 id="switch-多分支语句"><a href="#switch-多分支语句" class="headerlink" title="switch 多分支语句"></a>switch 多分支语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"Monday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"Tuesday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"Wednesday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"Thursday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"Friday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"Saturday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.println(<span class="string">"Sunday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"No Else"</span>); </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔值)&#123;</span><br><span class="line">  表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">"b == "</span> + b);</span><br><span class="line">  b--;</span><br><span class="line">&#125; <span class="keyword">while</span> (b== <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式 ; 步进)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j = i + <span class="number">10</span>; i &lt; <span class="number">5</span>; i++, j=j*<span class="number">2</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="for-each-语句"><a href="#for-each-语句" class="headerlink" title="for-each 语句"></a>for-each 语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr:array) &#123;</span><br><span class="line">  System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><p>break,continue,return</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>属性也称为字段</p><p>方法表示 做某些事情的方式，方法的基本组成包括  方法名称、参数、返回值、方法体</p><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>有参和无参构造函数属于重载的一种，还有一种是，每个重载的方法都有独一无二的参数列表，其中包括参数的类型、顺序、参数数量等，满足重载的条件如下：</p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数不同、类型不同、参数类型排列顺序不同等）</li><li>方法的返回类型可以相同也可以不相同</li><li>仅仅返回类型不同不足矣成为方法的重载</li><li>重载是发生在编译时的，因为编译器可以根据参数的类型来选择使用哪个方法；</li></ul><h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>重写的原则：</p><ul><li>重写的方法必须要和父类保持一致，包括返回值类型，方法名，参数列表 也都一样</li><li>重写的方法可以使用 @Override 注解来标识</li><li>子类中重写方法的访问权限不能低于父类中方法的访问权限</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><p>使用new 关键字创建对象，等调用构造方法进行初始化</p><h4 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h4><p>java会尽量保证每个变量在使用前都会获得初始化，分为两种：</p><ul><li><p>编译器默认指定的字段初始化，基本数据类型的初始化</p><p>一种是其他对象类型的初始化，String也是一种对象，默认初始值为null，其中也包括基本类型的包装类。</p></li><li><p>一种是指定数值的初始化，如： int a = 11</p></li></ul><h4 id="构造器初始化"><a href="#构造器初始化" class="headerlink" title="构造器初始化"></a>构造器初始化</h4><p>可以利用构造器来对某些方法和某些动作进行初始化，确定初始值</p><h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>有如下初始化：</p><ul><li>静态属性： static开头定义的属性</li><li>静态方法快： static{}包起来的代码块</li><li>普通属性：非static定义的属性</li><li>普通方法块：{} 包起来的代码块</li><li>构造函数：类名相同的方法</li><li>方法： 普通方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticField = getStaticField();</span><br><span class="line">    <span class="comment">// 静态方法块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(staticField);</span><br><span class="line">        System.out.println(<span class="string">"静态方法块初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String field = getField();</span><br><span class="line">    <span class="comment">// 普通方法块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeCycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStaticField</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String staticField = <span class="string">"Static Field Initial"</span>;</span><br><span class="line">        <span class="keyword">return</span> staticField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String field = <span class="string">"Field Initial"</span>;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LifeCycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">Static Field Initial</span><br><span class="line">静态方法块初始化</span><br><span class="line">Field Initial</span><br><span class="line">构造函数初始化</span><br></pre></td></tr></table></figure><h4 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h4><p>数组的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">int</span> a1[];</span><br></pre></td></tr></table></figure><ul><li>直接给每个元素赋值：int array[4] = {1,2,3,4};</li><li>给一部分赋值，后面的都为0: int array[4] = {1,2};</li><li>由赋值参数个数决定数组的个数： int array[] = {1,2};</li></ul><h4 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h4><p>java中一种数组冷门的用法就是可变参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... numbers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num: numbers) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(); <span class="comment">//不传参数</span></span><br><span class="line">add(<span class="number">1</span>); <span class="comment">// 传递一个参数</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">1</span>); <span class="comment">// 传递多个参数</span></span><br><span class="line">add(<span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;); <span class="comment">// 传递数组</span></span><br></pre></td></tr></table></figure><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><p>在java中我们不需要手动管理对象的销毁，都是由java虚拟机进行管理和销毁</p><h4 id="对象作用域"><a href="#对象作用域" class="headerlink" title="对象作用域"></a>对象作用域</h4><p>作用域决定了其内部定义的变量名的可见性和生命周期</p><h4 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h4><p>this表示的当前对象，this可以调用方法、属性和指向对象本身。</p><p>this还可以和构造函数一起使用，充当一个全局关键字的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(num, <span class="string">"红色"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">1</span>, color);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num, String color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = num;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this(参数)相当于调用了其他构造方法，然后传递参数进去。注意：：：this()必须放在构造方法的第一行，否则编译失败；</p><p>如果把this理解成指向自身的一个引用，那么super就是指向父类的一个引用。super和this一样，可以使用 super.对象 来引用父类的成员。也可以使用super(参数) 来调用父类的构造函数。</p><h3 id="封装-访问控制权限"><a href="#封装-访问控制权限" class="headerlink" title="封装( 访问控制权限)"></a>封装( 访问控制权限)</h3><p>访问控制权限又称为 封装，  </p><p>访问控制权限的核心： 只对需要的类可见。</p><p>java中成员的访问权限共有四种 ： public、protected、default、private</p><table><thead><tr><th></th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>同一类</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>同一包中的类</td><td></td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>子类</td><td></td><td></td><td>✅</td><td>✅</td></tr><tr><td>其他包中的类</td><td></td><td></td><td></td><td>✅</td></tr></tbody></table><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>只要我们创建一个类，就隐式继承自Object父类，只不过没有指定。如果你显示指定了父类，那么你继承于父类，而你的父类继承于Object类。</p><p>继承的关键字： extends</p><p>子类可以重写父类的方法，也可以直接使用父类的方法</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指的是同一个行为具有多个不同表现形式。</p><p>多态的实现，需要三种充要条件：</p><ul><li>继承</li><li>重写父类的方法</li><li>父类引用指向子类对象</li></ul><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口相当于就是对外的一种约定和标准</p><p>接口的关键字：interface</p><p>特征：</p><ul><li><p><code>interface</code> 接口是一个完全抽象的类，会进行方法的定义</p></li><li><p>接口中只能使用两种访问修饰符，一种是public，他对整个项目可见，一种是 default 缺省值，只具有包访问权限</p></li><li><p>接口只提供方法的定义，接口没有实现，但是接口可以被其他类实现。</p><p>即：实现接口的类需要提供方法的实现，实现接口使用 <code>implements</code>关键字来表示，一个接口可以有多个实现</p></li><li><p>接口不能被序列化，所以接口中不能有任何构造方法，</p></li><li><p>接口的实现比如实现接口的全部方法，否则必须定义为 抽象类 ，</p></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类的关键字： abstract</p><p>特征：</p><ul><li>如果一个类中有抽象方法，那么这个类一定是抽象类，也就是说，使用关键字 abstract修饰的方法一定是抽象方法，具有抽象方法的类一定是抽象类。实现类中只有方法具体的实现。</li><li>抽象类中不一定只有抽象的方法，抽象类中也可以有具体的方法，可以自己选择是否实现</li><li>抽象类中可以定义：构造方法、抽象方法、普通属性、方法、静态属性和静态方法</li><li>抽象类和接口一样不能被实力化，实例化只能实例化 具体的类。</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>java.lang.Exception 是一个顶级接口，继承于Throwable类，</p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>Throwable类是java语言中所有错误（errors）和异常（exceptions）的父类。只有继承于Throwable的类或者其子类才能够被抛出，还有一种方式是带有java中的@throw注解的类也可以抛出。</p><h3 id="常用的Exception"><a href="#常用的Exception" class="headerlink" title="常用的Exception"></a>常用的Exception</h3><p>Exception有两种异常：一、RuntimeException；二、CheckedException。这两种异常都应该去 捕获。</p><p>RuntimeException：</p><table><thead><tr><th>序号</th><th>异常名称</th><th>异常描述</th></tr></thead><tbody><tr><td>1</td><td>ArrayIndexOutOfBoundsException</td><td>数组越界异常</td></tr><tr><td>2</td><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>3</td><td>IllegalArgumentException</td><td>非法参数异常</td></tr><tr><td>4</td><td>NegativeArraySizeException</td><td>数组长度为负异常</td></tr><tr><td>5</td><td>IllegalStateException</td><td>非法状态异常</td></tr><tr><td>6</td><td>ClassCastException</td><td>类型转换异常</td></tr></tbody></table><p>UncheckedException:</p><table><thead><tr><th>序号</th><th>异常名称</th><th>异常描述</th></tr></thead><tbody><tr><td>1</td><td>NoSuchFieldException</td><td>表示该类没有指定名称抛出来的异常</td></tr><tr><td>2</td><td>NoSuchMethodException</td><td>表示该类没有指定方法抛出来的异常</td></tr><tr><td>3</td><td>IllegalAccessException</td><td>不允许访问某个类的异常</td></tr><tr><td>4</td><td>ClassNotFoundException</td><td>类没有找到抛出异常</td></tr></tbody></table><h3 id="与Exception有关的java关键字"><a href="#与Exception有关的java关键字" class="headerlink" title="与Exception有关的java关键字"></a>与Exception有关的java关键字</h3><p>throws、throw、try、finally、catch</p><h3 id="什么是error"><a href="#什么是error" class="headerlink" title="什么是error"></a>什么是error</h3><p>Error 是程序无法处理的错误，表示运行应用程序中较严重问题。 比如：OutOfMemoryError和StackOverflowError异常。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>可以将一个类的定义放在另一个类的内部，这就是内部类</p><p>内部类拥有外部类的访问权限。</p><p>局部内部类：定义在方法和作用域内部</p><p>定义内部类的方式：</p><ul><li>一个在方法中定义的类（局部内部类）</li><li>一个定义在作用域内的类，这个作用域在方法的内部（成员内部类）</li><li>一个实现了接口的匿名类（匿名内部类）</li><li>一个匿名类，它拓展了非默认构造器的类</li><li>一个匿名类，执行字段初始化操作</li><li>一个匿名类，它通过实例初始化实现构造</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Iterable接口"><a href="#Iterable接口" class="headerlink" title="Iterable接口"></a>Iterable接口</h3><p>实现此接口允许对象成为for-each循环的目标，也就是增强for循环，它是java中的一种语法糖。</p><p>除了实现此接口的对象外，数组也可以用for-each循环遍历</p><h3 id="顶级接口"><a href="#顶级接口" class="headerlink" title="顶级接口"></a>顶级接口</h3><p>Collection是一个顶层接口，他主要用来定义集合的约定</p><p>List也是一个顶层接口，它继承了Collection接口，同时也是ArrayList、LinkedList等集合元素的父类</p><p>Set接口位于与List接口同级的层次上，它同时继承了Collection接口，Set接口提供了额外的规定，它对add、equals、hashCode方法提供了额外的标准。</p><p>Queue是和List、Set接口并列的Collection的三大接口之一。即队列</p><p>SortedSet接口直接继承于Set接口，使用Comparable对元素进行自然排序或者使用Comparator在创建时对元素提供定制的排序规则。set的迭代器将按生序元素顺序遍历集合。</p><p>Map是一个支持key-value存储的对象，Map不能包含重复的key，每个键最多映射一个值。这个接口代替了dirctionary类，Dictionary是一个接口类而不是接口。</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是实现了List接口的 可扩容数组（动态数组），它的内部是基于数组实现的。</p><ul><li>ArrayList不是线程安全的容器，作为替代条件可以使用线程安全的List，应使用Collections.synchronizedList</li><li>ArrayList可以实现所有可选择的列表操作，允许所有的元素，包括空值。</li><li>ArrayList有一个容量的概念，这个数组的容量就是List用来存储元素的容量。</li><li>ArrayList具有fail-fast快速失败机制，能够对ArrayList作出失败检测。如迭代集合过程中集合结构发生改变会抛出ConcurrentModificaitoinException异常</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>同ArrayList一样，都是基于数组实现的，只不过Vector是一个线程安全的容器，他对内部的每个方法都简单粗暴的上锁，避免多线程引起的安全性问题，但需要的开销较大，因此效率较低。</p><p>ArrayList扩容后的数组长度会增加50%，而Vector的扩容后长度数组会增加一倍。</p><h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><p>LinkedList是一个双向链表，允许存储任何元素（包括null），特性如下：</p><ul><li><p>LinkedList所有的操作都可以表现成双向性的，索引到链表的操作将遍历从头到尾，视那个距离近为遍历顺序</p></li><li><p>LinkedList也不是线程安全的。如果多个线程并发访问链表，并且至少其中的一个线程修改了链表的结构，那么这个链表必须进行外部加锁。或者使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> LinkedList(...))</span><br></pre></td></tr></table></figure></li></ul><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>堆栈是我们常说的 后入先出 的容器。它继承了Vector类，提供了通常用的push和pop操作，以及在栈顶的peek方法，测试stack是否为空的empty方法，和一个寻找与栈顶距离的search方法。</p><p>第一次创建栈，不包含任何元素。一个更完善，可靠性更强的LIFO栈操作由Deque接口和它的实现提供，应该优先使用这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;()</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet是Set接口的实现类。不保证元素的迭代顺序，也不是线程安全的，允许null元素</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet是一个基于TreeMap的NavigableSet实现。</p><h3 id="LinkedHashSet类"><a href="#LinkedHashSet类" class="headerlink" title="LinkedHashSet类"></a>LinkedHashSet类</h3><p>LinkedHashSet是Set接口的Hash表和LinkedList的实现。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap是一个利用哈希表原理来存储元素的集合，并且允许空的key-value键值对。HashMap是非线程安全的，而HashTable是线程安全的容器。</p><p>HashMap的实例有两个参数影响其性能：初始容量和加载因子。</p><h3 id="LinkedHashMap类"><a href="#LinkedHashMap类" class="headerlink" title="LinkedHashMap类"></a>LinkedHashMap类</h3><p>LinkedHashMap类是Map接口的哈希表和链表的实现。与HashMap不同之处在于它维护了一个贯穿其所有条目的双向链表。这个链表定义了遍历顺序，通常是插入map中的顺序。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型其实就是一种参数化的集合，它限制了你添加进集合的类型。泛型的本质就是一种参数化类型。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>Java 反射机制是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法；对于任意一个对象，都能够知道调用它的任意属性和方法，这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>在java中，每定义一个java class 实体都会产生一个Class对象，也就是说，当我们编写一个类，编译完成后，在生成的 .class 文件中，就会产生一个Class对象，这个Class对象用于表示这个类的类型信息。Class中没有公共的构造器，也就是说Class对象不能被实例化。</p><h3 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h3><p>反射中，ClassLoader类也非常重要。类装载器是用来把 <strong>类（class）</strong> 装载进 <strong>JVM</strong>的。 ClassLoader使用的是双亲委派模型来搜索加载类的，这个模型也就是<strong>双亲委派模型</strong>。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>在Java中，枚举使用 enum 关键字来表示，枚举其实是一项非常有用的特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Family &#123;</span><br><span class="line">  FATHER,</span><br><span class="line">  MOTHER,</span><br><span class="line">  SON,</span><br><span class="line">  DAUGHTER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java基础核心总结&quot;&gt;&lt;a href=&quot;#java基础核心总结&quot; class=&quot;headerlink&quot; title=&quot;java基础核心总结&quot;&gt;&lt;/a&gt;java基础核心总结&lt;/h1&gt;&lt;h2 id=&quot;java的基本语法&quot;&gt;&lt;a href=&quot;#java的基本语法&quot; class=&quot;headerlink&quot; title=&quot;java的基本语法&quot;&gt;&lt;/a&gt;java的基本语法&lt;/h2&gt;&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;byte,short,int,long,     1byte &amp;#x3D; 8bits   1short &amp;#x3D; 16bits  1int &amp;#x3D; 32bits  1long &amp;#x3D; 64bits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double,float,   1float &amp;#x3D; 32bits   1double &amp;#x3D; 64bits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char,     最小 \u0000,   最大 \uffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://baiyu128.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁用Redis还是Zookeeper</title>
    <link href="https://baiyu128.github.io/2020/07/27/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%94%A8Redis%E8%BF%98%E6%98%AFZookeeper/"/>
    <id>https://baiyu128.github.io/2020/07/27/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%94%A8Redis%E8%BF%98%E6%98%AFZookeeper/</id>
    <published>2020-07-27T09:24:03.000Z</published>
    <updated>2020-07-28T01:46:53.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么用分布式锁？"><a href="#为什么用分布式锁？" class="headerlink" title="为什么用分布式锁？"></a>为什么用分布式锁？</h2><p>在讨论这个问题之前，我们先来看一个业务场景：</p><p>系统A是一个电商系统，目前是一台机器部署，系统中有一个用户下订单的接口，但是用户下订单之前一定要去检查一下库存，确保库存足够了才会给用户下单。</p><p>由于系统有一定的并发，所以会预先将商品的库存保存在redis中，用户下单的时候会更新redis的库存。</p><a id="more"></a><p>此时系统架构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单| B[系统A]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|5.继续执行| D[后续业务逻辑]</span><br><span class="line">B--&gt;|3.锁定库存| E[数据库]</span><br></pre></td></tr></table></figure><p>但是这样一来会<strong>产生一个问题</strong>：假如某个时刻，redis里面的某个商品库存为1，此时两个请求同时到来，其中一个请求执行到上图的第3步，更新数据库的库存为0，但是第4步还没有执行。</p><p>而另外一个请求执行到了第2步，发现库存还是1，就继续执行第3步。</p><p>这样的结果，是导致卖出了2个商品，然而其实库存只有1个。</p><p>很明显不对啊！这就是典型的<strong>库存超卖问题</strong></p><p>此时，我们很容易想到解决方案：用锁把2、3、4步锁住，让他们执行完之后，另一个线程才能进来执行第2步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单*lock*| B[系统A]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">B--&gt;|5.继续执行*unlock*| E[后续业务逻辑]</span><br></pre></td></tr></table></figure><p>按照上面的图，在执行第2步时，使用Java提供的synchronized或者ReentrantLock来锁住，然后在第4步执行完之后才释放锁。</p><p>这样一来，2、3、4 这3个步骤就被“锁”住了，多个线程之间只能串行化执行。关注公众号互联网架构师，回复关键字2T，获取最新架构视频</p><p>但是好景不长，整个系统的并发飙升，一台机器扛不住了。现在要增加一台机器，如下图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单*lock*| B[系统A]</span><br><span class="line"></span><br><span class="line">B--&gt;|5.继续执行*unlock*| E[后续业务逻辑]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">F(用户)--&gt;|1.下订单*lock*| G[系统A]</span><br><span class="line">G--&gt;|2.检查库存| C[Redis]</span><br><span class="line">G--&gt;|4.更新库存数量| C</span><br><span class="line">G--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">G--&gt;|5.继续执行*unlock*| J[后续业务逻辑]</span><br></pre></td></tr></table></figure><p>增加机器之后，系统变成上图所示，我的天！</p><p>假设此时两个用户的请求同时到来，但是落在了不同的机器上，那么这两个请求是可以同时执行了，还是会出现<strong>库存超卖</strong>的问题。</p><p>为什么呢？因为上图中的两个A系统，运行在两个不同的JVM里面，他们加的锁只对属于自己JVM里面的线程有效，对于其他JVM的线程是无效的。</p><p>因此，这里的问题是：Java提供的原生锁机制在多机部署场景下失效了</p><p>这是因为两台机器加的锁不是同一个锁(两个锁在不同的JVM里面)。</p><p>那么，我们只要保证两台机器加的锁是同一个锁，问题不就解决了吗？</p><p>此时，就该<strong>分布式锁</strong>隆重登场了，分布式锁的思路是：</p><p>在整个系统提供一个<strong>全局、唯一</strong>的获取锁的“东西”，然后每个系统在需要加锁时，都去问这个“东西”拿到一把锁，这样不同的系统拿到的就可以认为是同一把锁。</p><p>至于这个“东西”，可以是Redis、Zookeeper，也可以是数据库。</p><p>通过上面的分析，我们知道了库存超卖场景在分布式部署系统的情况下使用Java原生的锁机制无法保证线程安全，所以我们需要用到分布式锁的方案。</p><p>那么，如何实现分布式锁呢？接着往下看！</p><h2 id="基于Redis实现分布式锁"><a href="#基于Redis实现分布式锁" class="headerlink" title="基于Redis实现分布式锁"></a>基于Redis实现分布式锁</h2><p>上面分析为啥要使用分布式锁了，这里我们来具体看看分布式锁落地的时候应该怎么样处理。扩展：<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247493252&idx=2&sn=5530b330af0e0bcb56f9cc8bd7d0a25d&chksm=ebd5d9a8dca250be07d54c37110fcc2549cb31968557910a77485747d9cb9ee842a2f05c25dc&scene=21#wechat_redirect" target="_blank" rel="noopener">Redisson是如何实现分布式锁的？</a></p><p>最常见的一种方案就是使用Redis做分布式锁</p><p>使用Redis做分布式锁的思路大概是这样的：在redis中设置一个值表示加了锁，然后释放锁的时候就把这个key删除。</p><p>具体代码是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取锁</span><br><span class="line">&#x2F;&#x2F; NX是指如果key不存在就成功，key存在返回false，PX可以指定过期时间</span><br><span class="line">SET anyLock unique_value NX PX 30000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 释放锁：通过执行一段lua脚本</span><br><span class="line">&#x2F;&#x2F; 释放锁涉及到两条指令，这两条指令不是原子性的</span><br><span class="line">&#x2F;&#x2F; 需要用到redis的lua脚本支持特性，redis执行lua脚本是原子性的</span><br><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then</span><br><span class="line">return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这种方式有几大要点：</p><ul><li><p><strong>一定要用SET key value NX PX milliseconds 命令</strong></p><p>如果不用，先设置了值，再设置过期时间，这个不是原子性操作，有可能在设置过期时间之前宕机，会造成死锁(key永久存在)</p></li><li><p><strong>value要具有唯一性</strong></p><p>这个是为了在解锁的时候，需要验证value是和加锁的一致才删除key。</p><p>这是避免了一种情况：假设A获取了锁，过期时间30s，此时35s之后，锁已经自动释放了，A去释放锁，但是此时可能B获取了锁。A客户端就不能删除B的锁了。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[系统A] --&gt;|1.获取一把锁| B(redis master)</span><br><span class="line">C[系统B] --&gt;|2.获取锁失败.每隔一秒自动尝试再次获取锁| B</span><br><span class="line">C--&gt;|3. 等待别人释放锁或者锁的key自动过期才能获取锁|B</span><br><span class="line">B--&gt;D(redis slave)</span><br></pre></td></tr></table></figure><p>除了要考虑客户端要怎么实现分布式锁之外，还需要考虑redis的部署问题。</p><p>redis有3种部署方式：</p><ul><li>单机模式</li><li>master-slave + sentinel选举模式</li><li>redis cluster模式</li></ul><p>使用redis做分布式锁的缺点在于：如果采用单机部署模式，会存在单点问题，只要redis故障了。加锁就不行了。</p><p>采用master-slave模式，加锁的时候只对一个节点加锁，即便通过sentinel做了高可用，但是如果master节点故障了，发生主从切换，此时就会有可能出现锁丢失的问题。</p><p>基于以上的考虑，其实redis的作者也考虑到这个问题，他提出了一个RedLock的算法，这个算法的意思大概是这样的：</p><p>假设redis的部署模式是redis cluster，总共有5个master节点，通过以下步骤获取一把锁：</p><ul><li>获取当前时间戳，单位是毫秒</li><li>轮流尝试在每个master节点上创建锁，过期时间设置较短，一般就几十毫秒</li><li>尝试在大多数节点上建立一个锁，比如5个节点就要求是3个节点（n / 2 +1）</li><li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了</li><li>要是锁建立失败了，那么就依次删除这个锁</li><li>只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁</li></ul><p>但是这样的这种算法还是颇具争议的，可能还会存在不少的问题，无法保证加锁的过程一定正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[系统A]--&gt;B(redis master)</span><br><span class="line">A --&gt; C(redis master)</span><br><span class="line">A --&gt; D(redis master)</span><br><span class="line">A --&gt; E(redis master)</span><br><span class="line">A --&gt; F(redis master)</span><br><span class="line">B --&gt; G(redis slave)</span><br><span class="line">C --&gt; H(redis slave)</span><br><span class="line">D --&gt; I(redis slave)</span><br><span class="line">E --&gt; J(redis slave)</span><br><span class="line">F --&gt; K(redis slave)</span><br></pre></td></tr></table></figure><h3 id="另一种方式：Redisson"><a href="#另一种方式：Redisson" class="headerlink" title="另一种方式：Redisson"></a>另一种方式：Redisson</h3><p>此外，实现Redis的分布式锁，除了自己基于redis client原生api来实现之外，还可以使用开源框架：Redission</p><p>Redisson是一个企业级的开源Redis Client，也提供了分布式锁的支持。我也非常推荐大家使用，为什么呢？</p><p>回想一下上面说的，如果自己写代码来通过redis设置一个值，是通过下面这个命令设置的。</p><ul><li>SET anyLock unique_value NX PX 30000</li></ul><p>这里设置的超时时间是30s，假如我超过30s都还没有完成业务逻辑的情况下，key会过期，其他线程有可能会获取到锁。</p><p>这样一来的话，第一个线程还没执行完业务逻辑，第二个线程进来了也会出现线程安全问题。所以我们还需要额外的去维护这个过期时间，太麻烦了~</p><p>我们来看看redisson是怎么实现的？先感受一下使用redission的爽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Config config &#x3D; new Config();</span><br><span class="line">config.useClusterServers()</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7001&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7002&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7003&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7001&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7002&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7003&quot;);</span><br><span class="line"></span><br><span class="line">RedissonClient redisson &#x3D; Redisson.create(config);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RLock lock &#x3D; redisson.getLock(&quot;anyLock&quot;);</span><br><span class="line">lock.lock();</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><p>就是这么简单，我们只需要通过它的api中的lock和unlock即可完成分布式锁，他帮我们考虑了很多细节：</p><ul><li><p>redisson所有指令都通过lua脚本执行，redis支持lua脚本原子性执行</p></li><li><p>redisson设置一个key的默认过期时间为30s,如果某个客户端持有一个锁超过了30s怎么办？</p><p>redisson中有一个<code>watchdog</code>的概念，翻译过来就是看门狗，它会在你获取锁之后，每隔10秒帮你把key的超时时间设为30s</p><p>这样的话，就算一直持有锁也不会出现key过期了，其他线程获取到锁的问题了。</p></li><li><p>redisson的“看门狗”逻辑保证了没有死锁发生。</p><p>(如果机器宕机了，看门狗也就没了。此时就不会延长key的过期时间，到了30s之后就会自动过期了，其他线程可以获取到锁)</p></li></ul><p>这里稍微贴出来其实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加锁逻辑</span><br><span class="line">private &lt;T&gt; RFuture&lt;Long&gt; tryAcquireAsync(long leaseTime, TimeUnit unit, final long threadId) &#123;</span><br><span class="line">    if (leaseTime !&#x3D; -1) &#123;</span><br><span class="line">        return tryLockInnerAsync(leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 调用一段lua脚本，设置一些key、过期时间</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture &#x3D; tryLockInnerAsync(commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(), TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    ttlRemainingFuture.addListener(new FutureListener&lt;Long&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void operationComplete(Future&lt;Long&gt; future) throws Exception &#123;</span><br><span class="line">            if (!future.isSuccess()) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Long ttlRemaining &#x3D; future.getNow();</span><br><span class="line">            &#x2F;&#x2F; lock acquired</span><br><span class="line">            if (ttlRemaining &#x3D;&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; 看门狗逻辑</span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return ttlRemainingFuture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;T&gt; RFuture&lt;T&gt; tryLockInnerAsync(long leaseTime, TimeUnit unit, long threadId, RedisStrictCommand&lt;T&gt; command) &#123;</span><br><span class="line">    internalLockLeaseTime &#x3D; unit.toMillis(leaseTime);</span><br><span class="line"></span><br><span class="line">    return commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">              &quot;if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;hset&#39;, KEYS[1], ARGV[2], 1); &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot; +</span><br><span class="line">                  &quot;return nil; &quot; +</span><br><span class="line">              &quot;end; &quot; +</span><br><span class="line">              &quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[2], 1); &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot; +</span><br><span class="line">                  &quot;return nil; &quot; +</span><br><span class="line">              &quot;end; &quot; +</span><br><span class="line">              &quot;return redis.call(&#39;pttl&#39;, KEYS[1]);&quot;,</span><br><span class="line">                Collections.&lt;Object&gt;singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 看门狗最终会调用了这里</span><br><span class="line">private void scheduleExpirationRenewal(final long threadId) &#123;</span><br><span class="line">    if (expirationRenewalMap.containsKey(getEntryName())) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个任务会延迟10s执行</span><br><span class="line">    Timeout task &#x3D; commandExecutor.getConnectionManager().newTimeout(new TimerTask() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run(Timeout timeout) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 这个操作会将key的过期时间重新设置为30s</span><br><span class="line">            RFuture&lt;Boolean&gt; future &#x3D; renewExpirationAsync(threadId);</span><br><span class="line"></span><br><span class="line">            future.addListener(new FutureListener&lt;Boolean&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(Future&lt;Boolean&gt; future) throws Exception &#123;</span><br><span class="line">                    expirationRenewalMap.remove(getEntryName());</span><br><span class="line">                    if (!future.isSuccess()) &#123;</span><br><span class="line">                        log.error(&quot;Can&#39;t update lock &quot; + getName() + &quot; expiration&quot;, future.cause());</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (future.getNow()) &#123;</span><br><span class="line">                        &#x2F;&#x2F; reschedule itself</span><br><span class="line">                        &#x2F;&#x2F; 通过递归调用本方法，无限循环延长过期时间</span><br><span class="line">                        scheduleExpirationRenewal(threadId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, internalLockLeaseTime &#x2F; 3, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    if (expirationRenewalMap.putIfAbsent(getEntryName(), new ExpirationEntry(threadId, task)) !&#x3D; null) &#123;</span><br><span class="line">        task.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，redisson还提供了对redlock算法的支持,</p><p>它的用法也很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RedissonClient redisson &#x3D; Redisson.create(config);</span><br><span class="line">RLock lock1 &#x3D; redisson.getFairLock(&quot;lock1&quot;);</span><br><span class="line">RLock lock2 &#x3D; redisson.getFairLock(&quot;lock2&quot;);</span><br><span class="line">RLock lock3 &#x3D; redisson.getFairLock(&quot;lock3&quot;);</span><br><span class="line">RedissonRedLock multiLock &#x3D; new RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line">multiLock.lock();</span><br><span class="line">multiLock.unlock();</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><p>本节分析了使用redis作为分布式锁的具体落地方案</p><p>以及其一些局限性</p><p>然后介绍了一个redis的客户端框架redisson，</p><p>这也是我推荐大家使用的，</p><p>比自己写代码实现会少care很多细节。</p><h2 id="基于zookeeper实现分布式锁"><a href="#基于zookeeper实现分布式锁" class="headerlink" title="基于zookeeper实现分布式锁"></a>基于zookeeper实现分布式锁</h2><p>常见的分布式锁实现方案里面，除了使用redis来实现之外，使用zookeeper也可以实现分布式锁。</p><p>在介绍zookeeper(下文用zk代替)实现分布式锁的机制之前，先粗略介绍一下zk是什么东西：</p><p>Zookeeper是一种提供配置管理、分布式协同以及命名的中心化服务。</p><p>zk的模型是这样的：zk包含一系列的节点，叫做znode，就好像文件系统一样每个znode表示一个目录，然后znode有一些特性：</p><ul><li><p><strong>有序节点</strong>：假如当前有一个父节点为<code>/lock</code>，我们可以在这个父节点下面创建子节点；</p><p>zookeeper提供了一个可选的有序特性，例如我们可以创建子节点“/lock/node-”并且指明有序，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号</p><p>也就是说，如果是第一个创建的子节点，那么生成的子节点为<code>/lock/node-0000000000</code>，下一个节点则为<code>/lock/node-0000000001</code>，依次类推。</p></li></ul><ul><li><p><strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p></li><li><p><strong>事件监听</strong>：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件：</p></li><li><ul><li>节点创建</li><li>节点删除</li><li>节点数据修改</li><li>子节点变更</li></ul></li></ul><p>基于以上的一些zk的特性，我们很容易得出使用zk实现分布式锁的落地方案：</p><ol><li><p>使用zk的临时节点和有序节点，每个线程获取锁就是在zk创建一个临时有序的节点，比如在/lock/目录下。</p></li><li><p>创建节点成功后，获取/lock目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点</p></li><li><p>如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。</p></li><li><p>如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的前一个节点添加一个事件监听。</p><p>比如当前线程获取到的节点序号为<code>/lock/003</code>,然后所有的节点列表为<code>[/lock/001,/lock/002,/lock/003]</code>,则对<code>/lock/002</code>这个节点添加一个事件监听器。</p></li></ol><p>如果锁释放了，会唤醒下一个序号的节点，然后重新执行第3步，判断是否自己的节点序号是最小。</p><p>比如<code>/lock/001</code>释放了，<code>/lock/002</code>监听到时间，此时节点集合为<code>[/lock/002,/lock/003]</code>,则<code>/lock/002</code>为最小序号节点，获取到锁。</p><p>整个过程如下：</p><p><img src="http://img.baixixi.xyz/1595900670381.png" alt="t"></p><p>具体的实现思路就是这样，至于代码怎么写，这里比较复杂就不贴出来了。</p><h3 id="Curator介绍"><a href="#Curator介绍" class="headerlink" title="Curator介绍"></a>Curator介绍</h3><p>Curator是一个zookeeper的开源客户端，也提供了分布式锁的实现。</p><p>他的使用方式也比较简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InterProcessMutex interProcessMutex &#x3D; new InterProcessMutex(client,&quot;&#x2F;anyLock&quot;);</span><br><span class="line">interProcessMutex.acquire();</span><br><span class="line">interProcessMutex.release();</span><br></pre></td></tr></table></figure><p>其实现分布式锁的核心源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private boolean internalLockLoop(long startMillis, Long millisToWait, String ourPath) throws Exception</span><br><span class="line">&#123;</span><br><span class="line">    boolean  haveTheLock &#x3D; false;</span><br><span class="line">    boolean  doDelete &#x3D; false;</span><br><span class="line">    try &#123;</span><br><span class="line">        if ( revocable.get() !&#x3D; null ) &#123;</span><br><span class="line">            client.getData().usingWatcher(revocableWatcher).forPath(ourPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while ( (client.getState() &#x3D;&#x3D; CuratorFrameworkState.STARTED) &amp;&amp; !haveTheLock ) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取当前所有节点排序后的集合</span><br><span class="line">            List&lt;String&gt;        children &#x3D; getSortedChildren();</span><br><span class="line">            &#x2F;&#x2F; 获取当前节点的名称</span><br><span class="line">            String              sequenceNodeName &#x3D; ourPath.substring(basePath.length() + 1); &#x2F;&#x2F; +1 to include the slash</span><br><span class="line">            &#x2F;&#x2F; 判断当前节点是否是最小的节点</span><br><span class="line">            PredicateResults    predicateResults &#x3D; driver.getsTheLock(client, children, sequenceNodeName, maxLeases);</span><br><span class="line">            if ( predicateResults.getsTheLock() ) &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取到锁</span><br><span class="line">                haveTheLock &#x3D; true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 没获取到锁，对当前节点的上一个节点注册一个监听器</span><br><span class="line">                String  previousSequencePath &#x3D; basePath + &quot;&#x2F;&quot; + predicateResults.getPathToWatch();</span><br><span class="line">                synchronized(this)&#123;</span><br><span class="line">                    Stat stat &#x3D; client.checkExists().usingWatcher(watcher).forPath(previousSequencePath);</span><br><span class="line">                    if ( stat !&#x3D; null )&#123;</span><br><span class="line">                        if ( millisToWait !&#x3D; null )&#123;</span><br><span class="line">                            millisToWait -&#x3D; (System.currentTimeMillis() - startMillis);</span><br><span class="line">                            startMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">                            if ( millisToWait &lt;&#x3D; 0 )&#123;</span><br><span class="line">                                doDelete &#x3D; true;    &#x2F;&#x2F; timed out - delete our node</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            wait(millisToWait);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            wait();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; else it may have been deleted (i.e. lock released). Try to acquire again</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch ( Exception e ) &#123;</span><br><span class="line">        doDelete &#x3D; true;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; finally&#123;</span><br><span class="line">        if ( doDelete )&#123;</span><br><span class="line">            deleteOurPath(ourPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return haveTheLock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实curator实现分布式锁的底层原理和上面分析的是差不多的。这里我们用一张图详细描述其原理：</p><p><img src="http://img.baixixi.xyz/1595900747837.png" alt="w"></p><p>小结：</p><p>本节介绍了zookeeperr实现分布式锁的方案以及zk的开源客户端的基本使用，简要的介绍了其实现原理。</p><h2 id="两种方案的优缺点比较"><a href="#两种方案的优缺点比较" class="headerlink" title="两种方案的优缺点比较"></a>两种方案的优缺点比较</h2><p>学完了两种分布式锁的实现方案之后，本节需要讨论的是redis和zk的实现方案中各自的优缺点。</p><p>对于redis的分布式锁而言，它有以下缺点：</p><ul><li>它获取锁的方式简单粗暴，获取不到锁直接不断尝试获取锁，比较消耗性能。</li><li>另外来说的话，redis的设计定位决定了它的数据并不是强一致性的，在某些极端情况下，可能会出现问题。锁的模型不够健壮</li><li>即便使用redlock算法来实现，在某些复杂场景下，也无法保证其实现100%没有问题，关于redlock的讨论可以看How to do distributed locking</li><li>redis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能。</li></ul><p>但是另一方面使用redis实现分布式锁在很多企业中非常常见，而且大部分情况下都不会遇到所谓的“极端复杂场景”</p><p>所以使用redis作为分布式锁也不失为一种好的方案，最重要的一点是redis的性能很高，可以支撑高并发的获取、释放锁操作。</p><p>对于zk分布式锁而言:</p><ul><li>zookeeper天生设计定位就是分布式协调，强一致性。锁的模型健壮、简单易用、适合做分布式锁。</li><li>如果获取不到锁，只需要添加一个监听器就可以了，不用一直轮询，性能消耗较小。</li></ul><p>但是zk也有其缺点：如果有较多的客户端频繁的申请加锁、释放锁，对于zk集群的压力会比较大。</p><p><strong>小结：</strong></p><p>综上所述，redis和zookeeper都有其优缺点。我们在做技术选型的时候可以根据这些问题作为参考因素。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>通过前面的分析，实现分布式锁的两种常见方案：redis和zookeeper，他们各有千秋。应该如何选型呢？</p><p>就个人而言的话，<strong>我比较推崇zk实现的锁：</strong></p><p>因为redis是有可能存在隐患的，可能会导致数据不对的情况。但是，怎么选用要看具体在公司的场景了。</p><p>如果公司里面有zk集群条件，优先选用zk实现，但是如果说公司里面只有redis集群，没有条件搭建zk集群。</p><p>那么其实用redis来实现也可以，另外还可能是系统设计者考虑到了系统已经有redis，但是又不希望再次引入一些外部依赖的情况下，可以选用redis。</p><p>这个是要系统设计者基于架构的考虑了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么用分布式锁？&quot;&gt;&lt;a href=&quot;#为什么用分布式锁？&quot; class=&quot;headerlink&quot; title=&quot;为什么用分布式锁？&quot;&gt;&lt;/a&gt;为什么用分布式锁？&lt;/h2&gt;&lt;p&gt;在讨论这个问题之前，我们先来看一个业务场景：&lt;/p&gt;
&lt;p&gt;系统A是一个电商系统，目前是一台机器部署，系统中有一个用户下订单的接口，但是用户下订单之前一定要去检查一下库存，确保库存足够了才会给用户下单。&lt;/p&gt;
&lt;p&gt;由于系统有一定的并发，所以会预先将商品的库存保存在redis中，用户下单的时候会更新redis的库存。&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="https://baiyu128.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="redis" scheme="https://baiyu128.github.io/tags/redis/"/>
    
      <category term="分布式锁" scheme="https://baiyu128.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>基于AOP和redis实现接口锁</title>
    <link href="https://baiyu128.github.io/2020/07/24/%E5%9F%BA%E4%BA%8EAOP%E5%92%8Credis%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E9%94%81/"/>
    <id>https://baiyu128.github.io/2020/07/24/%E5%9F%BA%E4%BA%8EAOP%E5%92%8Credis%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E9%94%81/</id>
    <published>2020-07-24T08:47:45.000Z</published>
    <updated>2020-07-24T09:21:44.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一些新增接口或者更新接口中，由于服务器可能反应稍微有点延迟，导致同一个操作被发送多次让服务器执行，为了实现接口的幂等性，使用redis锁来实现，为了方便在多个接口实现该功能，使用aop来实现加锁。</p><p>该方法适用于单个服务的项目。</p></blockquote><a id="more"></a><h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于操作redis，在使用前，需要根据项目判断是否自定义redisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stringTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"memberTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Member&gt; <span class="title">memberRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Member&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> FastJsonRedisSerializer&lt;&gt;(Member<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、定义切点注解"><a href="#二、定义切点注解" class="headerlink" title="二、定义切点注解"></a>二、定义切点注解</h3><p>此注解添加在需要加锁的方法上，根据需要添加参数，该参数用于生成锁的key值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 被此注解标注的方法，将被使用redis的接口锁，用于aop对方法的识别</span><br><span class="line"> * @author baiyu</span><br><span class="line"> * @data 2020-07-08 15:39</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface ApiLock &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 如果type是直接参数，那么，直接从此获取参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String[] paramNames();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  是直接参数还是间接参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    ApiLockEnum type();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 如果不是直接参数@ApiLockEnum.UNDIRECT,就先找到此参数，在从此参数中获取上面paramNames的具体参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String outerParam() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于标记直接参数或者间接参数的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ApiLockEnum &#123;</span><br><span class="line">    DIRECT, UNDIRECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h3><p>实现加锁解锁的aop主逻辑，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口redis锁的aop，redis锁的获取与释放的统一管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengguochun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-07-08 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiLockAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"stringTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CURRENT_AOP_TYPE_PREFIX = <span class="string">"ApiLock AOP : "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.ymkj.property.annotation.ApiLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cutApiLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"cutApiLock()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"in aop "</span>);</span><br><span class="line">        MethodSignature signature =(MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="comment">// 1. 获取propertyId</span></span><br><span class="line">        Class targetClass = pjp.getTarget().getClass();</span><br><span class="line">        Class superClass = targetClass.getSuperclass();</span><br><span class="line">        Field field = superClass.getDeclaredField(<span class="string">"propertyId"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object propertyIdObj = field.get(pjp.getTarget());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == propertyIdObj)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PROPERTY_ID_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        Integer propertyId = (Integer) propertyIdObj;</span><br><span class="line">        <span class="comment">// 2. 获取ApiLock注解中的参数，判断是否是直接参数</span></span><br><span class="line">        ApiLock apiLock = signature.getMethod().getAnnotation(ApiLock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3. 获取ParameterName , args，根据ApiLock中的参数获取参数名</span></span><br><span class="line">        String[] parameterNames = signature.getParameterNames();</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        List&lt;String&gt; paraNames = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(apiLock.paramNames()));</span><br><span class="line">        List&lt;String&gt; finalResult = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (ApiLockEnum.DIRECT.equals(apiLock.type()))&#123;</span><br><span class="line">            <span class="comment">// 2.1 是直接参数， 则直接去方法参数中取</span></span><br><span class="line">            <span class="keyword">int</span> paramSize = parameterNames.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramSize; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (paraNames.contains(parameterNames[i]))&#123;</span><br><span class="line">                    finalResult.add(args[i].toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 2.2 不是直接参数，则先去apiLock.outerParam中取参数</span></span><br><span class="line">            String outerParam = apiLock.outerParam();</span><br><span class="line">            <span class="keyword">int</span> paramSize = parameterNames.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramSize; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (outerParam.equals(parameterNames[i]))&#123;</span><br><span class="line">                     Object outerParamObject = args[i];</span><br><span class="line">                    <span class="keyword">for</span> (String paraName : paraNames) &#123;</span><br><span class="line">                        Field currentParam = outerParamObject.getClass().getDeclaredField(paraName);</span><br><span class="line">                        currentParam.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        Object paramObj = currentParam.get(outerParamObject);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != paramObj)&#123;</span><br><span class="line">                            finalResult.add(paramObj.toString());</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            log.error(<span class="string">"param &#123;&#125; 为空"</span>, paraName);</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PARAMETER_NULL_EXCEPTION);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String redisKey = RedisDistributedLock.generateApiKey(propertyId, finalResult);</span><br><span class="line">        log.info(<span class="string">"redis key : &#123;&#125;"</span>, redisKey);</span><br><span class="line">        <span class="comment">// 5. 将参数传入acquireLock方法，加锁</span></span><br><span class="line">        RedisDistributedLock redisDistributedLock = <span class="keyword">new</span> RedisDistributedLock(redisTemplate,redisKey);</span><br><span class="line">        String result = redisDistributedLock.aquireNeverWaitLock();</span><br><span class="line">        log.info(<span class="string">"get lock result : &#123;&#125;"</span>, result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == result)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.CHECK_IN_HANDLING);</span><br><span class="line">        &#125;</span><br><span class="line">        Object response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 6. 执行接口</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"开始执行接口"</span>);</span><br><span class="line">            response = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125;, message &#123;&#125;"</span>, CURRENT_AOP_TYPE_PREFIX , throwable.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopException(ResponseBase.expectationFailed(throwable.getMessage()));</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.info(<span class="string">"release lock"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> re = redisDistributedLock.release();</span><br><span class="line">            <span class="keyword">if</span> (re)&#123;</span><br><span class="line">                log.info(<span class="string">"释放成功"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"释放失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、redis锁的工具类"><a href="#四、redis锁的工具类" class="headerlink" title="四、redis锁的工具类"></a>四、redis锁的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_PREFIX = <span class="string">"redis_lock-"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MANEUVER_SLEEP_TIME = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BATCH_CHECK_KEY = <span class="string">"batchCheckMember-"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_CHECK_KEY = <span class="string">"api_key-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> expireTime = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> acquireTimeout = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEVER_WAIT_LOCK_EXPIRE_TIME = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPARE_AND_DELETE =</span><br><span class="line">            <span class="string">"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else  return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁成功返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_LOCK_SUCCESS_RESULT = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey, <span class="keyword">int</span> acquireTimeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">        <span class="keyword">this</span>.acquireTimeout = acquireTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey, <span class="keyword">int</span> acquireTimeout, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">        <span class="keyword">this</span>.acquireTimeout = acquireTimeout;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> RedisDistributedLockException </span>&#123;</span><br><span class="line">            <span class="comment">// 获取锁的超时时间，超过这个时间则放弃获取锁</span></span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis() + acquireTimeout;</span><br><span class="line">            <span class="comment">// 随机生成一个value</span></span><br><span class="line">            value = lockKey;</span><br><span class="line">            <span class="keyword">while</span> (System.currentTimeMillis() &lt; end) &#123;</span><br><span class="line">                <span class="comment">//String result = redisTemplate.set(lockKey, requireToken, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span></span><br><span class="line">                Boolean result = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = template.opsForValue().setIfAbsent(lockKey ,value, expireTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"acquire lock due to error "</span>, e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_ACQUIRE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    log.info(<span class="string">"&#123;&#125; acquire lock"</span>, lockKey);</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(MANEUVER_SLEEP_TIME);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> RedisDistributedLockException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; keys = Collections.singletonList(lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(COMPARE_AND_DELETE, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Long result = template.execute(redisScript,keys, value);</span><br><span class="line">            log.info(<span class="string">"结果 &#123;&#125;"</span>, result);</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(result, RELEASE_LOCK_SUCCESS_RESULT))&#123;</span><br><span class="line">                log.info(<span class="string">"&#123;&#125; release lock"</span>, lockKey);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_RELEASE_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不等待，不block的排他锁，有人拿到锁之后，在持有锁的期间，其他人不可以拿到锁，等待主动释放或者超时</span></span><br><span class="line"><span class="comment">     * 超时时间6个小时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">aquireNeverWaitLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Boolean result = <span class="keyword">false</span>;</span><br><span class="line">        value = lockKey;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = template.opsForValue().setIfAbsent(lockKey ,value, NEVER_WAIT_LOCK_EXPIRE_TIME, TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"acquire lock due to error "</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_ACQUIRE_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result)&#123;</span><br><span class="line">            <span class="keyword">return</span> lockKey;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateKey</span><span class="params">(Integer propertyId, String openId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//return new StringBuilder(REDIS_LOCK_PREFIX).append(propertyId.toString()).append("-").append(openId).toString();</span></span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + propertyId + <span class="string">"-"</span> + openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateBatchKey</span><span class="params">(<span class="keyword">int</span> propertyId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + BATCH_CHECK_KEY + propertyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateApiKey</span><span class="params">(<span class="keyword">int</span> propertyId, List&lt;String&gt; param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == param || param.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PARAMETER_NULL_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ids = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String oneId : param) &#123;</span><br><span class="line">            ids.append(oneId);</span><br><span class="line">        &#125;</span><br><span class="line">        String finalStr = <span class="string">""</span>;</span><br><span class="line">        log.info(<span class="string">"origin param : &#123;&#125;"</span>, ids.toString());</span><br><span class="line">        <span class="keyword">if</span> (ids.length() &gt; <span class="number">32</span>)&#123;</span><br><span class="line">            finalStr = DigestUtils.md5DigestAsHex(ids.toString().getBytes());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            finalStr = ids.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + API_CHECK_KEY + propertyId + <span class="string">"_"</span> + finalStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在一些新增接口或者更新接口中，由于服务器可能反应稍微有点延迟，导致同一个操作被发送多次让服务器执行，为了实现接口的幂等性，使用redis锁来实现，为了方便在多个接口实现该功能，使用aop来实现加锁。&lt;/p&gt;
&lt;p&gt;该方法适用于单个服务的项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="AOP" scheme="https://baiyu128.github.io/categories/AOP/"/>
    
    
      <category term="AOP" scheme="https://baiyu128.github.io/tags/AOP/"/>
    
      <category term="redis" scheme="https://baiyu128.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 文本处理工具集锦</title>
    <link href="https://baiyu128.github.io/2020/07/16/Linux-Shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/"/>
    <id>https://baiyu128.github.io/2020/07/16/Linux-Shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/</id>
    <published>2020-07-16T05:43:10.000Z</published>
    <updated>2020-07-16T06:32:58.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.baixixi.xyz/1585831666724.jpg" alt="tu"></p><p>【转】本文将介绍Linux下使用Shell处理文本时最常用的工具：</p><p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p><p>提供的例子和参数都是最常用和最为实用的；</p><p>对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p><p>如果有更为复杂的任务需求，还是考虑python吧；</p><a id="more"></a><h3 id="01-find-文件查找"><a href="#01-find-文件查找" class="headerlink" title="01 find 文件查找"></a>01 find 文件查找</h3><p>1 查找txt和pdf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . ( -name "*.txt"-o -name "*.pdf") -print</span><br></pre></td></tr></table></figure><p>2 正则方式查找.txt和pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -regex  ".*(.txt|.pdf)$"</span><br></pre></td></tr></table></figure><p>-iregex：忽略大小写的正则</p><p>3 否定参数</p><p>查找所有非txt文本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . ! -name "*.txt"-print</span><br></pre></td></tr></table></figure><p>4 指定搜索深度</p><p>打印出当前目录的文件（深度为1）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -maxdepth 1-type f</span><br></pre></td></tr></table></figure><p>5 定制搜索</p><p>按类型搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type d -print  //只列出所有目录-type f 文件 / l 符号链接</span><br></pre></td></tr></table></figure><p>按时间搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</span><br><span class="line">-mtime 修改时间 （内容被修改）</span><br><span class="line">-ctime 变化时间 （元数据或权限变化）</span><br></pre></td></tr></table></figure><p>最近7天被访问过的所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -atime 7-type f -print</span><br></pre></td></tr></table></figure><p>按大小搜索：</p><p>w字 k M G</p><p>寻找大于2k的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -size +2k</span><br></pre></td></tr></table></figure><p>按权限查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -perm 644-print //找具有可执行权限的所有文件</span><br></pre></td></tr></table></figure><p>按用户查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -user weber -print// 找用户weber所拥有的文件</span><br></pre></td></tr></table></figure><p>6 找到后的后续动作</p><p>删除：</p><p>删除当前目录下所有的swp文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name "*.swp"-delete</span><br></pre></td></tr></table></figure><p>执行动作（强大的exec）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -user root -exec chown weber &#123;&#125; ; //将当前目录下的所有权变更为weber</span><br></pre></td></tr></table></figure><p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；</p><p>eg：将找到的文件全都copy到另一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -mtime +10-name "*.txt"-exec cp &#123;&#125; OLD ;</span><br></pre></td></tr></table></figure><p>7 结合多个命令</p><p>tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-exec ./commands.sh &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>-print的定界符</p><p>默认使用’ ‘作为文件的定界符；</p><p>-print0 使用’’作为文件的定界符，这样就可以搜索包含空格的文件；</p><h3 id="02-grep-文本搜索"><a href="#02-grep-文本搜索" class="headerlink" title="02 grep 文本搜索"></a>02 grep 文本搜索</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep match_patten file // 默认访问匹配行</span><br></pre></td></tr></table></figure><p>常用参数:</p><ul><li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li><li>-c 统计文件中包含文本的次数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c "text" filename</span><br></pre></td></tr></table></figure><ul><li>-n 打印匹配的行号</li><li>-i 搜索时忽略大小写</li><li>-l 只打印文件名</li></ul><p>1 在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep "class". -R -n</span><br></pre></td></tr></table></figure><p>2 匹配多个模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -e "class"-e "vitural" file</span><br></pre></td></tr></table></figure><p>3 grep输出以作为结尾符的文件名：（-z）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep "test" file* -lZ| xargs -0 rm</span><br></pre></td></tr></table></figure><p>4 xargs 命令行参数转换</p><p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；</p><p>将多行输出转化为单行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt| xargs</span><br></pre></td></tr></table></figure><p>是多行文本间的定界符</p><p>将单行转化为多行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat single.txt | xargs -n 3</span><br></pre></td></tr></table></figure><p>-n：指定每行显示的字段数</p><p>xargs参数说明</p><ul><li>-d 定义定界符 （默认为空格 多行的定界符为 ）</li><li>-n 指定输出为多行</li><li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1</span><br></pre></td></tr></table></figure><p>-0：指定为输入定界符</p><p>eg：统计程序行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find source_dir/ -type f -name "*.cpp"-print0 |xargs -0 wc -l</span><br></pre></td></tr></table></figure><h3 id="03-sort-排序"><a href="#03-sort-排序" class="headerlink" title="03 sort 排序"></a>03 sort 排序</h3><p>字段说明：</p><ul><li>-n 按数字进行排序 VS -d 按字典序进行排序</li><li>-r 逆序排序</li><li>-k N 指定按第N列排序</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -nrk 1 data.txtsort -bd data // 忽略像空格之类的前导空白字符</span><br></pre></td></tr></table></figure><h3 id="04-uniq-消除重复行"><a href="#04-uniq-消除重复行" class="headerlink" title="04 uniq 消除重复行"></a>04 uniq 消除重复行</h3><p>消除重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq</span><br></pre></td></tr></table></figure><p>统计各行在文件中出现的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq -c</span><br></pre></td></tr></table></figure><p>找出重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort unsort.txt | uniq -d</span><br></pre></td></tr></table></figure><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p><h3 id="05-用-tr-进行转换"><a href="#05-用-tr-进行转换" class="headerlink" title="05 用 tr 进行转换"></a>05 用 tr 进行转换</h3><p>通用用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 12345| tr '0-9''9876543210'//加解密转换，替换对应字符cat text| tr '    '' '//制表符转空格</span><br></pre></td></tr></table></figure><p>tr删除字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file | tr -d '0-9'// 删除所有数字</span><br></pre></td></tr></table></figure><p>-c 求补集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file | tr -c '0-9'//获取文件中所有数字cat file | tr -d -c '0-9 '//删除非数字数据</span><br></pre></td></tr></table></figure><p>tr压缩字符</p><p>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file | tr -s ' '</span><br></pre></td></tr></table></figure><p>字符类</p><p>tr中可用各种字符类：</p><ul><li>alnum：字母和数字</li><li>alpha：字母</li><li>digit：数字</li><li>space：空白字符</li><li>lower：小写</li><li>upper：大写</li><li>cntrl：控制（非可打印）字符</li></ul><p>print：可打印字符</p><p>使用方法：<code>tr [:class:] [:class:]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: tr '[:lower:]''[:upper:]'</span><br></pre></td></tr></table></figure><h3 id="06-cut-按列切分文本"><a href="#06-cut-按列切分文本" class="headerlink" title="06 cut 按列切分文本"></a>06 cut 按列切分文本</h3><p>截取文件的第2列和第4列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -f2,4 filename</span><br></pre></td></tr></table></figure><p>去文件除第3列的所有列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -f3 --complement filename</span><br></pre></td></tr></table></figure><p>-d 指定定界符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -f2 -d";" filename</span><br></pre></td></tr></table></figure><p>cut 取的范围</p><ul><li>N- 第N个字段到结尾</li><li>-M 第1个字段为M</li><li>N-M N到M个字段</li></ul><p>cut 取的单位</p><ul><li>-b 以字节为单位</li><li>-c 以字符为单位</li><li>-f 以字段为单位（使用定界符）</li></ul><p>eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -c1-5 file //打印第一到5个字符cut -c-2 file  //打印前2个字符</span><br></pre></td></tr></table></figure><h3 id="07-paste-按列拼接文本"><a href="#07-paste-按列拼接文本" class="headerlink" title="07 paste 按列拼接文本"></a>07 paste 按列拼接文本</h3><p>将两个文本按列拼接到一起;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat file1</span><br><span class="line">12</span><br><span class="line">cat file2</span><br><span class="line">colinbook</span><br><span class="line">paste file1 file2</span><br><span class="line">1 colin2 book</span><br></pre></td></tr></table></figure><p>默认的定界符是制表符，可以用-d指明定界符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paste file1 file2 -d ","</span><br><span class="line">1,colin2,book</span><br></pre></td></tr></table></figure><h3 id="08-wc-统计行和字符的工具"><a href="#08-wc-统计行和字符的工具" class="headerlink" title="08 wc 统计行和字符的工具"></a>08 wc 统计行和字符的工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l file // 统计行数wc -w file // 统计单词数wc -c file // 统计字符数</span><br></pre></td></tr></table></figure><h3 id="09-sed-文本替换利器"><a href="#09-sed-文本替换利器" class="headerlink" title="09 sed 文本替换利器"></a>09 sed 文本替换利器</h3><p>首处替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seg 's/text/replace_text/' file   //替换每一行的第一处匹配的text</span><br></pre></td></tr></table></figure><p>全局替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seg 's/text/replace_text/g' file</span><br></pre></td></tr></table></figure><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seg -i 's/text/repalce_text/g' file</span><br></pre></td></tr></table></figure><p>移除空白行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '/^$/d' file</span><br></pre></td></tr></table></figure><p>变量转换</p><p>已匹配的字符串通过标记&amp;来引用.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo this is en example | seg 's/w+/[&amp;]/g'</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;[this]  [is] [en] [example]</span></span><br></pre></td></tr></table></figure><p>子串匹配标记</p><p>第一个匹配的括号内容使用标记 来引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/hello([0-9])//'</span><br></pre></td></tr></table></figure><p>双引号求值</p><p>sed通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/$var/HLLOE/'</span><br></pre></td></tr></table></figure><p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg:p=pattenr=replacedecho "line con a patten"| sed "s/$p/$r/g"$&gt;line con a replaced</span><br></pre></td></tr></table></figure><p>其它示例</p><p>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK/SHA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/^.&#123;3&#125;/&amp;//g' file</span><br></pre></td></tr></table></figure><h3 id="10-awk-数据流处理工具"><a href="#10-awk-数据流处理工具" class="headerlink" title="10 awk 数据流处理工具"></a>10 awk 数据流处理工具</h3><p>awk脚本结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' BEGIN&#123; statements &#125; statements2 END&#123; statements &#125; '</span><br></pre></td></tr></table></figure><p>工作方式</p><p>1.执行begin中语句块；</p><p>2.从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</p><p>3.执行end语句块；</p><p>print 打印当前行</p><p>使用不带参数的print时，会打印当前行;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "line1 line2"| awk 'BEGIN&#123;print "start"&#125; &#123;print &#125; END&#123; print "End" &#125;'</span><br></pre></td></tr></table></figure><p>print 以逗号分割时，参数以空格定界;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1, var2 , var3; &#125;'$&gt;v1 V2 v3</span><br></pre></td></tr></table></figure><p>使用-拼接符的方式（””作为拼接符）;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1"-"var2"-"var3; &#125;'$&gt;v1-V2-v3</span><br></pre></td></tr></table></figure><p>特殊变量：<code>NR NF $0 $1 $2</code></p><ul><li><p>NR:表示记录数量，在执行过程中对应当前行号；</p></li><li><p>NF:表示字段数量，在执行过程总对应当前行的字段数；</p></li><li><ul><li>$0:这个变量包含执行过程中当前行的文本内容；</li><li>$1:第一个字段的文本内容；</li><li>$2:第二个字段的文本内容；</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "line1 f2 f3 line2 line 3"| awk '&#123;print NR":"$0"-"$1"-"$2&#125;'</span><br></pre></td></tr></table></figure><p>打印每一行的第二和第三个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;print $2, $3&#125;' file</span><br></pre></td></tr></table></figure><p>统计文件的行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' END &#123;print NR&#125;' file</span><br></pre></td></tr></table></figure><p>累加每一行的第一个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "1 2 3 4 "| awk 'BEGIN&#123;num = 0 ;print "begin";&#125; &#123;sum += $1;&#125; END &#123;print "=="; print sum &#125;'</span><br></pre></td></tr></table></figure><p>传递外部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var=1000echo | awk '&#123;print vara&#125;' vara=$var #  输入来自stdinawk '&#123;print vara&#125;' vara=$var file # 输入来自文件</span><br></pre></td></tr></table></figure><p>用样式对awk处理的行进行过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk 'NR &lt; 5' #行号小于5awk 'NR==1,NR==4 &#123;print&#125;' file #行号等于1和4的打印出来awk '/linux/'#包含linux文本的行（可以用正则表达式来指定，超级强大）awk '!/linux/'#不包含linux文本的行</span><br></pre></td></tr></table></figure><p>设置定界符</p><p>使用-F来设置定界符（默认为空格）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: '&#123;print $NF&#125;'/etc/passwd</span><br></pre></td></tr></table></figure><p>读取命令输出</p><p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print cmdout &#125;'</span><br></pre></td></tr></table></figure><p>在awk中使用循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(i=0;i&lt;10;i++)&#123;print $i;&#125;for(i in array)&#123;print array[i];&#125;</span><br></pre></td></tr></table></figure><p>eg:</p><p>以逆序的形式打印行：(tac命令的实现）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq 9|</span><br><span class="line">awk '&#123;lifo[NR] = $0; lno=NR&#125;</span><br><span class="line">END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;</span><br><span class="line">&#125; '</span><br></pre></td></tr></table></figure><p>awk实现head、tail命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head:  awk 'NR&lt;=10&#123;print&#125;' filename</span><br><span class="line">tail:  awk '&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123;  print buffer[i %10]&#125; &#125; ' filename</span><br></pre></td></tr></table></figure><p>打印指定列</p><p>awk方式实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt | awk '&#123;print $6&#125;'</span><br></pre></td></tr></table></figure><p>cut方式实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrt | cut -f6</span><br></pre></td></tr></table></figure><p>打印指定文本区域</p><p>确定行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq 100| awk 'NR==4,NR==6&#123;print&#125;'</span><br></pre></td></tr></table></figure><p>确定文本</p><p>打印处于startpattern 和endpattern之间的文本；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk '/start_pattern/, /end_pattern/' filename</span><br><span class="line">eg:seq 100| awk '/13/,/15/'cat /etc/passwd| awk '/mai.*mail/,/news.*news/'</span><br></pre></td></tr></table></figure><p>awk常用内建函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index(string,search_string):返回search_string在string中出现的位置sub(regex,replacement_str,string):将正则匹配到的第一处内容替换为replacement_str;match(regex,string):检查正则表达式是否能够匹配字符串；length(string)：返回字符串长度</span><br><span class="line">______</span><br><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print length(cmdout) &#125;'</span><br></pre></td></tr></table></figure><p>printf 类似c语言中的printf，对输出进行格式化</p><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq 10| awk '&#123;printf "-&gt;%4s ", $1&#125;'</span><br></pre></td></tr></table></figure><p>迭代文件中的行、单词和字符</p><ol><li>迭代文件中的每一行</li></ol><p>while 循环法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while read line;doecho $line;done&lt; file.txt</span><br></pre></td></tr></table></figure><p>改成子shell:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | (while read line;do echo $line;done)</span><br></pre></td></tr></table></figure><p>awk法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt| awk '&#123;print&#125;'</span><br></pre></td></tr></table></figure><ol start="2"><li>迭代一行中的每一个单词</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for word in $line;doecho $word;done</span><br></pre></td></tr></table></figure><ol start="3"><li>迭代每一个字符</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;string:startpos:numof_chars&#125;：从字符串中提取一个字符；(bash文本切片）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#word&#125;:返回变量word的长度</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for((i=0;i&lt;$&#123;#word&#125;;i++))doecho $&#123;word:i:1);done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.baixixi.xyz/1585831666724.jpg&quot; alt=&quot;tu&quot;&gt;&lt;/p&gt;
&lt;p&gt;【转】本文将介绍Linux下使用Shell处理文本时最常用的工具：&lt;/p&gt;
&lt;p&gt;find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；&lt;/p&gt;
&lt;p&gt;提供的例子和参数都是最常用和最为实用的；&lt;/p&gt;
&lt;p&gt;对shell脚本使用的原则是命令单行书写，尽量不要超过2行；&lt;/p&gt;
&lt;p&gt;如果有更为复杂的任务需求，还是考虑python吧；&lt;/p&gt;
    
    </summary>
    
    
      <category term="script" scheme="https://baiyu128.github.io/categories/script/"/>
    
    
      <category term="script" scheme="https://baiyu128.github.io/tags/script/"/>
    
      <category term="linux" scheme="https://baiyu128.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>JAVA自定义注解和AOP配合使用</title>
    <link href="https://baiyu128.github.io/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>https://baiyu128.github.io/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</id>
    <published>2020-07-08T07:44:46.000Z</published>
    <updated>2020-07-08T09:43:54.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.baixixi.xyz/1575352733280.jpg" alt=""></p><blockquote><p>使用execute到类的方法时遇到的问题：</p><ol><li>不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；</li><li>Controller <strong>包层级过深</strong>时，<strong>导致很多包下的接口切不到</strong>；</li></ol></blockquote><p>本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。</p><p>废话不多说，进入正题 ！</p><a id="more"></a><h2 id="一、先看看切面日志输出效果"><a href="#一、先看看切面日志输出效果" class="headerlink" title="一、先看看切面日志输出效果"></a>一、先看看切面日志输出效果</h2><p>在看看实现方法之前，我们先看下切面日志输出效果咋样：</p><p><img src="http://img.baixixi.xyz/1594201343604.jpg" alt="Spring boot 自定义注解，aop切面统一打印请求日志效果图"></p><p>从上图中可以看到，每个对于每个请求，开始与结束一目了然，并且打印了以下参数：</p><ul><li><strong>URL</strong>: 请求接口地址；</li><li><strong>Description</strong>: 接口的中文说明信息；</li><li><strong>HTTP Method</strong>: 请求的方法，是 <code>POST</code>, <code>GET</code>, 还是 <code>DELETE</code> 等；</li><li><strong>Class Method</strong>: 被请求的方法路径 : <strong>包名 + 方法名</strong>;</li><li><strong>IP</strong>: 请求方的 IP 地址；</li><li><strong>Request Args</strong>: 请求入参，以 JSON 格式输出；</li><li><strong>Response Args</strong>: 响应出参，以 JSON 格式输出；</li><li><strong>Time-Consuming</strong>: 请求耗时，以此估算每个接口的性能指数；</li></ul><p>怎么样？看上去效果还不错呢？接下来看看，我们要如何一步一步实现它呢？</p><h2 id="二、添加-AOP-Maven-依赖"><a href="#二、添加-AOP-Maven-依赖" class="headerlink" title="二、添加 AOP Maven 依赖"></a>二、添加 AOP Maven 依赖</h2><p>在项目 <code>pom.xml</code> 文件中添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- aop 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于日志切面中，以 json 格式打印出入参 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="三、自定义日志注解"><a href="#三、自定义日志注解" class="headerlink" title="三、自定义日志注解"></a>三、自定义日志注解</h2><p>让我们来自定义一个日志注解，如下所示：</p><p>自定义注解</p><ul><li><strong>①</strong> Retention：什么时候使用该注解，我们定义为运行时；</li><li><strong>②</strong> Target：注解用于什么地方，我们定义为作用于方法上；</li><li><strong>③</strong> Documented：注解是否将包含在 JavaDoc 中；</li><li><strong>④</strong> ：注解名为 <code>WebLog</code>;</li><li><strong>⑤</strong> description：定义一个属性，默认为空字符串；</li></ul><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebLog &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志描述信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，一个完整的自定义注解就定义完成了。</p><h2 id="四、配置-AOP-切面"><a href="#四、配置-AOP-切面" class="headerlink" title="四、配置 AOP 切面"></a>四、配置 AOP 切面</h2><p>在配置 AOP 切面之前，我们需要了解下 <code>aspectj</code> 相关注解的作用：</p><ul><li><strong>@Aspect</strong>：声明该类为一个注解类；</li><li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li></ul><p>切点定义好后，就是围绕这个切点做文章了：</p><ul><li><strong>@Before</strong>: 在切点之前，织入相关代码；</li><li><strong>@After</strong>: 在切点之后，织入相关代码;</li><li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li><li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理;</li><li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li></ul><p>注解执行顺序：</p><p>​        Around -&gt;before -&gt; 接口种的逻辑代码 -&gt;after -&gt; afterReturning</p><p>接下来，定义一个 <code>WebLogAspect.java</code> 切面类，声明一个切点：</p><p>然后，定义 <code>@Around</code> 环绕，用于何时执行切点：</p><ul><li><strong>①</strong> startTime：记录一下调用接口的开始时间；</li><li><strong>②</strong> result：执行切点，执行切点后，会去依次调用 <strong>@Before -&gt; 接口逻辑代码 -&gt; @After -&gt; @AfterReturning</strong>；</li><li><strong>③</strong> ：打印出参；</li><li><strong>④</strong> ：打印接口处理耗时；</li><li><strong>⑤</strong>：返回接口返参结果；</li></ul><p>再来看看 <code>@Before</code> 方法：</p><p>看注释功能说明，因为注释说得还是比较清楚的！</p><p>最后，用 <code>@After</code> 来做个收尾：</p><p>我们在每个接口的最后，打印日志结束标志。最后再看下项目包结构：</p><p><img src="http://img.baixixi.xyz/1594201366349.jpg" alt="bao.jpg"></p><p>到这里，切面相关的代码就完成了！</p><p>上完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.context.annotation.Profile;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger logger         &#x3D; LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line">    &#x2F;** 换行符 *&#x2F;</span><br><span class="line">    private static final String LINE_SEPARATOR &#x3D; System.lineSeparator();</span><br><span class="line"></span><br><span class="line">    &#x2F;** 以自定义 @WebLog 注解为切点 *&#x2F;</span><br><span class="line">    @Pointcut(&quot;@annotation(site.exception.springbootaopwebrequest.aspect.WebLog)&quot;)</span><br><span class="line">    public void webLog() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之前织入</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Before(&quot;webLog()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始打印请求日志</span><br><span class="line">        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 @WebLog 注解的描述信息</span><br><span class="line">        String methodDescription &#x3D; getAspectLogDescription(joinPoint);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 打印请求相关参数</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 打印请求 url</span><br><span class="line">        logger.info(&quot;URL            : &#123;&#125;&quot;, request.getRequestURL().toString());</span><br><span class="line">        &#x2F;&#x2F; 打印描述信息</span><br><span class="line">        logger.info(&quot;Description    : &#123;&#125;&quot;, methodDescription);</span><br><span class="line">        &#x2F;&#x2F; 打印 Http method</span><br><span class="line">        logger.info(&quot;HTTP Method    : &#123;&#125;&quot;, request.getMethod());</span><br><span class="line">        &#x2F;&#x2F; 打印调用 controller 的全路径以及执行方法</span><br><span class="line">        logger.info(&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());</span><br><span class="line">        &#x2F;&#x2F; 打印请求的 IP</span><br><span class="line">        logger.info(&quot;IP             : &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line">        &#x2F;&#x2F; 打印请求入参</span><br><span class="line">        logger.info(&quot;Request Args   : &#123;&#125;&quot;, new Gson().toJson(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之后织入</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @After(&quot;webLog()&quot;)</span><br><span class="line">    public void doAfter() throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 接口结束后换行，方便分割查看</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; End &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + LINE_SEPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 环绕</span><br><span class="line">     * @param proceedingJoinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Around(&quot;webLog()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        Object result &#x3D; proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F; 打印出参</span><br><span class="line">        logger.info(&quot;Response Args  : &#123;&#125;&quot;, new Gson().toJson(result));</span><br><span class="line">        &#x2F;&#x2F; 执行耗时</span><br><span class="line">        logger.info(&quot;Time-Consuming : &#123;&#125; ms&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取切面注解的描述</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     * @return 描述信息</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getAspectLogDescription(JoinPoint joinPoint)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        String targetName &#x3D; joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments &#x3D; joinPoint.getArgs();</span><br><span class="line">        Class targetClass &#x3D; Class.forName(targetName);</span><br><span class="line">        Method[] methods &#x3D; targetClass.getMethods();</span><br><span class="line">        StringBuilder description &#x3D; new StringBuilder(&quot;&quot;);</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] clazzs &#x3D; method.getParameterTypes();</span><br><span class="line">                if (clazzs.length &#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">                    description.append(method.getAnnotation(WebLog.class).description());</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return description.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、怎么使用呢？"><a href="#五、怎么使用呢？" class="headerlink" title="五、怎么使用呢？"></a>五、怎么使用呢？</h2><p>因为我们的切点是自定义注解 <code>@WebLog</code>, 所以我们仅仅需要在 Controller 控制器的每个接口方法添加 @WebLog 注解即可，如果我们不想某个接口打印出入参日志，不加注解就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"><span class="meta">@WebLog</span>(description=<span class="string">"请求了用户登录接口"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">  logger.info(<span class="string">"user login ..."</span>);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、对于文件上传好使不？"><a href="#六、对于文件上传好使不？" class="headerlink" title="六、对于文件上传好使不？"></a>六、对于文件上传好使不？</h2><p>是好使的！不论是单文件上传，抑或是多文件上传，切面日志均运行良好，这里测试的东西，就不贴出来了。有兴趣的小伙伴可以试试！</p><h2 id="七、只想在开发环境和测试环境中使用？"><a href="#七、只想在开发环境和测试环境中使用？" class="headerlink" title="七、只想在开发环境和测试环境中使用？"></a>七、只想在开发环境和测试环境中使用？</h2><p>对于那些性能要求较高的应用，不想在生产环境中打印日志，只想在开发环境或者测试环境中使用，要怎么做呢？我们只需为切面添加 <code>@Profile</code> 就可以了，如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Compent</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>,<span class="string">"test"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger  logger = LoggerFactory.getLogger(WebLogAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就指定了只能作用于 <code>dev</code> 开发环境和 <code>test</code> 测试环境，生产环境 <code>prod</code> 是不生效的！</p><h2 id="八、多切面如何指定优先级？"><a href="#八、多切面如何指定优先级？" class="headerlink" title="八、多切面如何指定优先级？"></a>八、多切面如何指定优先级？</h2><p>假设说我们的服务中不止定义了一个切面，比如说我们针对 Web 层的接口，不止要打印日志，还要校验 token 等。要如何指定切面的优先级呢？也就是如何指定切面的执行顺序？</p><p>我们可以通过 <code>@Order(i)</code>注解来指定优先级，注意：<strong>i 值越小，优先级则越高</strong>。</p><p>假设说我们定义上面这个日志切面的优先级为 <code>@Order(10)</code>, 然后我们还有个校验 <code>token</code> 的切面 <code>CheckTokenAspect.java</code>，我们定义为了 <code>@Order(11)</code>, 那么它们之间的执行顺序如下：</p><p><img src="http://img.baixixi.xyz/1594201354572.jpg" alt="order.jpg"></p><p>我们可以总结一下：</p><ul><li>在切点之前，<code>@Order</code> 从小到大被执行，也就是说越小的优先级越高；</li><li>在切点之后，<code>@Order</code> 从大到小被执行，也就是说越大的优先级越高；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.baixixi.xyz/1575352733280.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用execute到类的方法时遇到的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；&lt;/li&gt;
&lt;li&gt;Controller &lt;strong&gt;包层级过深&lt;/strong&gt;时，&lt;strong&gt;导致很多包下的接口切不到&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。&lt;/p&gt;
&lt;p&gt;废话不多说，进入正题 ！&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOP" scheme="https://baiyu128.github.io/categories/AOP/"/>
    
    
      <category term="springboot" scheme="https://baiyu128.github.io/tags/springboot/"/>
    
      <category term="AOP" scheme="https://baiyu128.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目脚本（启动、停止、重启、状态)</title>
    <link href="https://baiyu128.github.io/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/"/>
    <id>https://baiyu128.github.io/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/</id>
    <published>2020-06-22T12:48:45.000Z</published>
    <updated>2020-06-22T12:56:29.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.baixixi.xyz/1575206542142.jpg" alt=""></p><p>此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。</p><p>如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 <code>BUILD_ID=dontKillMe</code> , 不然 jenkins 会杀掉进程。</p><a id="more"></a><p>参考: <a href="https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m" target="_blank" rel="noopener">https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m</a></p><h3 id="spring-boot-sh"><a href="#spring-boot-sh" class="headerlink" title="spring-boot.sh"></a>spring-boot.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SpringBoot=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入操作名 \033[0m  \033[0;34m &#123;start|stop|restart|status&#125; \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SpringBoot</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入应用名 \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start <span class="variable">$SpringBoot</span> success..."</span></span><br><span class="line">        nohup java -jar <span class="variable">$SpringBoot</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stop <span class="variable">$SpringBoot</span>"</span></span><br><span class="line">    boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> <span class="variable">$boot_id</span></span><br><span class="line">        count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">        boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$boot_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> restart()</span><br><span class="line">&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> status()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is not running..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    *)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m Usage: \033[0m  \033[0;34m sh  <span class="variable">$0</span>  &#123;start|stop|restart|status&#125;  &#123;SpringBootJarName&#125; \033[0m</span></span><br><span class="line"><span class="string">\033[0;31m Example: \033[0m</span></span><br><span class="line"><span class="string">      \033[0;33m sh  <span class="variable">$0</span>  start esmart-test.jar \033[0m"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.baixixi.xyz/1575206542142.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。&lt;/p&gt;
&lt;p&gt;如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 &lt;code&gt;BUILD_ID=dontKillMe&lt;/code&gt; , 不然 jenkins 会杀掉进程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="script" scheme="https://baiyu128.github.io/categories/script/"/>
    
    
      <category term="springboot" scheme="https://baiyu128.github.io/tags/springboot/"/>
    
      <category term="script" scheme="https://baiyu128.github.io/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>第一次使用</title>
    <link href="https://baiyu128.github.io/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <id>https://baiyu128.github.io/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-21T07:48:37.000Z</published>
    <updated>2020-06-21T13:26:53.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><a id="more"></a><blockquote><p>Test for more</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"test for md"</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题一&quot;&gt;&lt;a href=&quot;#标题一&quot; class=&quot;headerlink&quot; title=&quot;标题一&quot;&gt;&lt;/a&gt;标题一&lt;/h1&gt;&lt;h2 id=&quot;标题二&quot;&gt;&lt;a href=&quot;#标题二&quot; class=&quot;headerlink&quot; title=&quot;标题二&quot;&gt;&lt;/a&gt;标题二&lt;/h2&gt;&lt;h3 id=&quot;标题三&quot;&gt;&lt;a href=&quot;#标题三&quot; class=&quot;headerlink&quot; title=&quot;标题三&quot;&gt;&lt;/a&gt;标题三&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Testing" scheme="https://baiyu128.github.io/categories/Testing/"/>
    
    
      <category term="blog" scheme="https://baiyu128.github.io/tags/blog/"/>
    
      <category term="test" scheme="https://baiyu128.github.io/tags/test/"/>
    
  </entry>
  
</feed>
