<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一次使用</title>
    <url>/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><a id="more"></a>

<blockquote>
<p>Test for more</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"test for md"</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 项目脚本（启动、停止、重启、状态)</title>
    <url>/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1575206542142.jpg" alt=""></p>
<p>此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。</p>
<p>如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 <code>BUILD_ID=dontKillMe</code> , 不然 jenkins 会杀掉进程。</p>
<a id="more"></a>

<p>参考: <a href="https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m" target="_blank" rel="noopener">https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m</a></p>
<h3 id="spring-boot-sh"><a href="#spring-boot-sh" class="headerlink" title="spring-boot.sh"></a>spring-boot.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SpringBoot=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入操作名 \033[0m  \033[0;34m &#123;start|stop|restart|status&#125; \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SpringBoot</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入应用名 \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start <span class="variable">$SpringBoot</span> success..."</span></span><br><span class="line">        nohup java -jar <span class="variable">$SpringBoot</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stop <span class="variable">$SpringBoot</span>"</span></span><br><span class="line">    boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> <span class="variable">$boot_id</span></span><br><span class="line">        count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">        boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$boot_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> restart()</span><br><span class="line">&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> status()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is not running..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    *)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m Usage: \033[0m  \033[0;34m sh  <span class="variable">$0</span>  &#123;start|stop|restart|status&#125;  &#123;SpringBootJarName&#125; \033[0m</span></span><br><span class="line"><span class="string">\033[0;31m Example: \033[0m</span></span><br><span class="line"><span class="string">      \033[0;33m sh  <span class="variable">$0</span>  start esmart-test.jar \033[0m"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA自定义注解和AOP配合使用</title>
    <url>/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1575352733280.jpg" alt=""></p>
<blockquote>
<p>使用execute到类的方法时遇到的问题：</p>
<ol>
<li>不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；</li>
<li>Controller <strong>包层级过深</strong>时，<strong>导致很多包下的接口切不到</strong>；</li>
</ol>
</blockquote>
<p>本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。</p>
<p>废话不多说，进入正题 ！</p>
<a id="more"></a>

<h2 id="一、先看看切面日志输出效果"><a href="#一、先看看切面日志输出效果" class="headerlink" title="一、先看看切面日志输出效果"></a>一、先看看切面日志输出效果</h2><p>在看看实现方法之前，我们先看下切面日志输出效果咋样：</p>
<p><img src="http://img.baixixi.xyz/1594201343604.jpg" alt="Spring boot 自定义注解，aop切面统一打印请求日志效果图"></p>
<p>从上图中可以看到，每个对于每个请求，开始与结束一目了然，并且打印了以下参数：</p>
<ul>
<li><strong>URL</strong>: 请求接口地址；</li>
<li><strong>Description</strong>: 接口的中文说明信息；</li>
<li><strong>HTTP Method</strong>: 请求的方法，是 <code>POST</code>, <code>GET</code>, 还是 <code>DELETE</code> 等；</li>
<li><strong>Class Method</strong>: 被请求的方法路径 : <strong>包名 + 方法名</strong>;</li>
<li><strong>IP</strong>: 请求方的 IP 地址；</li>
<li><strong>Request Args</strong>: 请求入参，以 JSON 格式输出；</li>
<li><strong>Response Args</strong>: 响应出参，以 JSON 格式输出；</li>
<li><strong>Time-Consuming</strong>: 请求耗时，以此估算每个接口的性能指数；</li>
</ul>
<p>怎么样？看上去效果还不错呢？接下来看看，我们要如何一步一步实现它呢？</p>
<h2 id="二、添加-AOP-Maven-依赖"><a href="#二、添加-AOP-Maven-依赖" class="headerlink" title="二、添加 AOP Maven 依赖"></a>二、添加 AOP Maven 依赖</h2><p>在项目 <code>pom.xml</code> 文件中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- aop 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于日志切面中，以 json 格式打印出入参 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、自定义日志注解"><a href="#三、自定义日志注解" class="headerlink" title="三、自定义日志注解"></a>三、自定义日志注解</h2><p>让我们来自定义一个日志注解，如下所示：</p>
<p>自定义注解</p>
<ul>
<li><strong>①</strong> Retention：什么时候使用该注解，我们定义为运行时；</li>
<li><strong>②</strong> Target：注解用于什么地方，我们定义为作用于方法上；</li>
<li><strong>③</strong> Documented：注解是否将包含在 JavaDoc 中；</li>
<li><strong>④</strong> ：注解名为 <code>WebLog</code>;</li>
<li><strong>⑤</strong> description：定义一个属性，默认为空字符串；</li>
</ul>
<p>源代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebLog &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志描述信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，一个完整的自定义注解就定义完成了。</p>
<h2 id="四、配置-AOP-切面"><a href="#四、配置-AOP-切面" class="headerlink" title="四、配置 AOP 切面"></a>四、配置 AOP 切面</h2><p>在配置 AOP 切面之前，我们需要了解下 <code>aspectj</code> 相关注解的作用：</p>
<ul>
<li><strong>@Aspect</strong>：声明该类为一个注解类；</li>
<li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li>
</ul>
<p>切点定义好后，就是围绕这个切点做文章了：</p>
<ul>
<li><strong>@Before</strong>: 在切点之前，织入相关代码；</li>
<li><strong>@After</strong>: 在切点之后，织入相关代码;</li>
<li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li>
<li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理;</li>
<li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li>
</ul>
<p>注解执行顺序：</p>
<p>​        Around -&gt;before -&gt; 接口种的逻辑代码 -&gt;after -&gt; afterReturning</p>
<p>接下来，定义一个 <code>WebLogAspect.java</code> 切面类，声明一个切点：</p>
<p>然后，定义 <code>@Around</code> 环绕，用于何时执行切点：</p>
<ul>
<li><strong>①</strong> startTime：记录一下调用接口的开始时间；</li>
<li><strong>②</strong> result：执行切点，执行切点后，会去依次调用 <strong>@Before -&gt; 接口逻辑代码 -&gt; @After -&gt; @AfterReturning</strong>；</li>
<li><strong>③</strong> ：打印出参；</li>
<li><strong>④</strong> ：打印接口处理耗时；</li>
<li><strong>⑤</strong>：返回接口返参结果；</li>
</ul>
<p>再来看看 <code>@Before</code> 方法：</p>
<p>看注释功能说明，因为注释说得还是比较清楚的！</p>
<p>最后，用 <code>@After</code> 来做个收尾：</p>
<p>我们在每个接口的最后，打印日志结束标志。最后再看下项目包结构：</p>
<p><img src="http://img.baixixi.xyz/1594201366349.jpg" alt="bao.jpg"></p>
<p>到这里，切面相关的代码就完成了！</p>
<p>上完整代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.context.annotation.Profile;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger logger         &#x3D; LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line">    &#x2F;** 换行符 *&#x2F;</span><br><span class="line">    private static final String LINE_SEPARATOR &#x3D; System.lineSeparator();</span><br><span class="line"></span><br><span class="line">    &#x2F;** 以自定义 @WebLog 注解为切点 *&#x2F;</span><br><span class="line">    @Pointcut(&quot;@annotation(site.exception.springbootaopwebrequest.aspect.WebLog)&quot;)</span><br><span class="line">    public void webLog() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之前织入</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Before(&quot;webLog()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始打印请求日志</span><br><span class="line">        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 @WebLog 注解的描述信息</span><br><span class="line">        String methodDescription &#x3D; getAspectLogDescription(joinPoint);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 打印请求相关参数</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 打印请求 url</span><br><span class="line">        logger.info(&quot;URL            : &#123;&#125;&quot;, request.getRequestURL().toString());</span><br><span class="line">        &#x2F;&#x2F; 打印描述信息</span><br><span class="line">        logger.info(&quot;Description    : &#123;&#125;&quot;, methodDescription);</span><br><span class="line">        &#x2F;&#x2F; 打印 Http method</span><br><span class="line">        logger.info(&quot;HTTP Method    : &#123;&#125;&quot;, request.getMethod());</span><br><span class="line">        &#x2F;&#x2F; 打印调用 controller 的全路径以及执行方法</span><br><span class="line">        logger.info(&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());</span><br><span class="line">        &#x2F;&#x2F; 打印请求的 IP</span><br><span class="line">        logger.info(&quot;IP             : &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line">        &#x2F;&#x2F; 打印请求入参</span><br><span class="line">        logger.info(&quot;Request Args   : &#123;&#125;&quot;, new Gson().toJson(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之后织入</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @After(&quot;webLog()&quot;)</span><br><span class="line">    public void doAfter() throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 接口结束后换行，方便分割查看</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; End &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + LINE_SEPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 环绕</span><br><span class="line">     * @param proceedingJoinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Around(&quot;webLog()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        Object result &#x3D; proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F; 打印出参</span><br><span class="line">        logger.info(&quot;Response Args  : &#123;&#125;&quot;, new Gson().toJson(result));</span><br><span class="line">        &#x2F;&#x2F; 执行耗时</span><br><span class="line">        logger.info(&quot;Time-Consuming : &#123;&#125; ms&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取切面注解的描述</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     * @return 描述信息</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getAspectLogDescription(JoinPoint joinPoint)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        String targetName &#x3D; joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments &#x3D; joinPoint.getArgs();</span><br><span class="line">        Class targetClass &#x3D; Class.forName(targetName);</span><br><span class="line">        Method[] methods &#x3D; targetClass.getMethods();</span><br><span class="line">        StringBuilder description &#x3D; new StringBuilder(&quot;&quot;);</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] clazzs &#x3D; method.getParameterTypes();</span><br><span class="line">                if (clazzs.length &#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">                    description.append(method.getAnnotation(WebLog.class).description());</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return description.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、怎么使用呢？"><a href="#五、怎么使用呢？" class="headerlink" title="五、怎么使用呢？"></a>五、怎么使用呢？</h2><p>因为我们的切点是自定义注解 <code>@WebLog</code>, 所以我们仅仅需要在 Controller 控制器的每个接口方法添加 @WebLog 注解即可，如果我们不想某个接口打印出入参日志，不加注解就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"><span class="meta">@WebLog</span>(description=<span class="string">"请求了用户登录接口"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">  logger.info(<span class="string">"user login ..."</span>);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、对于文件上传好使不？"><a href="#六、对于文件上传好使不？" class="headerlink" title="六、对于文件上传好使不？"></a>六、对于文件上传好使不？</h2><p>是好使的！不论是单文件上传，抑或是多文件上传，切面日志均运行良好，这里测试的东西，就不贴出来了。有兴趣的小伙伴可以试试！</p>
<h2 id="七、只想在开发环境和测试环境中使用？"><a href="#七、只想在开发环境和测试环境中使用？" class="headerlink" title="七、只想在开发环境和测试环境中使用？"></a>七、只想在开发环境和测试环境中使用？</h2><p>对于那些性能要求较高的应用，不想在生产环境中打印日志，只想在开发环境或者测试环境中使用，要怎么做呢？我们只需为切面添加 <code>@Profile</code> 就可以了，如下图所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Compent</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>,<span class="string">"test"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger  logger = LoggerFactory.getLogger(WebLogAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就指定了只能作用于 <code>dev</code> 开发环境和 <code>test</code> 测试环境，生产环境 <code>prod</code> 是不生效的！</p>
<h2 id="八、多切面如何指定优先级？"><a href="#八、多切面如何指定优先级？" class="headerlink" title="八、多切面如何指定优先级？"></a>八、多切面如何指定优先级？</h2><p>假设说我们的服务中不止定义了一个切面，比如说我们针对 Web 层的接口，不止要打印日志，还要校验 token 等。要如何指定切面的优先级呢？也就是如何指定切面的执行顺序？</p>
<p>我们可以通过 <code>@Order(i)</code>注解来指定优先级，注意：<strong>i 值越小，优先级则越高</strong>。</p>
<p>假设说我们定义上面这个日志切面的优先级为 <code>@Order(10)</code>, 然后我们还有个校验 <code>token</code> 的切面 <code>CheckTokenAspect.java</code>，我们定义为了 <code>@Order(11)</code>, 那么它们之间的执行顺序如下：</p>
<p><img src="http://img.baixixi.xyz/1594201354572.jpg" alt="order.jpg"></p>
<p>我们可以总结一下：</p>
<ul>
<li>在切点之前，<code>@Order</code> 从小到大被执行，也就是说越小的优先级越高；</li>
<li>在切点之后，<code>@Order</code> 从大到小被执行，也就是说越大的优先级越高；</li>
</ul>
]]></content>
      <categories>
        <category>AOP</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell 文本处理工具集锦</title>
    <url>/2020/07/16/Linux-Shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1585831666724.jpg" alt="tu"></p>
<p>【转】本文将介绍Linux下使用Shell处理文本时最常用的工具：</p>
<p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p>
<p>提供的例子和参数都是最常用和最为实用的；</p>
<p>对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p>
<p>如果有更为复杂的任务需求，还是考虑python吧；</p>
<a id="more"></a>

<h3 id="01-find-文件查找"><a href="#01-find-文件查找" class="headerlink" title="01 find 文件查找"></a>01 find 文件查找</h3><p>1 查找txt和pdf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ( -name "*.txt"-o -name "*.pdf") -print</span><br></pre></td></tr></table></figure>

<p>2 正则方式查找.txt和pdf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -regex  ".*(.txt|.pdf)$"</span><br></pre></td></tr></table></figure>

<p>-iregex：忽略大小写的正则</p>
<p>3 否定参数</p>
<p>查找所有非txt文本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ! -name "*.txt"-print</span><br></pre></td></tr></table></figure>

<p>4 指定搜索深度</p>
<p>打印出当前目录的文件（深度为1）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1-type f</span><br></pre></td></tr></table></figure>

<p>5 定制搜索</p>
<p>按类型搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type d -print  //只列出所有目录-type f 文件 / l 符号链接</span><br></pre></td></tr></table></figure>

<p>按时间搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</span><br><span class="line">-mtime 修改时间 （内容被修改）</span><br><span class="line">-ctime 变化时间 （元数据或权限变化）</span><br></pre></td></tr></table></figure>

<p>最近7天被访问过的所有文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -atime 7-type f -print</span><br></pre></td></tr></table></figure>

<p>按大小搜索：</p>
<p>w字 k M G</p>
<p>寻找大于2k的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -size +2k</span><br></pre></td></tr></table></figure>

<p>按权限查找：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -perm 644-print //找具有可执行权限的所有文件</span><br></pre></td></tr></table></figure>

<p>按用户查找：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -user weber -print// 找用户weber所拥有的文件</span><br></pre></td></tr></table></figure>

<p>6 找到后的后续动作</p>
<p>删除：</p>
<p>删除当前目录下所有的swp文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -name "*.swp"-delete</span><br></pre></td></tr></table></figure>

<p>执行动作（强大的exec）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -user root -exec chown weber &#123;&#125; ; //将当前目录下的所有权变更为weber</span><br></pre></td></tr></table></figure>

<p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；</p>
<p>eg：将找到的文件全都copy到另一个目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -mtime +10-name "*.txt"-exec cp &#123;&#125; OLD ;</span><br></pre></td></tr></table></figure>

<p>7 结合多个命令</p>
<p>tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-exec ./commands.sh &#123;&#125; ;</span><br></pre></td></tr></table></figure>

<p>-print的定界符</p>
<p>默认使用’ ‘作为文件的定界符；</p>
<p>-print0 使用’’作为文件的定界符，这样就可以搜索包含空格的文件；</p>
<h3 id="02-grep-文本搜索"><a href="#02-grep-文本搜索" class="headerlink" title="02 grep 文本搜索"></a>02 grep 文本搜索</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep match_patten file // 默认访问匹配行</span><br></pre></td></tr></table></figure>

<p>常用参数:</p>
<ul>
<li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li>
<li>-c 统计文件中包含文本的次数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -c "text" filename</span><br></pre></td></tr></table></figure>

<ul>
<li>-n 打印匹配的行号</li>
<li>-i 搜索时忽略大小写</li>
<li>-l 只打印文件名</li>
</ul>
<p>1 在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "class". -R -n</span><br></pre></td></tr></table></figure>

<p>2 匹配多个模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -e "class"-e "vitural" file</span><br></pre></td></tr></table></figure>

<p>3 grep输出以作为结尾符的文件名：（-z）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "test" file* -lZ| xargs -0 rm</span><br></pre></td></tr></table></figure>

<p>4 xargs 命令行参数转换</p>
<p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；</p>
<p>将多行输出转化为单行输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt| xargs</span><br></pre></td></tr></table></figure>

<p>是多行文本间的定界符</p>
<p>将单行转化为多行输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat single.txt | xargs -n 3</span><br></pre></td></tr></table></figure>

<p>-n：指定每行显示的字段数</p>
<p>xargs参数说明</p>
<ul>
<li>-d 定义定界符 （默认为空格 多行的定界符为 ）</li>
<li>-n 指定输出为多行</li>
<li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li>
</ul>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1</span><br></pre></td></tr></table></figure>

<p>-0：指定为输入定界符</p>
<p>eg：统计程序行数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find source_dir/ -type f -name "*.cpp"-print0 |xargs -0 wc -l</span><br></pre></td></tr></table></figure>

<h3 id="03-sort-排序"><a href="#03-sort-排序" class="headerlink" title="03 sort 排序"></a>03 sort 排序</h3><p>字段说明：</p>
<ul>
<li>-n 按数字进行排序 VS -d 按字典序进行排序</li>
<li>-r 逆序排序</li>
<li>-k N 指定按第N列排序</li>
</ul>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort -nrk 1 data.txtsort -bd data // 忽略像空格之类的前导空白字符</span><br></pre></td></tr></table></figure>

<h3 id="04-uniq-消除重复行"><a href="#04-uniq-消除重复行" class="headerlink" title="04 uniq 消除重复行"></a>04 uniq 消除重复行</h3><p>消除重复行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq</span><br></pre></td></tr></table></figure>

<p>统计各行在文件中出现的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq -c</span><br></pre></td></tr></table></figure>

<p>找出重复行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq -d</span><br></pre></td></tr></table></figure>

<p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p>
<h3 id="05-用-tr-进行转换"><a href="#05-用-tr-进行转换" class="headerlink" title="05 用 tr 进行转换"></a>05 用 tr 进行转换</h3><p>通用用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 12345| tr '0-9''9876543210'//加解密转换，替换对应字符cat text| tr '    '' '//制表符转空格</span><br></pre></td></tr></table></figure>

<p>tr删除字符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -d '0-9'// 删除所有数字</span><br></pre></td></tr></table></figure>

<p>-c 求补集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -c '0-9'//获取文件中所有数字cat file | tr -d -c '0-9 '//删除非数字数据</span><br></pre></td></tr></table></figure>

<p>tr压缩字符</p>
<p>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -s ' '</span><br></pre></td></tr></table></figure>

<p>字符类</p>
<p>tr中可用各种字符类：</p>
<ul>
<li>alnum：字母和数字</li>
<li>alpha：字母</li>
<li>digit：数字</li>
<li>space：空白字符</li>
<li>lower：小写</li>
<li>upper：大写</li>
<li>cntrl：控制（非可打印）字符</li>
</ul>
<p>print：可打印字符</p>
<p>使用方法：<code>tr [:class:] [:class:]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg: tr '[:lower:]''[:upper:]'</span><br></pre></td></tr></table></figure>

<h3 id="06-cut-按列切分文本"><a href="#06-cut-按列切分文本" class="headerlink" title="06 cut 按列切分文本"></a>06 cut 按列切分文本</h3><p>截取文件的第2列和第4列：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f2,4 filename</span><br></pre></td></tr></table></figure>

<p>去文件除第3列的所有列：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f3 --complement filename</span><br></pre></td></tr></table></figure>

<p>-d 指定定界符：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat -f2 -d";" filename</span><br></pre></td></tr></table></figure>

<p>cut 取的范围</p>
<ul>
<li>N- 第N个字段到结尾</li>
<li>-M 第1个字段为M</li>
<li>N-M N到M个字段</li>
</ul>
<p>cut 取的单位</p>
<ul>
<li>-b 以字节为单位</li>
<li>-c 以字符为单位</li>
<li>-f 以字段为单位（使用定界符）</li>
</ul>
<p>eg:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -c1-5 file //打印第一到5个字符cut -c-2 file  //打印前2个字符</span><br></pre></td></tr></table></figure>

<h3 id="07-paste-按列拼接文本"><a href="#07-paste-按列拼接文本" class="headerlink" title="07 paste 按列拼接文本"></a>07 paste 按列拼接文本</h3><p>将两个文本按列拼接到一起;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file1</span><br><span class="line">12</span><br><span class="line">cat file2</span><br><span class="line">colinbook</span><br><span class="line">paste file1 file2</span><br><span class="line">1 colin2 book</span><br></pre></td></tr></table></figure>

<p>默认的定界符是制表符，可以用-d指明定界符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">paste file1 file2 -d ","</span><br><span class="line">1,colin2,book</span><br></pre></td></tr></table></figure>

<h3 id="08-wc-统计行和字符的工具"><a href="#08-wc-统计行和字符的工具" class="headerlink" title="08 wc 统计行和字符的工具"></a>08 wc 统计行和字符的工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc -l file // 统计行数wc -w file // 统计单词数wc -c file // 统计字符数</span><br></pre></td></tr></table></figure>

<h3 id="09-sed-文本替换利器"><a href="#09-sed-文本替换利器" class="headerlink" title="09 sed 文本替换利器"></a>09 sed 文本替换利器</h3><p>首处替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg 's/text/replace_text/' file   //替换每一行的第一处匹配的text</span><br></pre></td></tr></table></figure>

<p>全局替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg 's/text/replace_text/g' file</span><br></pre></td></tr></table></figure>

<p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg -i 's/text/repalce_text/g' file</span><br></pre></td></tr></table></figure>

<p>移除空白行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed '/^$/d' file</span><br></pre></td></tr></table></figure>

<p>变量转换</p>
<p>已匹配的字符串通过标记&amp;来引用.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is en example | seg 's/w+/[&amp;]/g'</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;[this]  [is] [en] [example]</span></span><br></pre></td></tr></table></figure>

<p>子串匹配标记</p>
<p>第一个匹配的括号内容使用标记 来引用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/hello([0-9])//'</span><br></pre></td></tr></table></figure>

<p>双引号求值</p>
<p>sed通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/$var/HLLOE/'</span><br></pre></td></tr></table></figure>

<p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:p=pattenr=replacedecho "line con a patten"| sed "s/$p/$r/g"$&gt;line con a replaced</span><br></pre></td></tr></table></figure>

<p>其它示例</p>
<p>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK/SHA</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/^.&#123;3&#125;/&amp;//g' file</span><br></pre></td></tr></table></figure>

<h3 id="10-awk-数据流处理工具"><a href="#10-awk-数据流处理工具" class="headerlink" title="10 awk 数据流处理工具"></a>10 awk 数据流处理工具</h3><p>awk脚本结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk ' BEGIN&#123; statements &#125; statements2 END&#123; statements &#125; '</span><br></pre></td></tr></table></figure>

<p>工作方式</p>
<p>1.执行begin中语句块；</p>
<p>2.从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</p>
<p>3.执行end语句块；</p>
<p>print 打印当前行</p>
<p>使用不带参数的print时，会打印当前行;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "line1 line2"| awk 'BEGIN&#123;print "start"&#125; &#123;print &#125; END&#123; print "End" &#125;'</span><br></pre></td></tr></table></figure>

<p>print 以逗号分割时，参数以空格定界;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1, var2 , var3; &#125;'$&gt;v1 V2 v3</span><br></pre></td></tr></table></figure>

<p>使用-拼接符的方式（””作为拼接符）;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1"-"var2"-"var3; &#125;'$&gt;v1-V2-v3</span><br></pre></td></tr></table></figure>

<p>特殊变量：<code>NR NF $0 $1 $2</code></p>
<ul>
<li><p>NR:表示记录数量，在执行过程中对应当前行号；</p>
</li>
<li><p>NF:表示字段数量，在执行过程总对应当前行的字段数；</p>
</li>
<li><ul>
<li>$0:这个变量包含执行过程中当前行的文本内容；</li>
<li>$1:第一个字段的文本内容；</li>
<li>$2:第二个字段的文本内容；</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "line1 f2 f3 line2 line 3"| awk '&#123;print NR":"$0"-"$1"-"$2&#125;'</span><br></pre></td></tr></table></figure>

<p>打印每一行的第二和第三个字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk '&#123;print $2, $3&#125;' file</span><br></pre></td></tr></table></figure>

<p>统计文件的行数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk ' END &#123;print NR&#125;' file</span><br></pre></td></tr></table></figure>

<p>累加每一行的第一个字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "1 2 3 4 "| awk 'BEGIN&#123;num = 0 ;print "begin";&#125; &#123;sum += $1;&#125; END &#123;print "=="; print sum &#125;'</span><br></pre></td></tr></table></figure>

<p>传递外部变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=1000echo | awk '&#123;print vara&#125;' vara=$var #  输入来自stdinawk '&#123;print vara&#125;' vara=$var file # 输入来自文件</span><br></pre></td></tr></table></figure>

<p>用样式对awk处理的行进行过滤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk 'NR &lt; 5' #行号小于5awk 'NR==1,NR==4 &#123;print&#125;' file #行号等于1和4的打印出来awk '/linux/'#包含linux文本的行（可以用正则表达式来指定，超级强大）awk '!/linux/'#不包含linux文本的行</span><br></pre></td></tr></table></figure>

<p>设置定界符</p>
<p>使用-F来设置定界符（默认为空格）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F: '&#123;print $NF&#125;'/etc/passwd</span><br></pre></td></tr></table></figure>

<p>读取命令输出</p>
<p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print cmdout &#125;'</span><br></pre></td></tr></table></figure>

<p>在awk中使用循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for(i=0;i&lt;10;i++)&#123;print $i;&#125;for(i in array)&#123;print array[i];&#125;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>以逆序的形式打印行：(tac命令的实现）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 9|</span><br><span class="line">awk '&#123;lifo[NR] = $0; lno=NR&#125;</span><br><span class="line">END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;</span><br><span class="line">&#125; '</span><br></pre></td></tr></table></figure>

<p>awk实现head、tail命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head:  awk 'NR&lt;=10&#123;print&#125;' filename</span><br><span class="line">tail:  awk '&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123;  print buffer[i %10]&#125; &#125; ' filename</span><br></pre></td></tr></table></figure>

<p>打印指定列</p>
<p>awk方式实现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -lrt | awk '&#123;print $6&#125;'</span><br></pre></td></tr></table></figure>

<p>cut方式实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -lrt | cut -f6</span><br></pre></td></tr></table></figure>

<p>打印指定文本区域</p>
<p>确定行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 100| awk 'NR==4,NR==6&#123;print&#125;'</span><br></pre></td></tr></table></figure>

<p>确定文本</p>
<p>打印处于startpattern 和endpattern之间的文本；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk '/start_pattern/, /end_pattern/' filename</span><br><span class="line">eg:seq 100| awk '/13/,/15/'cat /etc/passwd| awk '/mai.*mail/,/news.*news/'</span><br></pre></td></tr></table></figure>

<p>awk常用内建函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">index(string,search_string):返回search_string在string中出现的位置sub(regex,replacement_str,string):将正则匹配到的第一处内容替换为replacement_str;match(regex,string):检查正则表达式是否能够匹配字符串；length(string)：返回字符串长度</span><br><span class="line">______</span><br><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print length(cmdout) &#125;'</span><br></pre></td></tr></table></figure>

<p>printf 类似c语言中的printf，对输出进行格式化</p>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 10| awk '&#123;printf "-&gt;%4s ", $1&#125;'</span><br></pre></td></tr></table></figure>

<p>迭代文件中的行、单词和字符</p>
<ol>
<li>迭代文件中的每一行</li>
</ol>
<p>while 循环法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while read line;doecho $line;done&lt; file.txt</span><br></pre></td></tr></table></figure>

<p>改成子shell:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt | (while read line;do echo $line;done)</span><br></pre></td></tr></table></figure>

<p>awk法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt| awk '&#123;print&#125;'</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>迭代一行中的每一个单词</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for word in $line;doecho $word;done</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>迭代每一个字符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;$&#123;#word&#125;&#96;&#96;&#96;:返回变量word的长度</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">for((i&#x3D;0;i&lt;$&#123;#word&#125;;i++))doecho $&#123;word:i:1);done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>script</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
