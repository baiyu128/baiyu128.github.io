<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一次使用</title>
    <url>/2020/06/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><a id="more"></a>

<blockquote>
<p>Test for more</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"test for md"</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 项目脚本（启动、停止、重启、状态)</title>
    <url>/2020/06/22/Spring-Boot-%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1575206542142.jpg" alt=""></p>
<p>此脚本用来管理 SpringBoot 项目的进程状态。有提示功能。把脚本丢到项目文件夹, 添加执行权限即可。</p>
<p>如果 jenkins 使用这个脚本, 需要在 java -jar 命令前添加 <code>BUILD_ID=dontKillMe</code> , 不然 jenkins 会杀掉进程。</p>
<a id="more"></a>

<p>参考: <a href="https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m" target="_blank" rel="noopener">https://stackoverflow.com/questions/39169457/how-to-tell-jenkins-not-to-kill-processes-after-successful-execution-of-job-in-m</a></p>
<h3 id="spring-boot-sh"><a href="#spring-boot-sh" class="headerlink" title="spring-boot.sh"></a>spring-boot.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SpringBoot=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入操作名 \033[0m  \033[0;34m &#123;start|stop|restart|status&#125; \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SpringBoot</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m 未输入应用名 \033[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> start()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Start <span class="variable">$SpringBoot</span> success..."</span></span><br><span class="line">        nohup java -jar <span class="variable">$SpringBoot</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stop <span class="variable">$SpringBoot</span>"</span></span><br><span class="line">    boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">kill</span> <span class="variable">$boot_id</span></span><br><span class="line">        count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line"></span><br><span class="line">        boot_id=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$boot_id</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> restart()</span><br><span class="line">&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> status()</span><br><span class="line">&#123;</span><br><span class="line">    count=`ps -ef |grep java|grep <span class="variable">$SpringBoot</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is running..."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$SpringBoot</span> is not running..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    *)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[0;31m Usage: \033[0m  \033[0;34m sh  <span class="variable">$0</span>  &#123;start|stop|restart|status&#125;  &#123;SpringBootJarName&#125; \033[0m</span></span><br><span class="line"><span class="string">\033[0;31m Example: \033[0m</span></span><br><span class="line"><span class="string">      \033[0;33m sh  <span class="variable">$0</span>  start esmart-test.jar \033[0m"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA自定义注解和AOP配合使用</title>
    <url>/2020/07/08/JAVA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8CAOP%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1575352733280.jpg" alt=""></p>
<blockquote>
<p>使用execute到类的方法时遇到的问题：</p>
<ol>
<li>不够灵活**，由于是以所有 Controller 方法中的方法为切面，也就是说切死了，如果说我们不想让某个接口打印出入参日志，就办不到了；</li>
<li>Controller <strong>包层级过深</strong>时，<strong>导致很多包下的接口切不到</strong>；</li>
</ol>
</blockquote>
<p>本文主要说说如何通过自定义注解的方式，在 Spring Boot 中来实现 AOP 切面统一打印出入参日志。</p>
<p>废话不多说，进入正题 ！</p>
<a id="more"></a>

<h2 id="一、先看看切面日志输出效果"><a href="#一、先看看切面日志输出效果" class="headerlink" title="一、先看看切面日志输出效果"></a>一、先看看切面日志输出效果</h2><p>在看看实现方法之前，我们先看下切面日志输出效果咋样：</p>
<p><img src="http://img.baixixi.xyz/1594201343604.jpg" alt="Spring boot 自定义注解，aop切面统一打印请求日志效果图"></p>
<p>从上图中可以看到，每个对于每个请求，开始与结束一目了然，并且打印了以下参数：</p>
<ul>
<li><strong>URL</strong>: 请求接口地址；</li>
<li><strong>Description</strong>: 接口的中文说明信息；</li>
<li><strong>HTTP Method</strong>: 请求的方法，是 <code>POST</code>, <code>GET</code>, 还是 <code>DELETE</code> 等；</li>
<li><strong>Class Method</strong>: 被请求的方法路径 : <strong>包名 + 方法名</strong>;</li>
<li><strong>IP</strong>: 请求方的 IP 地址；</li>
<li><strong>Request Args</strong>: 请求入参，以 JSON 格式输出；</li>
<li><strong>Response Args</strong>: 响应出参，以 JSON 格式输出；</li>
<li><strong>Time-Consuming</strong>: 请求耗时，以此估算每个接口的性能指数；</li>
</ul>
<p>怎么样？看上去效果还不错呢？接下来看看，我们要如何一步一步实现它呢？</p>
<h2 id="二、添加-AOP-Maven-依赖"><a href="#二、添加-AOP-Maven-依赖" class="headerlink" title="二、添加 AOP Maven 依赖"></a>二、添加 AOP Maven 依赖</h2><p>在项目 <code>pom.xml</code> 文件中添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- aop 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于日志切面中，以 json 格式打印出入参 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、自定义日志注解"><a href="#三、自定义日志注解" class="headerlink" title="三、自定义日志注解"></a>三、自定义日志注解</h2><p>让我们来自定义一个日志注解，如下所示：</p>
<p>自定义注解</p>
<ul>
<li><strong>①</strong> Retention：什么时候使用该注解，我们定义为运行时；</li>
<li><strong>②</strong> Target：注解用于什么地方，我们定义为作用于方法上；</li>
<li><strong>③</strong> Documented：注解是否将包含在 JavaDoc 中；</li>
<li><strong>④</strong> ：注解名为 <code>WebLog</code>;</li>
<li><strong>⑤</strong> description：定义一个属性，默认为空字符串；</li>
</ul>
<p>源代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebLog &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 日志描述信息</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，一个完整的自定义注解就定义完成了。</p>
<h2 id="四、配置-AOP-切面"><a href="#四、配置-AOP-切面" class="headerlink" title="四、配置 AOP 切面"></a>四、配置 AOP 切面</h2><p>在配置 AOP 切面之前，我们需要了解下 <code>aspectj</code> 相关注解的作用：</p>
<ul>
<li><strong>@Aspect</strong>：声明该类为一个注解类；</li>
<li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li>
</ul>
<p>切点定义好后，就是围绕这个切点做文章了：</p>
<ul>
<li><strong>@Before</strong>: 在切点之前，织入相关代码；</li>
<li><strong>@After</strong>: 在切点之后，织入相关代码;</li>
<li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li>
<li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理;</li>
<li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li>
</ul>
<p>注解执行顺序：</p>
<p>​        Around -&gt;before -&gt; 接口种的逻辑代码 -&gt;after -&gt; afterReturning</p>
<p>接下来，定义一个 <code>WebLogAspect.java</code> 切面类，声明一个切点：</p>
<p>然后，定义 <code>@Around</code> 环绕，用于何时执行切点：</p>
<ul>
<li><strong>①</strong> startTime：记录一下调用接口的开始时间；</li>
<li><strong>②</strong> result：执行切点，执行切点后，会去依次调用 <strong>@Before -&gt; 接口逻辑代码 -&gt; @After -&gt; @AfterReturning</strong>；</li>
<li><strong>③</strong> ：打印出参；</li>
<li><strong>④</strong> ：打印接口处理耗时；</li>
<li><strong>⑤</strong>：返回接口返参结果；</li>
</ul>
<p>再来看看 <code>@Before</code> 方法：</p>
<p>看注释功能说明，因为注释说得还是比较清楚的！</p>
<p>最后，用 <code>@After</code> 来做个收尾：</p>
<p>我们在每个接口的最后，打印日志结束标志。最后再看下项目包结构：</p>
<p><img src="http://img.baixixi.xyz/1594201366349.jpg" alt="bao.jpg"></p>
<p>到这里，切面相关的代码就完成了！</p>
<p>上完整代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.exception.springbootaopwebrequest.aspect;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.context.annotation.Profile;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span><br><span class="line">public class WebLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger logger         &#x3D; LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line">    &#x2F;** 换行符 *&#x2F;</span><br><span class="line">    private static final String LINE_SEPARATOR &#x3D; System.lineSeparator();</span><br><span class="line"></span><br><span class="line">    &#x2F;** 以自定义 @WebLog 注解为切点 *&#x2F;</span><br><span class="line">    @Pointcut(&quot;@annotation(site.exception.springbootaopwebrequest.aspect.WebLog)&quot;)</span><br><span class="line">    public void webLog() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之前织入</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Before(&quot;webLog()&quot;)</span><br><span class="line">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 开始打印请求日志</span><br><span class="line">        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request &#x3D; attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取 @WebLog 注解的描述信息</span><br><span class="line">        String methodDescription &#x3D; getAspectLogDescription(joinPoint);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 打印请求相关参数</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Start &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#x2F;&#x2F; 打印请求 url</span><br><span class="line">        logger.info(&quot;URL            : &#123;&#125;&quot;, request.getRequestURL().toString());</span><br><span class="line">        &#x2F;&#x2F; 打印描述信息</span><br><span class="line">        logger.info(&quot;Description    : &#123;&#125;&quot;, methodDescription);</span><br><span class="line">        &#x2F;&#x2F; 打印 Http method</span><br><span class="line">        logger.info(&quot;HTTP Method    : &#123;&#125;&quot;, request.getMethod());</span><br><span class="line">        &#x2F;&#x2F; 打印调用 controller 的全路径以及执行方法</span><br><span class="line">        logger.info(&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;, joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());</span><br><span class="line">        &#x2F;&#x2F; 打印请求的 IP</span><br><span class="line">        logger.info(&quot;IP             : &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line">        &#x2F;&#x2F; 打印请求入参</span><br><span class="line">        logger.info(&quot;Request Args   : &#123;&#125;&quot;, new Gson().toJson(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 在切点之后织入</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @After(&quot;webLog()&quot;)</span><br><span class="line">    public void doAfter() throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; 接口结束后换行，方便分割查看</span><br><span class="line">        logger.info(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; End &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + LINE_SEPARATOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 环绕</span><br><span class="line">     * @param proceedingJoinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Around(&quot;webLog()&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">        long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        Object result &#x3D; proceedingJoinPoint.proceed();</span><br><span class="line">        &#x2F;&#x2F; 打印出参</span><br><span class="line">        logger.info(&quot;Response Args  : &#123;&#125;&quot;, new Gson().toJson(result));</span><br><span class="line">        &#x2F;&#x2F; 执行耗时</span><br><span class="line">        logger.info(&quot;Time-Consuming : &#123;&#125; ms&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取切面注解的描述</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     * @return 描述信息</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getAspectLogDescription(JoinPoint joinPoint)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        String targetName &#x3D; joinPoint.getTarget().getClass().getName();</span><br><span class="line">        String methodName &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">        Object[] arguments &#x3D; joinPoint.getArgs();</span><br><span class="line">        Class targetClass &#x3D; Class.forName(targetName);</span><br><span class="line">        Method[] methods &#x3D; targetClass.getMethods();</span><br><span class="line">        StringBuilder description &#x3D; new StringBuilder(&quot;&quot;);</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            if (method.getName().equals(methodName)) &#123;</span><br><span class="line">                Class[] clazzs &#x3D; method.getParameterTypes();</span><br><span class="line">                if (clazzs.length &#x3D;&#x3D; arguments.length) &#123;</span><br><span class="line">                    description.append(method.getAnnotation(WebLog.class).description());</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return description.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、怎么使用呢？"><a href="#五、怎么使用呢？" class="headerlink" title="五、怎么使用呢？"></a>五、怎么使用呢？</h2><p>因为我们的切点是自定义注解 <code>@WebLog</code>, 所以我们仅仅需要在 Controller 控制器的每个接口方法添加 @WebLog 注解即可，如果我们不想某个接口打印出入参日志，不加注解就可以了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"><span class="meta">@WebLog</span>(description=<span class="string">"请求了用户登录接口"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">userLogin</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">  logger.info(<span class="string">"user login ..."</span>);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、对于文件上传好使不？"><a href="#六、对于文件上传好使不？" class="headerlink" title="六、对于文件上传好使不？"></a>六、对于文件上传好使不？</h2><p>是好使的！不论是单文件上传，抑或是多文件上传，切面日志均运行良好，这里测试的东西，就不贴出来了。有兴趣的小伙伴可以试试！</p>
<h2 id="七、只想在开发环境和测试环境中使用？"><a href="#七、只想在开发环境和测试环境中使用？" class="headerlink" title="七、只想在开发环境和测试环境中使用？"></a>七、只想在开发环境和测试环境中使用？</h2><p>对于那些性能要求较高的应用，不想在生产环境中打印日志，只想在开发环境或者测试环境中使用，要怎么做呢？我们只需为切面添加 <code>@Profile</code> 就可以了，如下图所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Compent</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>,<span class="string">"test"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger  logger = LoggerFactory.getLogger(WebLogAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就指定了只能作用于 <code>dev</code> 开发环境和 <code>test</code> 测试环境，生产环境 <code>prod</code> 是不生效的！</p>
<h2 id="八、多切面如何指定优先级？"><a href="#八、多切面如何指定优先级？" class="headerlink" title="八、多切面如何指定优先级？"></a>八、多切面如何指定优先级？</h2><p>假设说我们的服务中不止定义了一个切面，比如说我们针对 Web 层的接口，不止要打印日志，还要校验 token 等。要如何指定切面的优先级呢？也就是如何指定切面的执行顺序？</p>
<p>我们可以通过 <code>@Order(i)</code>注解来指定优先级，注意：<strong>i 值越小，优先级则越高</strong>。</p>
<p>假设说我们定义上面这个日志切面的优先级为 <code>@Order(10)</code>, 然后我们还有个校验 <code>token</code> 的切面 <code>CheckTokenAspect.java</code>，我们定义为了 <code>@Order(11)</code>, 那么它们之间的执行顺序如下：</p>
<p><img src="http://img.baixixi.xyz/1594201354572.jpg" alt="order.jpg"></p>
<p>我们可以总结一下：</p>
<ul>
<li>在切点之前，<code>@Order</code> 从小到大被执行，也就是说越小的优先级越高；</li>
<li>在切点之后，<code>@Order</code> 从大到小被执行，也就是说越大的优先级越高；</li>
</ul>
]]></content>
      <categories>
        <category>AOP</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell 文本处理工具集锦</title>
    <url>/2020/07/16/Linux-Shell-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<p><img src="http://img.baixixi.xyz/1585831666724.jpg" alt="tu"></p>
<p>【转】本文将介绍Linux下使用Shell处理文本时最常用的工具：</p>
<p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p>
<p>提供的例子和参数都是最常用和最为实用的；</p>
<p>对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p>
<p>如果有更为复杂的任务需求，还是考虑python吧；</p>
<a id="more"></a>

<h3 id="01-find-文件查找"><a href="#01-find-文件查找" class="headerlink" title="01 find 文件查找"></a>01 find 文件查找</h3><p>1 查找txt和pdf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ( -name "*.txt"-o -name "*.pdf") -print</span><br></pre></td></tr></table></figure>

<p>2 正则方式查找.txt和pdf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -regex  ".*(.txt|.pdf)$"</span><br></pre></td></tr></table></figure>

<p>-iregex：忽略大小写的正则</p>
<p>3 否定参数</p>
<p>查找所有非txt文本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ! -name "*.txt"-print</span><br></pre></td></tr></table></figure>

<p>4 指定搜索深度</p>
<p>打印出当前目录的文件（深度为1）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1-type f</span><br></pre></td></tr></table></figure>

<p>5 定制搜索</p>
<p>按类型搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type d -print  //只列出所有目录-type f 文件 / l 符号链接</span><br></pre></td></tr></table></figure>

<p>按时间搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</span><br><span class="line">-mtime 修改时间 （内容被修改）</span><br><span class="line">-ctime 变化时间 （元数据或权限变化）</span><br></pre></td></tr></table></figure>

<p>最近7天被访问过的所有文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -atime 7-type f -print</span><br></pre></td></tr></table></figure>

<p>按大小搜索：</p>
<p>w字 k M G</p>
<p>寻找大于2k的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -size +2k</span><br></pre></td></tr></table></figure>

<p>按权限查找：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -perm 644-print //找具有可执行权限的所有文件</span><br></pre></td></tr></table></figure>

<p>按用户查找：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -user weber -print// 找用户weber所拥有的文件</span><br></pre></td></tr></table></figure>

<p>6 找到后的后续动作</p>
<p>删除：</p>
<p>删除当前目录下所有的swp文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -name "*.swp"-delete</span><br></pre></td></tr></table></figure>

<p>执行动作（强大的exec）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -user root -exec chown weber &#123;&#125; ; //将当前目录下的所有权变更为weber</span><br></pre></td></tr></table></figure>

<p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；</p>
<p>eg：将找到的文件全都copy到另一个目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -type f -mtime +10-name "*.txt"-exec cp &#123;&#125; OLD ;</span><br></pre></td></tr></table></figure>

<p>7 结合多个命令</p>
<p>tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-exec ./commands.sh &#123;&#125; ;</span><br></pre></td></tr></table></figure>

<p>-print的定界符</p>
<p>默认使用’ ‘作为文件的定界符；</p>
<p>-print0 使用’’作为文件的定界符，这样就可以搜索包含空格的文件；</p>
<h3 id="02-grep-文本搜索"><a href="#02-grep-文本搜索" class="headerlink" title="02 grep 文本搜索"></a>02 grep 文本搜索</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep match_patten file // 默认访问匹配行</span><br></pre></td></tr></table></figure>

<p>常用参数:</p>
<ul>
<li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li>
<li>-c 统计文件中包含文本的次数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -c "text" filename</span><br></pre></td></tr></table></figure>

<ul>
<li>-n 打印匹配的行号</li>
<li>-i 搜索时忽略大小写</li>
<li>-l 只打印文件名</li>
</ul>
<p>1 在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "class". -R -n</span><br></pre></td></tr></table></figure>

<p>2 匹配多个模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -e "class"-e "vitural" file</span><br></pre></td></tr></table></figure>

<p>3 grep输出以作为结尾符的文件名：（-z）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep "test" file* -lZ| xargs -0 rm</span><br></pre></td></tr></table></figure>

<p>4 xargs 命令行参数转换</p>
<p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；</p>
<p>将多行输出转化为单行输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt| xargs</span><br></pre></td></tr></table></figure>

<p>是多行文本间的定界符</p>
<p>将单行转化为多行输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat single.txt | xargs -n 3</span><br></pre></td></tr></table></figure>

<p>-n：指定每行显示的字段数</p>
<p>xargs参数说明</p>
<ul>
<li>-d 定义定界符 （默认为空格 多行的定界符为 ）</li>
<li>-n 指定输出为多行</li>
<li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li>
</ul>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1</span><br></pre></td></tr></table></figure>

<p>-0：指定为输入定界符</p>
<p>eg：统计程序行数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find source_dir/ -type f -name "*.cpp"-print0 |xargs -0 wc -l</span><br></pre></td></tr></table></figure>

<h3 id="03-sort-排序"><a href="#03-sort-排序" class="headerlink" title="03 sort 排序"></a>03 sort 排序</h3><p>字段说明：</p>
<ul>
<li>-n 按数字进行排序 VS -d 按字典序进行排序</li>
<li>-r 逆序排序</li>
<li>-k N 指定按第N列排序</li>
</ul>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort -nrk 1 data.txtsort -bd data // 忽略像空格之类的前导空白字符</span><br></pre></td></tr></table></figure>

<h3 id="04-uniq-消除重复行"><a href="#04-uniq-消除重复行" class="headerlink" title="04 uniq 消除重复行"></a>04 uniq 消除重复行</h3><p>消除重复行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq</span><br></pre></td></tr></table></figure>

<p>统计各行在文件中出现的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq -c</span><br></pre></td></tr></table></figure>

<p>找出重复行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort unsort.txt | uniq -d</span><br></pre></td></tr></table></figure>

<p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p>
<h3 id="05-用-tr-进行转换"><a href="#05-用-tr-进行转换" class="headerlink" title="05 用 tr 进行转换"></a>05 用 tr 进行转换</h3><p>通用用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 12345| tr '0-9''9876543210'//加解密转换，替换对应字符cat text| tr '    '' '//制表符转空格</span><br></pre></td></tr></table></figure>

<p>tr删除字符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -d '0-9'// 删除所有数字</span><br></pre></td></tr></table></figure>

<p>-c 求补集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -c '0-9'//获取文件中所有数字cat file | tr -d -c '0-9 '//删除非数字数据</span><br></pre></td></tr></table></figure>

<p>tr压缩字符</p>
<p>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr -s ' '</span><br></pre></td></tr></table></figure>

<p>字符类</p>
<p>tr中可用各种字符类：</p>
<ul>
<li>alnum：字母和数字</li>
<li>alpha：字母</li>
<li>digit：数字</li>
<li>space：空白字符</li>
<li>lower：小写</li>
<li>upper：大写</li>
<li>cntrl：控制（非可打印）字符</li>
</ul>
<p>print：可打印字符</p>
<p>使用方法：<code>tr [:class:] [:class:]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg: tr '[:lower:]''[:upper:]'</span><br></pre></td></tr></table></figure>

<h3 id="06-cut-按列切分文本"><a href="#06-cut-按列切分文本" class="headerlink" title="06 cut 按列切分文本"></a>06 cut 按列切分文本</h3><p>截取文件的第2列和第4列：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f2,4 filename</span><br></pre></td></tr></table></figure>

<p>去文件除第3列的所有列：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f3 --complement filename</span><br></pre></td></tr></table></figure>

<p>-d 指定定界符：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat -f2 -d";" filename</span><br></pre></td></tr></table></figure>

<p>cut 取的范围</p>
<ul>
<li>N- 第N个字段到结尾</li>
<li>-M 第1个字段为M</li>
<li>N-M N到M个字段</li>
</ul>
<p>cut 取的单位</p>
<ul>
<li>-b 以字节为单位</li>
<li>-c 以字符为单位</li>
<li>-f 以字段为单位（使用定界符）</li>
</ul>
<p>eg:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -c1-5 file //打印第一到5个字符cut -c-2 file  //打印前2个字符</span><br></pre></td></tr></table></figure>

<h3 id="07-paste-按列拼接文本"><a href="#07-paste-按列拼接文本" class="headerlink" title="07 paste 按列拼接文本"></a>07 paste 按列拼接文本</h3><p>将两个文本按列拼接到一起;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file1</span><br><span class="line">12</span><br><span class="line">cat file2</span><br><span class="line">colinbook</span><br><span class="line">paste file1 file2</span><br><span class="line">1 colin2 book</span><br></pre></td></tr></table></figure>

<p>默认的定界符是制表符，可以用-d指明定界符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">paste file1 file2 -d ","</span><br><span class="line">1,colin2,book</span><br></pre></td></tr></table></figure>

<h3 id="08-wc-统计行和字符的工具"><a href="#08-wc-统计行和字符的工具" class="headerlink" title="08 wc 统计行和字符的工具"></a>08 wc 统计行和字符的工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc -l file // 统计行数wc -w file // 统计单词数wc -c file // 统计字符数</span><br></pre></td></tr></table></figure>

<h3 id="09-sed-文本替换利器"><a href="#09-sed-文本替换利器" class="headerlink" title="09 sed 文本替换利器"></a>09 sed 文本替换利器</h3><p>首处替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg 's/text/replace_text/' file   //替换每一行的第一处匹配的text</span><br></pre></td></tr></table></figure>

<p>全局替换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg 's/text/replace_text/g' file</span><br></pre></td></tr></table></figure>

<p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seg -i 's/text/repalce_text/g' file</span><br></pre></td></tr></table></figure>

<p>移除空白行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed '/^$/d' file</span><br></pre></td></tr></table></figure>

<p>变量转换</p>
<p>已匹配的字符串通过标记&amp;来引用.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo this is en example | seg 's/w+/[&amp;]/g'</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;[this]  [is] [en] [example]</span></span><br></pre></td></tr></table></figure>

<p>子串匹配标记</p>
<p>第一个匹配的括号内容使用标记 来引用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/hello([0-9])//'</span><br></pre></td></tr></table></figure>

<p>双引号求值</p>
<p>sed通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/$var/HLLOE/'</span><br></pre></td></tr></table></figure>

<p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eg:p=pattenr=replacedecho "line con a patten"| sed "s/$p/$r/g"$&gt;line con a replaced</span><br></pre></td></tr></table></figure>

<p>其它示例</p>
<p>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK/SHA</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed 's/^.&#123;3&#125;/&amp;//g' file</span><br></pre></td></tr></table></figure>

<h3 id="10-awk-数据流处理工具"><a href="#10-awk-数据流处理工具" class="headerlink" title="10 awk 数据流处理工具"></a>10 awk 数据流处理工具</h3><p>awk脚本结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk ' BEGIN&#123; statements &#125; statements2 END&#123; statements &#125; '</span><br></pre></td></tr></table></figure>

<p>工作方式</p>
<p>1.执行begin中语句块；</p>
<p>2.从文件或stdin中读入一行，然后执行statements2，重复这个过程，直到文件全部被读取完毕；</p>
<p>3.执行end语句块；</p>
<p>print 打印当前行</p>
<p>使用不带参数的print时，会打印当前行;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "line1 line2"| awk 'BEGIN&#123;print "start"&#125; &#123;print &#125; END&#123; print "End" &#125;'</span><br></pre></td></tr></table></figure>

<p>print 以逗号分割时，参数以空格定界;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1, var2 , var3; &#125;'$&gt;v1 V2 v3</span><br></pre></td></tr></table></figure>

<p>使用-拼接符的方式（””作为拼接符）;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk ' &#123;var1 = "v1" ; var2 = "V2"; var3="v3";print var1"-"var2"-"var3; &#125;'$&gt;v1-V2-v3</span><br></pre></td></tr></table></figure>

<p>特殊变量：<code>NR NF $0 $1 $2</code></p>
<ul>
<li><p>NR:表示记录数量，在执行过程中对应当前行号；</p>
</li>
<li><p>NF:表示字段数量，在执行过程总对应当前行的字段数；</p>
</li>
<li><ul>
<li>$0:这个变量包含执行过程中当前行的文本内容；</li>
<li>$1:第一个字段的文本内容；</li>
<li>$2:第二个字段的文本内容；</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "line1 f2 f3 line2 line 3"| awk '&#123;print NR":"$0"-"$1"-"$2&#125;'</span><br></pre></td></tr></table></figure>

<p>打印每一行的第二和第三个字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk '&#123;print $2, $3&#125;' file</span><br></pre></td></tr></table></figure>

<p>统计文件的行数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk ' END &#123;print NR&#125;' file</span><br></pre></td></tr></table></figure>

<p>累加每一行的第一个字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e "1 2 3 4 "| awk 'BEGIN&#123;num = 0 ;print "begin";&#125; &#123;sum += $1;&#125; END &#123;print "=="; print sum &#125;'</span><br></pre></td></tr></table></figure>

<p>传递外部变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=1000echo | awk '&#123;print vara&#125;' vara=$var #  输入来自stdinawk '&#123;print vara&#125;' vara=$var file # 输入来自文件</span><br></pre></td></tr></table></figure>

<p>用样式对awk处理的行进行过滤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk 'NR &lt; 5' #行号小于5awk 'NR==1,NR==4 &#123;print&#125;' file #行号等于1和4的打印出来awk '/linux/'#包含linux文本的行（可以用正则表达式来指定，超级强大）awk '!/linux/'#不包含linux文本的行</span><br></pre></td></tr></table></figure>

<p>设置定界符</p>
<p>使用-F来设置定界符（默认为空格）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F: '&#123;print $NF&#125;'/etc/passwd</span><br></pre></td></tr></table></figure>

<p>读取命令输出</p>
<p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print cmdout &#125;'</span><br></pre></td></tr></table></figure>

<p>在awk中使用循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for(i=0;i&lt;10;i++)&#123;print $i;&#125;for(i in array)&#123;print array[i];&#125;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>以逆序的形式打印行：(tac命令的实现）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 9|</span><br><span class="line">awk '&#123;lifo[NR] = $0; lno=NR&#125;</span><br><span class="line">END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;</span><br><span class="line">&#125; '</span><br></pre></td></tr></table></figure>

<p>awk实现head、tail命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head:  awk 'NR&lt;=10&#123;print&#125;' filename</span><br><span class="line">tail:  awk '&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123;  print buffer[i %10]&#125; &#125; ' filename</span><br></pre></td></tr></table></figure>

<p>打印指定列</p>
<p>awk方式实现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -lrt | awk '&#123;print $6&#125;'</span><br></pre></td></tr></table></figure>

<p>cut方式实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -lrt | cut -f6</span><br></pre></td></tr></table></figure>

<p>打印指定文本区域</p>
<p>确定行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 100| awk 'NR==4,NR==6&#123;print&#125;'</span><br></pre></td></tr></table></figure>

<p>确定文本</p>
<p>打印处于startpattern 和endpattern之间的文本；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk '/start_pattern/, /end_pattern/' filename</span><br><span class="line">eg:seq 100| awk '/13/,/15/'cat /etc/passwd| awk '/mai.*mail/,/news.*news/'</span><br></pre></td></tr></table></figure>

<p>awk常用内建函数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">index(string,search_string):返回search_string在string中出现的位置sub(regex,replacement_str,string):将正则匹配到的第一处内容替换为replacement_str;match(regex,string):检查正则表达式是否能够匹配字符串；length(string)：返回字符串长度</span><br><span class="line">______</span><br><span class="line">echo | awk '&#123;"grep root /etc/passwd" | getline cmdout; print length(cmdout) &#125;'</span><br></pre></td></tr></table></figure>

<p>printf 类似c语言中的printf，对输出进行格式化</p>
<p>eg：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seq 10| awk '&#123;printf "-&gt;%4s ", $1&#125;'</span><br></pre></td></tr></table></figure>

<p>迭代文件中的行、单词和字符</p>
<ol>
<li>迭代文件中的每一行</li>
</ol>
<p>while 循环法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while read line;doecho $line;done&lt; file.txt</span><br></pre></td></tr></table></figure>

<p>改成子shell:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt | (while read line;do echo $line;done)</span><br></pre></td></tr></table></figure>

<p>awk法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt| awk '&#123;print&#125;'</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>迭代一行中的每一个单词</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for word in $line;doecho $word;done</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>迭代每一个字符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;string:startpos:numof_chars&#125;：从字符串中提取一个字符；(bash文本切片）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;#word&#125;:返回变量word的长度</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for((i=0;i&lt;$&#123;#word&#125;;i++))doecho $&#123;word:i:1);done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>script</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>基于AOP和redis实现接口锁</title>
    <url>/2020/07/24/%E5%9F%BA%E4%BA%8EAOP%E5%92%8Credis%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>在一些新增接口或者更新接口中，由于服务器可能反应稍微有点延迟，导致同一个操作被发送多次让服务器执行，为了实现接口的幂等性，使用redis锁来实现，为了方便在多个接口实现该功能，使用aop来实现加锁。</p>
<p>该方法适用于单个服务的项目。</p>
</blockquote>
<a id="more"></a>

<h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用于操作redis，在使用前，需要根据项目判断是否自定义redisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"stringTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"memberTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Member&gt; <span class="title">memberRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Member&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> FastJsonRedisSerializer&lt;&gt;(Member<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二、定义切点注解"><a href="#二、定义切点注解" class="headerlink" title="二、定义切点注解"></a>二、定义切点注解</h3><p>此注解添加在需要加锁的方法上，根据需要添加参数，该参数用于生成锁的key值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 被此注解标注的方法，将被使用redis的接口锁，用于aop对方法的识别</span><br><span class="line"> * @author baiyu</span><br><span class="line"> * @data 2020-07-08 15:39</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface ApiLock &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 如果type是直接参数，那么，直接从此获取参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String[] paramNames();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *  是直接参数还是间接参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    ApiLockEnum type();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 如果不是直接参数@ApiLockEnum.UNDIRECT,就先找到此参数，在从此参数中获取上面paramNames的具体参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    String outerParam() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用于标记直接参数或者间接参数的常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ApiLockEnum &#123;</span><br><span class="line">    DIRECT, UNDIRECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h3><p>实现加锁解锁的aop主逻辑，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口redis锁的aop，redis锁的获取与释放的统一管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhengguochun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-07-08 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiLockAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"stringTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CURRENT_AOP_TYPE_PREFIX = <span class="string">"ApiLock AOP : "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.ymkj.property.annotation.ApiLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cutApiLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"cutApiLock()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"in aop "</span>);</span><br><span class="line">        MethodSignature signature =(MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="comment">// 1. 获取propertyId</span></span><br><span class="line">        Class targetClass = pjp.getTarget().getClass();</span><br><span class="line">        Class superClass = targetClass.getSuperclass();</span><br><span class="line">        Field field = superClass.getDeclaredField(<span class="string">"propertyId"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object propertyIdObj = field.get(pjp.getTarget());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == propertyIdObj)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PROPERTY_ID_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        Integer propertyId = (Integer) propertyIdObj;</span><br><span class="line">        <span class="comment">// 2. 获取ApiLock注解中的参数，判断是否是直接参数</span></span><br><span class="line">        ApiLock apiLock = signature.getMethod().getAnnotation(ApiLock<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3. 获取ParameterName , args，根据ApiLock中的参数获取参数名</span></span><br><span class="line">        String[] parameterNames = signature.getParameterNames();</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        List&lt;String&gt; paraNames = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(apiLock.paramNames()));</span><br><span class="line">        List&lt;String&gt; finalResult = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (ApiLockEnum.DIRECT.equals(apiLock.type()))&#123;</span><br><span class="line">            <span class="comment">// 2.1 是直接参数， 则直接去方法参数中取</span></span><br><span class="line">            <span class="keyword">int</span> paramSize = parameterNames.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramSize; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (paraNames.contains(parameterNames[i]))&#123;</span><br><span class="line">                    finalResult.add(args[i].toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 2.2 不是直接参数，则先去apiLock.outerParam中取参数</span></span><br><span class="line">            String outerParam = apiLock.outerParam();</span><br><span class="line">            <span class="keyword">int</span> paramSize = parameterNames.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramSize; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (outerParam.equals(parameterNames[i]))&#123;</span><br><span class="line">                     Object outerParamObject = args[i];</span><br><span class="line">                    <span class="keyword">for</span> (String paraName : paraNames) &#123;</span><br><span class="line">                        Field currentParam = outerParamObject.getClass().getDeclaredField(paraName);</span><br><span class="line">                        currentParam.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        Object paramObj = currentParam.get(outerParamObject);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != paramObj)&#123;</span><br><span class="line">                            finalResult.add(paramObj.toString());</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            log.error(<span class="string">"param &#123;&#125; 为空"</span>, paraName);</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PARAMETER_NULL_EXCEPTION);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String redisKey = RedisDistributedLock.generateApiKey(propertyId, finalResult);</span><br><span class="line">        log.info(<span class="string">"redis key : &#123;&#125;"</span>, redisKey);</span><br><span class="line">        <span class="comment">// 5. 将参数传入acquireLock方法，加锁</span></span><br><span class="line">        RedisDistributedLock redisDistributedLock = <span class="keyword">new</span> RedisDistributedLock(redisTemplate,redisKey);</span><br><span class="line">        String result = redisDistributedLock.aquireNeverWaitLock();</span><br><span class="line">        log.info(<span class="string">"get lock result : &#123;&#125;"</span>, result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == result)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.CHECK_IN_HANDLING);</span><br><span class="line">        &#125;</span><br><span class="line">        Object response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 6. 执行接口</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"开始执行接口"</span>);</span><br><span class="line">            response = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125;, message &#123;&#125;"</span>, CURRENT_AOP_TYPE_PREFIX , throwable.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopException(ResponseBase.expectationFailed(throwable.getMessage()));</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            log.info(<span class="string">"release lock"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> re = redisDistributedLock.release();</span><br><span class="line">            <span class="keyword">if</span> (re)&#123;</span><br><span class="line">                log.info(<span class="string">"释放成功"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"释放失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、redis锁的工具类"><a href="#四、redis锁的工具类" class="headerlink" title="四、redis锁的工具类"></a>四、redis锁的工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_PREFIX = <span class="string">"redis_lock-"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MANEUVER_SLEEP_TIME = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BATCH_CHECK_KEY = <span class="string">"batchCheckMember-"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_CHECK_KEY = <span class="string">"api_key-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> expireTime = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> acquireTimeout = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEVER_WAIT_LOCK_EXPIRE_TIME = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPARE_AND_DELETE =</span><br><span class="line">            <span class="string">"if redis.call('get',KEYS[1]) == ARGV[1] then return redis.call('del',KEYS[1]) else  return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁成功返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_LOCK_SUCCESS_RESULT = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey, <span class="keyword">int</span> acquireTimeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">        <span class="keyword">this</span>.acquireTimeout = acquireTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisDistributedLock</span><span class="params">(RedisTemplate&lt;String, String&gt; template, String lockKey, <span class="keyword">int</span> acquireTimeout, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">        <span class="keyword">this</span>.lockKey = lockKey;</span><br><span class="line">        <span class="keyword">this</span>.acquireTimeout = acquireTimeout;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> RedisDistributedLockException </span>&#123;</span><br><span class="line">            <span class="comment">// 获取锁的超时时间，超过这个时间则放弃获取锁</span></span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis() + acquireTimeout;</span><br><span class="line">            <span class="comment">// 随机生成一个value</span></span><br><span class="line">            value = lockKey;</span><br><span class="line">            <span class="keyword">while</span> (System.currentTimeMillis() &lt; end) &#123;</span><br><span class="line">                <span class="comment">//String result = redisTemplate.set(lockKey, requireToken, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span></span><br><span class="line">                Boolean result = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = template.opsForValue().setIfAbsent(lockKey ,value, expireTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"acquire lock due to error "</span>, e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_ACQUIRE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    log.info(<span class="string">"&#123;&#125; acquire lock"</span>, lockKey);</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(MANEUVER_SLEEP_TIME);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">()</span> <span class="keyword">throws</span> RedisDistributedLockException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; keys = Collections.singletonList(lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(COMPARE_AND_DELETE, Long<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Long result = template.execute(redisScript,keys, value);</span><br><span class="line">            log.info(<span class="string">"结果 &#123;&#125;"</span>, result);</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(result, RELEASE_LOCK_SUCCESS_RESULT))&#123;</span><br><span class="line">                log.info(<span class="string">"&#123;&#125; release lock"</span>, lockKey);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_RELEASE_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不等待，不block的排他锁，有人拿到锁之后，在持有锁的期间，其他人不可以拿到锁，等待主动释放或者超时</span></span><br><span class="line"><span class="comment">     * 超时时间6个小时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">aquireNeverWaitLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Boolean result = <span class="keyword">false</span>;</span><br><span class="line">        value = lockKey;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = template.opsForValue().setIfAbsent(lockKey ,value, NEVER_WAIT_LOCK_EXPIRE_TIME, TimeUnit.HOURS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"acquire lock due to error "</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisDistributedLockException(ResponseCode.REDIS_LOCK_ACQUIRE_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result)&#123;</span><br><span class="line">            <span class="keyword">return</span> lockKey;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateKey</span><span class="params">(Integer propertyId, String openId)</span></span>&#123;</span><br><span class="line">        <span class="comment">//return new StringBuilder(REDIS_LOCK_PREFIX).append(propertyId.toString()).append("-").append(openId).toString();</span></span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + propertyId + <span class="string">"-"</span> + openId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateBatchKey</span><span class="params">(<span class="keyword">int</span> propertyId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + BATCH_CHECK_KEY + propertyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateApiKey</span><span class="params">(<span class="keyword">int</span> propertyId, List&lt;String&gt; param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == param || param.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(ResponseCode.PARAMETER_NULL_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ids = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String oneId : param) &#123;</span><br><span class="line">            ids.append(oneId);</span><br><span class="line">        &#125;</span><br><span class="line">        String finalStr = <span class="string">""</span>;</span><br><span class="line">        log.info(<span class="string">"origin param : &#123;&#125;"</span>, ids.toString());</span><br><span class="line">        <span class="keyword">if</span> (ids.length() &gt; <span class="number">32</span>)&#123;</span><br><span class="line">            finalStr = DigestUtils.md5DigestAsHex(ids.toString().getBytes());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            finalStr = ids.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> REDIS_LOCK_PREFIX + API_CHECK_KEY + propertyId + <span class="string">"_"</span> + finalStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>AOP</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁用Redis还是Zookeeper</title>
    <url>/2020/07/27/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%94%A8Redis%E8%BF%98%E6%98%AFZookeeper/</url>
    <content><![CDATA[<h2 id="为什么用分布式锁？"><a href="#为什么用分布式锁？" class="headerlink" title="为什么用分布式锁？"></a>为什么用分布式锁？</h2><p>在讨论这个问题之前，我们先来看一个业务场景：</p>
<p>系统A是一个电商系统，目前是一台机器部署，系统中有一个用户下订单的接口，但是用户下订单之前一定要去检查一下库存，确保库存足够了才会给用户下单。</p>
<p>由于系统有一定的并发，所以会预先将商品的库存保存在redis中，用户下单的时候会更新redis的库存。</p>
<a id="more"></a>

<p>此时系统架构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单| B[系统A]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|5.继续执行| D[后续业务逻辑]</span><br><span class="line">B--&gt;|3.锁定库存| E[数据库]</span><br></pre></td></tr></table></figure>

<p>但是这样一来会<strong>产生一个问题</strong>：假如某个时刻，redis里面的某个商品库存为1，此时两个请求同时到来，其中一个请求执行到上图的第3步，更新数据库的库存为0，但是第4步还没有执行。</p>
<p>而另外一个请求执行到了第2步，发现库存还是1，就继续执行第3步。</p>
<p>这样的结果，是导致卖出了2个商品，然而其实库存只有1个。</p>
<p>很明显不对啊！这就是典型的<strong>库存超卖问题</strong></p>
<p>此时，我们很容易想到解决方案：用锁把2、3、4步锁住，让他们执行完之后，另一个线程才能进来执行第2步。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单*lock*| B[系统A]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">B--&gt;|5.继续执行*unlock*| E[后续业务逻辑]</span><br></pre></td></tr></table></figure>

<p>按照上面的图，在执行第2步时，使用Java提供的synchronized或者ReentrantLock来锁住，然后在第4步执行完之后才释放锁。</p>
<p>这样一来，2、3、4 这3个步骤就被“锁”住了，多个线程之间只能串行化执行。关注公众号互联网架构师，回复关键字2T，获取最新架构视频</p>
<p>但是好景不长，整个系统的并发飙升，一台机器扛不住了。现在要增加一台机器，如下图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(用户)--&gt;|1.下订单*lock*| B[系统A]</span><br><span class="line"></span><br><span class="line">B--&gt;|5.继续执行*unlock*| E[后续业务逻辑]</span><br><span class="line">B--&gt;|2.检查库存| C[Redis]</span><br><span class="line">B--&gt;|4.更新库存数量| C</span><br><span class="line">B--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">F(用户)--&gt;|1.下订单*lock*| G[系统A]</span><br><span class="line">G--&gt;|2.检查库存| C[Redis]</span><br><span class="line">G--&gt;|4.更新库存数量| C</span><br><span class="line">G--&gt;|3.锁定库存| D[数据库]</span><br><span class="line">G--&gt;|5.继续执行*unlock*| J[后续业务逻辑]</span><br></pre></td></tr></table></figure>

<p>增加机器之后，系统变成上图所示，我的天！</p>
<p>假设此时两个用户的请求同时到来，但是落在了不同的机器上，那么这两个请求是可以同时执行了，还是会出现<strong>库存超卖</strong>的问题。</p>
<p>为什么呢？因为上图中的两个A系统，运行在两个不同的JVM里面，他们加的锁只对属于自己JVM里面的线程有效，对于其他JVM的线程是无效的。</p>
<p>因此，这里的问题是：Java提供的原生锁机制在多机部署场景下失效了</p>
<p>这是因为两台机器加的锁不是同一个锁(两个锁在不同的JVM里面)。</p>
<p>那么，我们只要保证两台机器加的锁是同一个锁，问题不就解决了吗？</p>
<p>此时，就该<strong>分布式锁</strong>隆重登场了，分布式锁的思路是：</p>
<p>在整个系统提供一个<strong>全局、唯一</strong>的获取锁的“东西”，然后每个系统在需要加锁时，都去问这个“东西”拿到一把锁，这样不同的系统拿到的就可以认为是同一把锁。</p>
<p>至于这个“东西”，可以是Redis、Zookeeper，也可以是数据库。</p>
<p>通过上面的分析，我们知道了库存超卖场景在分布式部署系统的情况下使用Java原生的锁机制无法保证线程安全，所以我们需要用到分布式锁的方案。</p>
<p>那么，如何实现分布式锁呢？接着往下看！</p>
<h2 id="基于Redis实现分布式锁"><a href="#基于Redis实现分布式锁" class="headerlink" title="基于Redis实现分布式锁"></a>基于Redis实现分布式锁</h2><p>上面分析为啥要使用分布式锁了，这里我们来具体看看分布式锁落地的时候应该怎么样处理。扩展：<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247493252&idx=2&sn=5530b330af0e0bcb56f9cc8bd7d0a25d&chksm=ebd5d9a8dca250be07d54c37110fcc2549cb31968557910a77485747d9cb9ee842a2f05c25dc&scene=21#wechat_redirect" target="_blank" rel="noopener">Redisson是如何实现分布式锁的？</a></p>
<p>最常见的一种方案就是使用Redis做分布式锁</p>
<p>使用Redis做分布式锁的思路大概是这样的：在redis中设置一个值表示加了锁，然后释放锁的时候就把这个key删除。</p>
<p>具体代码是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取锁</span><br><span class="line">&#x2F;&#x2F; NX是指如果key不存在就成功，key存在返回false，PX可以指定过期时间</span><br><span class="line">SET anyLock unique_value NX PX 30000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 释放锁：通过执行一段lua脚本</span><br><span class="line">&#x2F;&#x2F; 释放锁涉及到两条指令，这两条指令不是原子性的</span><br><span class="line">&#x2F;&#x2F; 需要用到redis的lua脚本支持特性，redis执行lua脚本是原子性的</span><br><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then</span><br><span class="line">return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>这种方式有几大要点：</p>
<ul>
<li><p><strong>一定要用SET key value NX PX milliseconds 命令</strong></p>
<p>如果不用，先设置了值，再设置过期时间，这个不是原子性操作，有可能在设置过期时间之前宕机，会造成死锁(key永久存在)</p>
</li>
<li><p><strong>value要具有唯一性</strong></p>
<p>这个是为了在解锁的时候，需要验证value是和加锁的一致才删除key。</p>
<p>这是避免了一种情况：假设A获取了锁，过期时间30s，此时35s之后，锁已经自动释放了，A去释放锁，但是此时可能B获取了锁。A客户端就不能删除B的锁了。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[系统A] --&gt;|1.获取一把锁| B(redis master)</span><br><span class="line">C[系统B] --&gt;|2.获取锁失败.每隔一秒自动尝试再次获取锁| B</span><br><span class="line">C--&gt;|3. 等待别人释放锁或者锁的key自动过期才能获取锁|B</span><br><span class="line">B--&gt;D(redis slave)</span><br></pre></td></tr></table></figure>

<p>除了要考虑客户端要怎么实现分布式锁之外，还需要考虑redis的部署问题。</p>
<p>redis有3种部署方式：</p>
<ul>
<li>单机模式</li>
<li>master-slave + sentinel选举模式</li>
<li>redis cluster模式</li>
</ul>
<p>使用redis做分布式锁的缺点在于：如果采用单机部署模式，会存在单点问题，只要redis故障了。加锁就不行了。</p>
<p>采用master-slave模式，加锁的时候只对一个节点加锁，即便通过sentinel做了高可用，但是如果master节点故障了，发生主从切换，此时就会有可能出现锁丢失的问题。</p>
<p>基于以上的考虑，其实redis的作者也考虑到这个问题，他提出了一个RedLock的算法，这个算法的意思大概是这样的：</p>
<p>假设redis的部署模式是redis cluster，总共有5个master节点，通过以下步骤获取一把锁：</p>
<ul>
<li>获取当前时间戳，单位是毫秒</li>
<li>轮流尝试在每个master节点上创建锁，过期时间设置较短，一般就几十毫秒</li>
<li>尝试在大多数节点上建立一个锁，比如5个节点就要求是3个节点（n / 2 +1）</li>
<li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了</li>
<li>要是锁建立失败了，那么就依次删除这个锁</li>
<li>只要别人建立了一把分布式锁，你就得不断轮询去尝试获取锁</li>
</ul>
<p>但是这样的这种算法还是颇具争议的，可能还会存在不少的问题，无法保证加锁的过程一定正确。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[系统A]--&gt;B(redis master)</span><br><span class="line">A --&gt; C(redis master)</span><br><span class="line">A --&gt; D(redis master)</span><br><span class="line">A --&gt; E(redis master)</span><br><span class="line">A --&gt; F(redis master)</span><br><span class="line">B --&gt; G(redis slave)</span><br><span class="line">C --&gt; H(redis slave)</span><br><span class="line">D --&gt; I(redis slave)</span><br><span class="line">E --&gt; J(redis slave)</span><br><span class="line">F --&gt; K(redis slave)</span><br></pre></td></tr></table></figure>

<h3 id="另一种方式：Redisson"><a href="#另一种方式：Redisson" class="headerlink" title="另一种方式：Redisson"></a>另一种方式：Redisson</h3><p>此外，实现Redis的分布式锁，除了自己基于redis client原生api来实现之外，还可以使用开源框架：Redission</p>
<p>Redisson是一个企业级的开源Redis Client，也提供了分布式锁的支持。我也非常推荐大家使用，为什么呢？</p>
<p>回想一下上面说的，如果自己写代码来通过redis设置一个值，是通过下面这个命令设置的。</p>
<ul>
<li>SET anyLock unique_value NX PX 30000</li>
</ul>
<p>这里设置的超时时间是30s，假如我超过30s都还没有完成业务逻辑的情况下，key会过期，其他线程有可能会获取到锁。</p>
<p>这样一来的话，第一个线程还没执行完业务逻辑，第二个线程进来了也会出现线程安全问题。所以我们还需要额外的去维护这个过期时间，太麻烦了~</p>
<p>我们来看看redisson是怎么实现的？先感受一下使用redission的爽：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Config config &#x3D; new Config();</span><br><span class="line">config.useClusterServers()</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7001&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7002&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.101:7003&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7001&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7002&quot;)</span><br><span class="line">.addNodeAddress(&quot;redis:&#x2F;&#x2F;192.168.31.102:7003&quot;);</span><br><span class="line"></span><br><span class="line">RedissonClient redisson &#x3D; Redisson.create(config);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RLock lock &#x3D; redisson.getLock(&quot;anyLock&quot;);</span><br><span class="line">lock.lock();</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure>



<p>就是这么简单，我们只需要通过它的api中的lock和unlock即可完成分布式锁，他帮我们考虑了很多细节：</p>
<ul>
<li><p>redisson所有指令都通过lua脚本执行，redis支持lua脚本原子性执行</p>
</li>
<li><p>redisson设置一个key的默认过期时间为30s,如果某个客户端持有一个锁超过了30s怎么办？</p>
<p>redisson中有一个<code>watchdog</code>的概念，翻译过来就是看门狗，它会在你获取锁之后，每隔10秒帮你把key的超时时间设为30s</p>
<p>这样的话，就算一直持有锁也不会出现key过期了，其他线程获取到锁的问题了。</p>
</li>
<li><p>redisson的“看门狗”逻辑保证了没有死锁发生。</p>
<p>(如果机器宕机了，看门狗也就没了。此时就不会延长key的过期时间，到了30s之后就会自动过期了，其他线程可以获取到锁)</p>
</li>
</ul>
<p>这里稍微贴出来其实现代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 加锁逻辑</span><br><span class="line">private &lt;T&gt; RFuture&lt;Long&gt; tryAcquireAsync(long leaseTime, TimeUnit unit, final long threadId) &#123;</span><br><span class="line">    if (leaseTime !&#x3D; -1) &#123;</span><br><span class="line">        return tryLockInnerAsync(leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 调用一段lua脚本，设置一些key、过期时间</span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture &#x3D; tryLockInnerAsync(commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(), TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    ttlRemainingFuture.addListener(new FutureListener&lt;Long&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void operationComplete(Future&lt;Long&gt; future) throws Exception &#123;</span><br><span class="line">            if (!future.isSuccess()) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Long ttlRemaining &#x3D; future.getNow();</span><br><span class="line">            &#x2F;&#x2F; lock acquired</span><br><span class="line">            if (ttlRemaining &#x3D;&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; 看门狗逻辑</span><br><span class="line">                scheduleExpirationRenewal(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return ttlRemainingFuture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;T&gt; RFuture&lt;T&gt; tryLockInnerAsync(long leaseTime, TimeUnit unit, long threadId, RedisStrictCommand&lt;T&gt; command) &#123;</span><br><span class="line">    internalLockLeaseTime &#x3D; unit.toMillis(leaseTime);</span><br><span class="line"></span><br><span class="line">    return commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">              &quot;if (redis.call(&#39;exists&#39;, KEYS[1]) &#x3D;&#x3D; 0) then &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;hset&#39;, KEYS[1], ARGV[2], 1); &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot; +</span><br><span class="line">                  &quot;return nil; &quot; +</span><br><span class="line">              &quot;end; &quot; +</span><br><span class="line">              &quot;if (redis.call(&#39;hexists&#39;, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1) then &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;hincrby&#39;, KEYS[1], ARGV[2], 1); &quot; +</span><br><span class="line">                  &quot;redis.call(&#39;pexpire&#39;, KEYS[1], ARGV[1]); &quot; +</span><br><span class="line">                  &quot;return nil; &quot; +</span><br><span class="line">              &quot;end; &quot; +</span><br><span class="line">              &quot;return redis.call(&#39;pttl&#39;, KEYS[1]);&quot;,</span><br><span class="line">                Collections.&lt;Object&gt;singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 看门狗最终会调用了这里</span><br><span class="line">private void scheduleExpirationRenewal(final long threadId) &#123;</span><br><span class="line">    if (expirationRenewalMap.containsKey(getEntryName())) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个任务会延迟10s执行</span><br><span class="line">    Timeout task &#x3D; commandExecutor.getConnectionManager().newTimeout(new TimerTask() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run(Timeout timeout) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 这个操作会将key的过期时间重新设置为30s</span><br><span class="line">            RFuture&lt;Boolean&gt; future &#x3D; renewExpirationAsync(threadId);</span><br><span class="line"></span><br><span class="line">            future.addListener(new FutureListener&lt;Boolean&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void operationComplete(Future&lt;Boolean&gt; future) throws Exception &#123;</span><br><span class="line">                    expirationRenewalMap.remove(getEntryName());</span><br><span class="line">                    if (!future.isSuccess()) &#123;</span><br><span class="line">                        log.error(&quot;Can&#39;t update lock &quot; + getName() + &quot; expiration&quot;, future.cause());</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (future.getNow()) &#123;</span><br><span class="line">                        &#x2F;&#x2F; reschedule itself</span><br><span class="line">                        &#x2F;&#x2F; 通过递归调用本方法，无限循环延长过期时间</span><br><span class="line">                        scheduleExpirationRenewal(threadId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, internalLockLeaseTime &#x2F; 3, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    if (expirationRenewalMap.putIfAbsent(getEntryName(), new ExpirationEntry(threadId, task)) !&#x3D; null) &#123;</span><br><span class="line">        task.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>另外，redisson还提供了对redlock算法的支持,</p>
<p>它的用法也很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RedissonClient redisson &#x3D; Redisson.create(config);</span><br><span class="line">RLock lock1 &#x3D; redisson.getFairLock(&quot;lock1&quot;);</span><br><span class="line">RLock lock2 &#x3D; redisson.getFairLock(&quot;lock2&quot;);</span><br><span class="line">RLock lock3 &#x3D; redisson.getFairLock(&quot;lock3&quot;);</span><br><span class="line">RedissonRedLock multiLock &#x3D; new RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line">multiLock.lock();</span><br><span class="line">multiLock.unlock();</span><br></pre></td></tr></table></figure>



<p><strong>小结：</strong></p>
<p>本节分析了使用redis作为分布式锁的具体落地方案</p>
<p>以及其一些局限性</p>
<p>然后介绍了一个redis的客户端框架redisson，</p>
<p>这也是我推荐大家使用的，</p>
<p>比自己写代码实现会少care很多细节。</p>
<h2 id="基于zookeeper实现分布式锁"><a href="#基于zookeeper实现分布式锁" class="headerlink" title="基于zookeeper实现分布式锁"></a>基于zookeeper实现分布式锁</h2><p>常见的分布式锁实现方案里面，除了使用redis来实现之外，使用zookeeper也可以实现分布式锁。</p>
<p>在介绍zookeeper(下文用zk代替)实现分布式锁的机制之前，先粗略介绍一下zk是什么东西：</p>
<p>Zookeeper是一种提供配置管理、分布式协同以及命名的中心化服务。</p>
<p>zk的模型是这样的：zk包含一系列的节点，叫做znode，就好像文件系统一样每个znode表示一个目录，然后znode有一些特性：</p>
<ul>
<li><p><strong>有序节点</strong>：假如当前有一个父节点为<code>/lock</code>，我们可以在这个父节点下面创建子节点；</p>
<p>zookeeper提供了一个可选的有序特性，例如我们可以创建子节点“/lock/node-”并且指明有序，那么zookeeper在生成子节点时会根据当前的子节点数量自动添加整数序号</p>
<p>也就是说，如果是第一个创建的子节点，那么生成的子节点为<code>/lock/node-0000000000</code>，下一个节点则为<code>/lock/node-0000000001</code>，依次类推。</p>
</li>
</ul>
<ul>
<li><p><strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p>
</li>
<li><p><strong>事件监听</strong>：在读取数据时，我们可以同时对节点设置事件监听，当节点数据或结构变化时，zookeeper会通知客户端。当前zookeeper有如下四种事件：</p>
</li>
<li><ul>
<li>节点创建</li>
<li>节点删除</li>
<li>节点数据修改</li>
<li>子节点变更</li>
</ul>
</li>
</ul>
<p>基于以上的一些zk的特性，我们很容易得出使用zk实现分布式锁的落地方案：</p>
<ol>
<li><p>使用zk的临时节点和有序节点，每个线程获取锁就是在zk创建一个临时有序的节点，比如在/lock/目录下。</p>
</li>
<li><p>创建节点成功后，获取/lock目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点</p>
</li>
<li><p>如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。</p>
</li>
<li><p>如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的前一个节点添加一个事件监听。</p>
<p>比如当前线程获取到的节点序号为<code>/lock/003</code>,然后所有的节点列表为<code>[/lock/001,/lock/002,/lock/003]</code>,则对<code>/lock/002</code>这个节点添加一个事件监听器。</p>
</li>
</ol>
<p>如果锁释放了，会唤醒下一个序号的节点，然后重新执行第3步，判断是否自己的节点序号是最小。</p>
<p>比如<code>/lock/001</code>释放了，<code>/lock/002</code>监听到时间，此时节点集合为<code>[/lock/002,/lock/003]</code>,则<code>/lock/002</code>为最小序号节点，获取到锁。</p>
<p>整个过程如下：</p>
<p><img src="http://img.baixixi.xyz/1595900670381.png" alt="t"></p>
<p>具体的实现思路就是这样，至于代码怎么写，这里比较复杂就不贴出来了。</p>
<h3 id="Curator介绍"><a href="#Curator介绍" class="headerlink" title="Curator介绍"></a>Curator介绍</h3><p>Curator是一个zookeeper的开源客户端，也提供了分布式锁的实现。</p>
<p>他的使用方式也比较简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InterProcessMutex interProcessMutex &#x3D; new InterProcessMutex(client,&quot;&#x2F;anyLock&quot;);</span><br><span class="line">interProcessMutex.acquire();</span><br><span class="line">interProcessMutex.release();</span><br></pre></td></tr></table></figure>



<p>其实现分布式锁的核心源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private boolean internalLockLoop(long startMillis, Long millisToWait, String ourPath) throws Exception</span><br><span class="line">&#123;</span><br><span class="line">    boolean  haveTheLock &#x3D; false;</span><br><span class="line">    boolean  doDelete &#x3D; false;</span><br><span class="line">    try &#123;</span><br><span class="line">        if ( revocable.get() !&#x3D; null ) &#123;</span><br><span class="line">            client.getData().usingWatcher(revocableWatcher).forPath(ourPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while ( (client.getState() &#x3D;&#x3D; CuratorFrameworkState.STARTED) &amp;&amp; !haveTheLock ) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取当前所有节点排序后的集合</span><br><span class="line">            List&lt;String&gt;        children &#x3D; getSortedChildren();</span><br><span class="line">            &#x2F;&#x2F; 获取当前节点的名称</span><br><span class="line">            String              sequenceNodeName &#x3D; ourPath.substring(basePath.length() + 1); &#x2F;&#x2F; +1 to include the slash</span><br><span class="line">            &#x2F;&#x2F; 判断当前节点是否是最小的节点</span><br><span class="line">            PredicateResults    predicateResults &#x3D; driver.getsTheLock(client, children, sequenceNodeName, maxLeases);</span><br><span class="line">            if ( predicateResults.getsTheLock() ) &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取到锁</span><br><span class="line">                haveTheLock &#x3D; true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 没获取到锁，对当前节点的上一个节点注册一个监听器</span><br><span class="line">                String  previousSequencePath &#x3D; basePath + &quot;&#x2F;&quot; + predicateResults.getPathToWatch();</span><br><span class="line">                synchronized(this)&#123;</span><br><span class="line">                    Stat stat &#x3D; client.checkExists().usingWatcher(watcher).forPath(previousSequencePath);</span><br><span class="line">                    if ( stat !&#x3D; null )&#123;</span><br><span class="line">                        if ( millisToWait !&#x3D; null )&#123;</span><br><span class="line">                            millisToWait -&#x3D; (System.currentTimeMillis() - startMillis);</span><br><span class="line">                            startMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">                            if ( millisToWait &lt;&#x3D; 0 )&#123;</span><br><span class="line">                                doDelete &#x3D; true;    &#x2F;&#x2F; timed out - delete our node</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            wait(millisToWait);</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            wait();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; else it may have been deleted (i.e. lock released). Try to acquire again</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch ( Exception e ) &#123;</span><br><span class="line">        doDelete &#x3D; true;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; finally&#123;</span><br><span class="line">        if ( doDelete )&#123;</span><br><span class="line">            deleteOurPath(ourPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return haveTheLock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>其实curator实现分布式锁的底层原理和上面分析的是差不多的。这里我们用一张图详细描述其原理：</p>
<p><img src="http://img.baixixi.xyz/1595900747837.png" alt="w"></p>
<p>小结：</p>
<p>本节介绍了zookeeperr实现分布式锁的方案以及zk的开源客户端的基本使用，简要的介绍了其实现原理。</p>
<h2 id="两种方案的优缺点比较"><a href="#两种方案的优缺点比较" class="headerlink" title="两种方案的优缺点比较"></a>两种方案的优缺点比较</h2><p>学完了两种分布式锁的实现方案之后，本节需要讨论的是redis和zk的实现方案中各自的优缺点。</p>
<p>对于redis的分布式锁而言，它有以下缺点：</p>
<ul>
<li>它获取锁的方式简单粗暴，获取不到锁直接不断尝试获取锁，比较消耗性能。</li>
<li>另外来说的话，redis的设计定位决定了它的数据并不是强一致性的，在某些极端情况下，可能会出现问题。锁的模型不够健壮</li>
<li>即便使用redlock算法来实现，在某些复杂场景下，也无法保证其实现100%没有问题，关于redlock的讨论可以看How to do distributed locking</li>
<li>redis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能。</li>
</ul>
<p>但是另一方面使用redis实现分布式锁在很多企业中非常常见，而且大部分情况下都不会遇到所谓的“极端复杂场景”</p>
<p>所以使用redis作为分布式锁也不失为一种好的方案，最重要的一点是redis的性能很高，可以支撑高并发的获取、释放锁操作。</p>
<p>对于zk分布式锁而言:</p>
<ul>
<li>zookeeper天生设计定位就是分布式协调，强一致性。锁的模型健壮、简单易用、适合做分布式锁。</li>
<li>如果获取不到锁，只需要添加一个监听器就可以了，不用一直轮询，性能消耗较小。</li>
</ul>
<p>但是zk也有其缺点：如果有较多的客户端频繁的申请加锁、释放锁，对于zk集群的压力会比较大。</p>
<p><strong>小结：</strong></p>
<p>综上所述，redis和zookeeper都有其优缺点。我们在做技术选型的时候可以根据这些问题作为参考因素。</p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>通过前面的分析，实现分布式锁的两种常见方案：redis和zookeeper，他们各有千秋。应该如何选型呢？</p>
<p>就个人而言的话，<strong>我比较推崇zk实现的锁：</strong></p>
<p>因为redis是有可能存在隐患的，可能会导致数据不对的情况。但是，怎么选用要看具体在公司的场景了。</p>
<p>如果公司里面有zk集群条件，优先选用zk实现，但是如果说公司里面只有redis集群，没有条件搭建zk集群。</p>
<p>那么其实用redis来实现也可以，另外还可能是系统设计者考虑到了系统已经有redis，但是又不希望再次引入一些外部依赖的情况下，可以选用redis。</p>
<p>这个是要系统设计者基于架构的考虑了</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解JVM的内存结构及GC机制</title>
    <url>/2020/08/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%8F%8AGC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>​       <strong>JAVA GC</strong>（Garbage Collection，垃圾回收）机制是区别C++的一个重要特征，C++需要开发者自己实现垃圾回收的逻辑，而JAVA开发者则只需要专注于业务开发，因为垃圾回收这件繁琐的事情JVM已经为我们代劳了，从这一点上来说，JAVA还是要做的比较完善一些。但这并不意味着我们不用去理解GC机制的原理，因为如果不了解其原理，可能会引发内存泄漏、频繁GC导致应用卡顿,甚至出现OOM等问题，因此我们需要深入理解其原理，才能编写出高性能的应用程序，解决性能瓶颈。</p>
<p>​       想要理解GC的原理，我们必须先理解JVM内存管理机制，因为这样我们才能知道回收哪些对象、什么时候回收以及怎么回收。</p>
<a id="more"></a>

<h1 id="二、JVM内存管理"><a href="#二、JVM内存管理" class="headerlink" title="二、JVM内存管理"></a>二、JVM内存管理</h1><p>​       根据JVM规范，JVM把内存划分成了如下几个区域：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.方法区（Method Area）</span><br><span class="line">2.堆区（Heap）</span><br><span class="line">3.虚拟机栈（VM Stack）</span><br><span class="line">4.本地方法栈（Native Method Stack）</span><br><span class="line">5.程序计数器（Program Counter Register）复制代码</span><br></pre></td></tr></table></figure>



<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.44.56.png" alt="截屏2019-08-22上午10.44.56"></p>
<p>​       其中，方法区和堆所有线程共享。</p>
<h2 id="2-1-方法区（Method-Area）"><a href="#2-1-方法区（Method-Area）" class="headerlink" title="2.1 方法区（Method Area）"></a>2.1 方法区（Method Area）</h2><p>​       方法区存放了要加载的类的信息（如类名、修饰符等）、静态变量、构造函数、final定义的常量、类中的字段和方法等信息。方法区是全局共享的，在一定条件下也会被GC。当方法区超过它允许的大小时，就会抛出OutOfMemory：PermGen Space异常。</p>
<p>​       在Hotspot虚拟机中，这块区域对应<strong>持久代（Permanent Generation）</strong>，一般来说，方法区上执行GC的情况很少，因此方法区被称为持久代的原因之一，但这并不代表方法区上完全没有GC，其上的GC主要针对常量池的回收和已加载类的卸载。在方法区上进行GC，条件相当苛刻而且困难。</p>
<p>​       <strong>运行时常量池（Runtime Constant Pool）</strong>是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符”hello”已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。</p>
<h2 id="2-2-堆区（Heap）"><a href="#2-2-堆区（Heap）" class="headerlink" title="2.2 堆区（Heap）"></a>2.2 堆区（Heap）</h2><p>​       堆区是GC最频繁的，也是理解GC机制最重要的区域。堆区由所有线程共享，在虚拟机启动时创建。堆区主要用于存放对象实例及数组，所有new出来的对象都存储在该区域。</p>
<h2 id="2-3-虚拟机栈（VM-Stack）"><a href="#2-3-虚拟机栈（VM-Stack）" class="headerlink" title="2.3 虚拟机栈（VM Stack）"></a>2.3 虚拟机栈（VM Stack）</h2><p>​       虚拟机栈占用的是操作系统内存，每个线程对应一个虚拟机栈，它是线程私有的，生命周期和线程一样，每个方法被执行时产生一个<strong>栈帧（Statck Frame）</strong>，栈帧用于存储局部变量表、动态链接、操作数和方法出口等信息，当方法被调用时，栈帧入栈，当方法调用结束时，栈帧出栈。</p>
<p>​       <strong>局部变量表</strong>中存储着方法相关的局部变量，包括各种基本数据类型及对象的引用地址等，因此他有个特点：内存空间可以在编译期间就确定，运行时不再改变。</p>
<p>​       虚拟机栈定义了两种<strong>异常类型</strong>：<strong>StackOverFlowError(栈溢出)和OutOfMemoryError（内存溢出）</strong>。如果线程调用的栈深度大于虚拟机允许的最大深度，则抛出StackOverFlowError；不过大多数虚拟机都允许动态扩展虚拟机栈的大小，所以线程可以一直申请栈，直到内存不足时，抛出OutOfMemoryError。</p>
<h2 id="2-4-本地方法栈（Native-Method-Stack）"><a href="#2-4-本地方法栈（Native-Method-Stack）" class="headerlink" title="2.4 本地方法栈（Native Method Stack）"></a>2.4 本地方法栈（Native Method Stack）</h2><p>​       <strong>本地方法栈</strong>用于支持native方法的执行，存储了每个native方法的执行状态。本地方法栈和虚拟机栈他们的运行机制一致，唯一的区别是，虚拟机栈执行Java方法，本地方法栈执行native方法。在很多虚拟机中（如Sun的JDK默认的HotSpot虚拟机），会将虚拟机栈和本地方法栈一起使用。</p>
<h2 id="2-5-程序计数器（Program-Counter-Register）"><a href="#2-5-程序计数器（Program-Counter-Register）" class="headerlink" title="2.5 程序计数器（Program Counter Register）"></a>2.5 程序计数器（Program Counter Register）</h2><p>​       <strong>程序计数器</strong>是一个很小的内存区域，不在RAM上，而是直接划分在CPU上，程序猿无法操作它，它的作用是：JVM在解释字节码（.class）文件时，存储当前线程执行的字节码行号，只是一种概念模型，各种JVM所采用的方式不一样。字节码解释器工作时，就是通过改变程序计数器的值来取下一条要执行的指令，分支、循环、跳转等基础功能都是依赖此技术区完成的。</p>
<p>​       每个程序计数器只能记录一个线程的行号，因此它是线程私有的。</p>
<p>​       如果程序当前正在执行的是一个java方法，则程序计数器记录的是正在执行的虚拟机字节码指令地址，如果执行的是native方法，则计数器的值为空，此内存区是唯一不会抛出OutOfMemoryError的区域。</p>
<h1 id="三、GC机制"><a href="#三、GC机制" class="headerlink" title="三、GC机制"></a>三、GC机制</h1><p>​       随着程序的运行，内存中的实例对象、变量等占据的内存越来越多，如果不及时进行回收，会降低程序运行效率，甚至引发系统异常。</p>
<p>​       在上面介绍的五个内存区域中，有3个是不需要进行垃圾回收的：本地方法栈、程序计数器、虚拟机栈。因为他们的生命周期是和线程同步的，随着线程的销毁，他们占用的内存会自动释放。所以，只有方法区和堆区需要进行垃圾回收，回收的对象就是那些不存在任何引用的对象。</p>
<h2 id="3-1-查找算法"><a href="#3-1-查找算法" class="headerlink" title="3.1 查找算法"></a>3.1 查找算法</h2><p>​        经典的<strong>引用计数算法</strong>，每个对象添加到引用计数器，每被引用一次，计数器+1，失去引用，计数器-1，当计数器在一段时间内为0时，即认为该对象可以被回收了。但是这个算法有个明显的缺陷：当两个对象相互引用，但是二者都已经没有作用时，理应把它们都回收，但是由于它们相互引用，不符合垃圾回收的条件，所以就导致无法处理掉这一块内存区域。因此，Sun的JVM并没有采用这种算法，而是采用一个叫——<strong>根搜索算法</strong>，如图：</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.46.01.png" alt="截屏2019-08-22上午10.46.01"></p>
<p>​       基本思想是：从一个叫GC Roots的根节点出发，向下搜索，如果一个对象不能达到GC Roots的时候，说明该对象不再被引用，可以被回收。如上图中的Object5、Object6、Object7，虽然它们三个依然相互引用，但是它们其实已经没有作用了，这样就解决了引用计数算法的缺陷。</p>
<p>​       补充概念，在JDK1.2之后引入了四个概念：<strong>强引用、软引用、弱引用、虚引用</strong>。<br>​       <strong>强引用</strong>：new出来的对象都是强引用，GC无论如何都不会回收，即使抛出OOM异常。<br>​       <strong>软引用</strong>：只有当JVM内存不足时才会被回收。<br>​       <strong>弱引用</strong>：只要GC,就会立马回收，不管内存是否充足。<br>​       <strong>虚引用</strong>：可以忽略不计，JVM完全不会在乎虚引用，你可以理解为它是来凑数的，凑够”四大天王”。它唯一的作用就是做一些跟踪记录，辅助finalize函数的使用。</p>
<p>​       最后总结，什么样的类需要被回收：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.该类的所有实例都已经被回收；</span><br><span class="line">b.加载该类的ClassLoad已经被回收；</span><br><span class="line">c.该类对应的反射类java.lang.Class对象没有被任何地方引用。复制代码</span><br></pre></td></tr></table></figure>

<h2 id="3-2-内存分区"><a href="#3-2-内存分区" class="headerlink" title="3.2 内存分区"></a>3.2 内存分区</h2><p>​       内存主要被分为三块：<strong>新生代（Youn Generation）、旧生代（Old Generation）、持久代（Permanent Generation）</strong>。三代的特点不同，造就了他们使用的GC算法不同，新生代适合生命周期较短，快速创建和销毁的对象，旧生代适合生命周期较长的对象，持久代在Sun Hotpot虚拟机中就是指方法区（有些JVM根本就没有持久代这一说法）。</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.46.54.png" alt="截屏2019-08-22上午10.46.54"></p>
<p>​       <strong>新生代（Youn Generation）</strong>：大致分为Eden区和Survivor区，Survivor区又分为大小相同的两部分：FromSpace和ToSpace。新建的对象都是从新生代分配内存，Eden区不足的时候，会把存活的对象转移到Survivor区。当新生代进行垃圾回收时会出发<strong>Minor GC</strong>（也称作<strong>Youn GC</strong>）。</p>
<p>​       <strong>旧生代（Old Generation）</strong>：旧生代用于存放新生代多次回收依然存活的对象，如缓存对象。当旧生代满了的时候就需要对旧生代进行回收，旧生代的垃圾回收称作Major GC（也称作Full GC）。</p>
<p>​       <strong>持久代（Permanent Generation）</strong>：在Sun 的JVM中就是方法区的意思，尽管大多数JVM没有这一代。</p>
<h2 id="3-3-GC算法"><a href="#3-3-GC算法" class="headerlink" title="3.3 GC算法"></a>3.3 GC算法</h2><p>​       <strong>常见的GC算法</strong>：<strong>复制、标记-清除和标记-压缩</strong></p>
<p>​       <strong>复制</strong>：复制算法采用的方式为从根集合进行扫描，将存活的对象移动到一块空闲的区域，如图所示：</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.34.png" alt="截屏2019-08-22上午10.47.34"></p>
<p>当存活的对象较少时，复制算法会比较高效（新生代的Eden区就是采用这种算法），其带来的成本是需要一块额外的空闲空间和对象的移动。</p>
<p>​       <strong>标记-清除</strong>：该算法采用的方式是从跟集合开始扫描，对存活的对象进行标记，标记完毕后，再扫描整个空间中未被标记的对象，并进行清除。标记和清除的过程如下：</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.45.png" alt="截屏2019-08-22上午10.47.45"></p>
<p>上图中蓝色部分是有被引用的对象，褐色部分是没有被引用的对象。在Marking阶段，需要进行全盘扫描，这个过程是比较耗时的。</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.47.55.png" alt="截屏2019-08-22上午10.47.55"></p>
<p>清除阶段清理的是没有被引用的对象，存活的对象被保留。</p>
<p>标记-清除动作不需要移动对象，且仅对不存活的对象进行清理，在空间中存活对象较多的时候，效率较高，但由于只是清除，没有重新整理，因此会造成内存碎片。</p>
<p>​       <strong>标记-压缩</strong>：该算法与标记-清除算法类似，都是先对存活的对象进行标记，但是在清除后会把活的对象向左端空闲空间移动，然后再更新其引用对象的指针，如下图所示</p>
<p><img src="/Users/yuanxiang/note/pic/%E6%88%AA%E5%B1%8F2019-08-22%E4%B8%8A%E5%8D%8810.48.03.png" alt="截屏2019-08-22上午10.48.03"></p>
<p>由于进行了移动规整动作，该算法避免了标记-清除的碎片问题，但由于需要进行移动，因此成本也增加了。（该算法适用于旧生代）</p>
<h1 id="四、垃圾收集器"><a href="#四、垃圾收集器" class="headerlink" title="四、垃圾收集器"></a>四、垃圾收集器</h1><p>​       在JVM中，GC是由垃圾回收器来执行，所以，在实际应用场景中，我们需要选择合适的垃圾收集器，下面我们介绍一下垃圾收集器。</p>
<h2 id="4-1-串行收集器（Serial-GC）"><a href="#4-1-串行收集器（Serial-GC）" class="headerlink" title="4.1 串行收集器（Serial GC）"></a>4.1 串行收集器（Serial GC）</h2><p>​       <strong>Serial GC</strong>是最古老也是最基本的收集器，但是现在依然广泛使用，JAVA SE5和JAVA SE6中客户端虚拟机采用的默认配置。比较适合于只有一个处理器的系统。在串行处理器中minor和major GC过程都是用一个线程进行回收的。它的最大特点是在进行垃圾回收时，需要对所有正在执行的线程暂停（stop the world），对于有些应用是难以接受的，但是如果应用的实时性要求不是那么高，只要停顿的时间控制在N毫秒之内，大多数应用还是可以接受的，而且事实上，它并没有让我们失望，几十毫秒的停顿，对于我们客户机是完全可以接受的，该收集器适用于单CPU、新生代空间较小且对暂停时间要求不是特别高的应用上，是client级别的默认GC方式。</p>
<h2 id="4-2-ParNew-GC"><a href="#4-2-ParNew-GC" class="headerlink" title="4.2 ParNew GC"></a>4.2 ParNew GC</h2><p>​       基本和Serial GC一样，但本质区别是加入了多线程机制，提高了效率，这样它就可以被用于服务端上（server），同时它可以与CMS GC配合，所以，更加有理由将他用于server端。</p>
<h2 id="4-3-Parallel-Scavenge-GC"><a href="#4-3-Parallel-Scavenge-GC" class="headerlink" title="4.3 Parallel Scavenge GC"></a>4.3 Parallel Scavenge GC</h2><p>​       在整个扫描和复制过程采用多线程的方式进行，适用于多CPU、对暂停时间要求较短的应用，是server级别的默认GC方式。</p>
<h2 id="4-4-CMS-Concurrent-Mark-Sweep-收集器"><a href="#4-4-CMS-Concurrent-Mark-Sweep-收集器" class="headerlink" title="4.4 CMS (Concurrent Mark Sweep)收集器"></a>4.4 CMS (Concurrent Mark Sweep)收集器</h2><p>​       该收集器的目标是解决Serial GC停顿的问题，以达到最短回收时间。常见的B/S架构的应用就适合这种收集器，因为其高并发、高响应的特点，CMS是基于标记-清楚算法实现的。</p>
<p>CMS收集器的优点：并发收集、低停顿，但远没有达到完美；</p>
<p>CMS收集器的缺点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.CMS收集器对CPU资源非常敏感，在并发阶段虽然不会导致用户停顿，但是会占用CPU资源而导致应用程序变慢，总吞吐量下降。</span><br><span class="line">b.CMS收集器无法处理浮动垃圾，可能出现“Concurrnet Mode Failure”，失败而导致另一次的Full GC。</span><br><span class="line">c.CMS收集器是基于标记-清除算法的实现，因此也会产生碎片。复制代码</span><br></pre></td></tr></table></figure>

<h2 id="4-5-G1收集器"><a href="#4-5-G1收集器" class="headerlink" title="4.5 G1收集器"></a>4.5 G1收集器</h2><p>​       相比CMS收集器有不少改进，首先，基于标记-压缩算法，不会产生内存碎片，其次可以比较精确的控制停顿。</p>
<h2 id="4-6-Serial-Old收集器"><a href="#4-6-Serial-Old收集器" class="headerlink" title="4.6 Serial Old收集器"></a>4.6 Serial Old收集器</h2><p>​       Serial Old是Serial收集器的老年代版本，它同样使用一个单线程执行收集，使用“标记-整理”算法。主要使用在Client模式下的虚拟机。</p>
<h2 id="4-7-Parallel-Old收集器"><a href="#4-7-Parallel-Old收集器" class="headerlink" title="4.7 Parallel Old收集器"></a>4.7 Parallel Old收集器</h2><p>​       Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p>
<h2 id="4-8-RTSJ垃圾收集器"><a href="#4-8-RTSJ垃圾收集器" class="headerlink" title="4.8 RTSJ垃圾收集器"></a>4.8 RTSJ垃圾收集器</h2><p>​       RTSJ垃圾收集器，用于Java实时编程。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>​       深入理解JVM的内存模型和GC机制有助于帮助我们编写高性能代码和提供代码优化的思路与方向。</p>
]]></content>
  </entry>
  <entry>
    <title>JAVA基础核心总结</title>
    <url>/2020/08/25/JAVA%E5%9F%BA%E7%A1%80%E6%A0%B8%E5%BF%83%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="java基础核心总结"><a href="#java基础核心总结" class="headerlink" title="java基础核心总结"></a>java基础核心总结</h1><h2 id="java的基本语法"><a href="#java的基本语法" class="headerlink" title="java的基本语法"></a>java的基本语法</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte,short,int,long,     1byte &#x3D; 8bits   1short &#x3D; 16bits  1int &#x3D; 32bits  1long &#x3D; 64bits</span><br><span class="line">double,float,   1float &#x3D; 32bits   1double &#x3D; 64bits</span><br><span class="line">char,     最小 \u0000,   最大 \uffff</span><br><span class="line">boolean</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大小写敏感： </span><br><span class="line">类名： 首字母大写</span><br><span class="line">包名： 尽量小写</span><br><span class="line">方法名： 首字母小写，小驼峰，见名知意</span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">赋值运算符： &#x3D;。     int a &#x3D; 5;</span><br><span class="line">算数运算符： + - * &#x2F; %</span><br><span class="line">自增、自减运算符：  ++a   a--   </span><br><span class="line">比较运算符：&gt; &lt; &#x3D;&#x3D; &lt;&#x3D; &gt;&#x3D; !&#x3D;</span><br><span class="line">逻辑运算符：&amp;&amp;  	|| 	!	 &amp;	 |	 ^</span><br><span class="line">按位运算符： &amp;: 4&amp;5&#x3D;4  |:4|5&#x3D;4   ^:4^5&#x3D;1   ~:~4&#x3D;~5</span><br><span class="line">移位运算符： &gt;&gt;:8&gt;&gt;1 &#x3D; 4    &lt;&lt;:9&lt;&lt;2 &#x3D; 36</span><br><span class="line">三元运算符：  条件表达式？表达式1:表达式2</span><br></pre></td></tr></table></figure>

<h2 id="java执行控制流程"><a href="#java执行控制流程" class="headerlink" title="java执行控制流程"></a>java执行控制流程</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a&gt;<span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<h4 id="if…else条件语句"><a href="#if…else条件语句" class="headerlink" title="if…else条件语句"></a>if…else条件语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">if</span> (a&gt;=b)&#123;</span><br><span class="line">  System.out.println(<span class="string">"a&gt;=b"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">"a&lt;b"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if…else-if-多分支语句"><a href="#if…else-if-多分支语句" class="headerlink" title="if…else if 多分支语句"></a>if…else if 多分支语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">40</span>; <span class="keyword">if</span>(x &gt; <span class="number">60</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于60"</span>); &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">30</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于30但小于60"</span>); &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值大于0但小于30"</span>); &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"x的值小于等于0"</span>); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="switch-多分支语句"><a href="#switch-多分支语句" class="headerlink" title="switch 多分支语句"></a>switch 多分支语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		System.out.println(<span class="string">"Monday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		System.out.println(<span class="string">"Tuesday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		System.out.println(<span class="string">"Wednesday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		System.out.println(<span class="string">"Thursday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		System.out.println(<span class="string">"Friday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		System.out.println(<span class="string">"Saturday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		System.out.println(<span class="string">"Sunday"</span>); </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">		System.out.println(<span class="string">"No Else"</span>); </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔值)&#123;</span><br><span class="line">  表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">"b == "</span> + b);</span><br><span class="line">  b--;</span><br><span class="line">&#125; <span class="keyword">while</span> (b== <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式 ; 步进)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j = i + <span class="number">10</span>; i &lt; <span class="number">5</span>; i++, j=j*<span class="number">2</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="for-each-语句"><a href="#for-each-语句" class="headerlink" title="for-each 语句"></a>for-each 语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr:array) &#123;</span><br><span class="line">  System.out.println(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><p>break,continue,return</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>属性也称为字段</p>
<p>方法表示 做某些事情的方式，方法的基本组成包括  方法名称、参数、返回值、方法体</p>
<h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>有参和无参构造函数属于重载的一种，还有一种是，每个重载的方法都有独一无二的参数列表，其中包括参数的类型、顺序、参数数量等，满足重载的条件如下：</p>
<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同（个数不同、类型不同、参数类型排列顺序不同等）</li>
<li>方法的返回类型可以相同也可以不相同</li>
<li>仅仅返回类型不同不足矣成为方法的重载</li>
<li>重载是发生在编译时的，因为编译器可以根据参数的类型来选择使用哪个方法；</li>
</ul>
<h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>重写的原则：</p>
<ul>
<li>重写的方法必须要和父类保持一致，包括返回值类型，方法名，参数列表 也都一样</li>
<li>重写的方法可以使用 @Override 注解来标识</li>
<li>子类中重写方法的访问权限不能低于父类中方法的访问权限</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><p>使用new 关键字创建对象，等调用构造方法进行初始化</p>
<h4 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h4><p>java会尽量保证每个变量在使用前都会获得初始化，分为两种：</p>
<ul>
<li><p>编译器默认指定的字段初始化，基本数据类型的初始化</p>
<p>一种是其他对象类型的初始化，String也是一种对象，默认初始值为null，其中也包括基本类型的包装类。</p>
</li>
<li><p>一种是指定数值的初始化，如： int a = 11</p>
</li>
</ul>
<h4 id="构造器初始化"><a href="#构造器初始化" class="headerlink" title="构造器初始化"></a>构造器初始化</h4><p>可以利用构造器来对某些方法和某些动作进行初始化，确定初始值</p>
<h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>有如下初始化：</p>
<ul>
<li>静态属性： static开头定义的属性</li>
<li>静态方法快： static{}包起来的代码块</li>
<li>普通属性：非static定义的属性</li>
<li>普通方法块：{} 包起来的代码块</li>
<li>构造函数：类名相同的方法</li>
<li>方法： 普通方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticField = getStaticField();</span><br><span class="line">    <span class="comment">// 静态方法块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(staticField);</span><br><span class="line">        System.out.println(<span class="string">"静态方法块初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String field = getField();</span><br><span class="line">    <span class="comment">// 普通方法块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeCycle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStaticField</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String staticField = <span class="string">"Static Field Initial"</span>;</span><br><span class="line">        <span class="keyword">return</span> staticField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String field = <span class="string">"Field Initial"</span>;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LifeCycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">Static Field Initial</span><br><span class="line">静态方法块初始化</span><br><span class="line">Field Initial</span><br><span class="line">构造函数初始化</span><br></pre></td></tr></table></figure>

<h4 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h4><p>数组的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">int</span> a1[];</span><br></pre></td></tr></table></figure>

<ul>
<li>直接给每个元素赋值：int array[4] = {1,2,3,4};</li>
<li>给一部分赋值，后面的都为0: int array[4] = {1,2};</li>
<li>由赋值参数个数决定数组的个数： int array[] = {1,2};</li>
</ul>
<h4 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h4><p>java中一种数组冷门的用法就是可变参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... numbers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num: numbers) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(); <span class="comment">//不传参数</span></span><br><span class="line">add(<span class="number">1</span>); <span class="comment">// 传递一个参数</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">1</span>); <span class="comment">// 传递多个参数</span></span><br><span class="line">add(<span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;); <span class="comment">// 传递数组</span></span><br></pre></td></tr></table></figure>

<h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><p>在java中我们不需要手动管理对象的销毁，都是由java虚拟机进行管理和销毁</p>
<h4 id="对象作用域"><a href="#对象作用域" class="headerlink" title="对象作用域"></a>对象作用域</h4><p>作用域决定了其内部定义的变量名的可见性和生命周期</p>
<h4 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h4><p>this表示的当前对象，this可以调用方法、属性和指向对象本身。</p>
<p>this还可以和构造函数一起使用，充当一个全局关键字的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">private</span> String color;</span><br><span class="line">	</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(num, <span class="string">"红色"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">1</span>, color);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num, String color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = num;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>this(参数)相当于调用了其他构造方法，然后传递参数进去。注意：：：this()必须放在构造方法的第一行，否则编译失败；</p>
<p>如果把this理解成指向自身的一个引用，那么super就是指向父类的一个引用。super和this一样，可以使用 super.对象 来引用父类的成员。也可以使用super(参数) 来调用父类的构造函数。</p>
<h3 id="封装-访问控制权限"><a href="#封装-访问控制权限" class="headerlink" title="封装( 访问控制权限)"></a>封装( 访问控制权限)</h3><p>访问控制权限又称为 封装，  </p>
<p>访问控制权限的核心： 只对需要的类可见。</p>
<p>java中成员的访问权限共有四种 ： public、protected、default、private</p>
<table>
<thead>
<tr>
<th></th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td>同一类</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>同一包中的类</td>
<td></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>子类</td>
<td></td>
<td></td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>其他包中的类</td>
<td></td>
<td></td>
<td></td>
<td>✅</td>
</tr>
</tbody></table>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>只要我们创建一个类，就隐式继承自Object父类，只不过没有指定。如果你显示指定了父类，那么你继承于父类，而你的父类继承于Object类。</p>
<p>继承的关键字： extends</p>
<p>子类可以重写父类的方法，也可以直接使用父类的方法</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指的是同一个行为具有多个不同表现形式。</p>
<p>多态的实现，需要三种充要条件：</p>
<ul>
<li>继承</li>
<li>重写父类的方法</li>
<li>父类引用指向子类对象</li>
</ul>
<h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口相当于就是对外的一种约定和标准</p>
<p>接口的关键字：interface</p>
<p>特征：</p>
<ul>
<li><p><code>interface</code> 接口是一个完全抽象的类，会进行方法的定义</p>
</li>
<li><p>接口中只能使用两种访问修饰符，一种是public，他对整个项目可见，一种是 default 缺省值，只具有包访问权限</p>
</li>
<li><p>接口只提供方法的定义，接口没有实现，但是接口可以被其他类实现。</p>
<p>即：实现接口的类需要提供方法的实现，实现接口使用 <code>implements</code>关键字来表示，一个接口可以有多个实现</p>
</li>
<li><p>接口不能被序列化，所以接口中不能有任何构造方法，</p>
</li>
<li><p>接口的实现比如实现接口的全部方法，否则必须定义为 抽象类 ，</p>
</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类的关键字： abstract</p>
<p>特征：</p>
<ul>
<li>如果一个类中有抽象方法，那么这个类一定是抽象类，也就是说，使用关键字 abstract修饰的方法一定是抽象方法，具有抽象方法的类一定是抽象类。实现类中只有方法具体的实现。</li>
<li>抽象类中不一定只有抽象的方法，抽象类中也可以有具体的方法，可以自己选择是否实现</li>
<li>抽象类中可以定义：构造方法、抽象方法、普通属性、方法、静态属性和静态方法</li>
<li>抽象类和接口一样不能被实力化，实例化只能实例化 具体的类。</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>java.lang.Exception 是一个顶级接口，继承于Throwable类，</p>
<h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>Throwable类是java语言中所有错误（errors）和异常（exceptions）的父类。只有继承于Throwable的类或者其子类才能够被抛出，还有一种方式是带有java中的@throw注解的类也可以抛出。</p>
<h3 id="常用的Exception"><a href="#常用的Exception" class="headerlink" title="常用的Exception"></a>常用的Exception</h3><p>Exception有两种异常：一、RuntimeException；二、CheckedException。这两种异常都应该去 捕获。</p>
<p>RuntimeException：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>异常名称</th>
<th>异常描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>ArrayIndexOutOfBoundsException</td>
<td>数组越界异常</td>
</tr>
<tr>
<td>2</td>
<td>NullPointerException</td>
<td>空指针异常</td>
</tr>
<tr>
<td>3</td>
<td>IllegalArgumentException</td>
<td>非法参数异常</td>
</tr>
<tr>
<td>4</td>
<td>NegativeArraySizeException</td>
<td>数组长度为负异常</td>
</tr>
<tr>
<td>5</td>
<td>IllegalStateException</td>
<td>非法状态异常</td>
</tr>
<tr>
<td>6</td>
<td>ClassCastException</td>
<td>类型转换异常</td>
</tr>
</tbody></table>
<p>UncheckedException:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>异常名称</th>
<th>异常描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>NoSuchFieldException</td>
<td>表示该类没有指定名称抛出来的异常</td>
</tr>
<tr>
<td>2</td>
<td>NoSuchMethodException</td>
<td>表示该类没有指定方法抛出来的异常</td>
</tr>
<tr>
<td>3</td>
<td>IllegalAccessException</td>
<td>不允许访问某个类的异常</td>
</tr>
<tr>
<td>4</td>
<td>ClassNotFoundException</td>
<td>类没有找到抛出异常</td>
</tr>
</tbody></table>
<h3 id="与Exception有关的java关键字"><a href="#与Exception有关的java关键字" class="headerlink" title="与Exception有关的java关键字"></a>与Exception有关的java关键字</h3><p>throws、throw、try、finally、catch</p>
<h3 id="什么是error"><a href="#什么是error" class="headerlink" title="什么是error"></a>什么是error</h3><p>Error 是程序无法处理的错误，表示运行应用程序中较严重问题。 比如：OutOfMemoryError和StackOverflowError异常。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>可以将一个类的定义放在另一个类的内部，这就是内部类</p>
<p>内部类拥有外部类的访问权限。</p>
<p>局部内部类：定义在方法和作用域内部</p>
<p>定义内部类的方式：</p>
<ul>
<li>一个在方法中定义的类（局部内部类）</li>
<li>一个定义在作用域内的类，这个作用域在方法的内部（成员内部类）</li>
<li>一个实现了接口的匿名类（匿名内部类）</li>
<li>一个匿名类，它拓展了非默认构造器的类</li>
<li>一个匿名类，执行字段初始化操作</li>
<li>一个匿名类，它通过实例初始化实现构造</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Iterable接口"><a href="#Iterable接口" class="headerlink" title="Iterable接口"></a>Iterable接口</h3><p>实现此接口允许对象成为for-each循环的目标，也就是增强for循环，它是java中的一种语法糖。</p>
<p>除了实现此接口的对象外，数组也可以用for-each循环遍历</p>
<h3 id="顶级接口"><a href="#顶级接口" class="headerlink" title="顶级接口"></a>顶级接口</h3><p>Collection是一个顶层接口，他主要用来定义集合的约定</p>
<p>List也是一个顶层接口，它继承了Collection接口，同时也是ArrayList、LinkedList等集合元素的父类</p>
<p>Set接口位于与List接口同级的层次上，它同时继承了Collection接口，Set接口提供了额外的规定，它对add、equals、hashCode方法提供了额外的标准。</p>
<p>Queue是和List、Set接口并列的Collection的三大接口之一。即队列</p>
<p>SortedSet接口直接继承于Set接口，使用Comparable对元素进行自然排序或者使用Comparator在创建时对元素提供定制的排序规则。set的迭代器将按生序元素顺序遍历集合。</p>
<p>Map是一个支持key-value存储的对象，Map不能包含重复的key，每个键最多映射一个值。这个接口代替了dirctionary类，Dictionary是一个接口类而不是接口。</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是实现了List接口的 可扩容数组（动态数组），它的内部是基于数组实现的。</p>
<ul>
<li>ArrayList不是线程安全的容器，作为替代条件可以使用线程安全的List，应使用Collections.synchronizedList</li>
<li>ArrayList可以实现所有可选择的列表操作，允许所有的元素，包括空值。</li>
<li>ArrayList有一个容量的概念，这个数组的容量就是List用来存储元素的容量。</li>
<li>ArrayList具有fail-fast快速失败机制，能够对ArrayList作出失败检测。如迭代集合过程中集合结构发生改变会抛出ConcurrentModificaitoinException异常</li>
</ul>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>同ArrayList一样，都是基于数组实现的，只不过Vector是一个线程安全的容器，他对内部的每个方法都简单粗暴的上锁，避免多线程引起的安全性问题，但需要的开销较大，因此效率较低。</p>
<p>ArrayList扩容后的数组长度会增加50%，而Vector的扩容后长度数组会增加一倍。</p>
<h3 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h3><p>LinkedList是一个双向链表，允许存储任何元素（包括null），特性如下：</p>
<ul>
<li><p>LinkedList所有的操作都可以表现成双向性的，索引到链表的操作将遍历从头到尾，视那个距离近为遍历顺序</p>
</li>
<li><p>LinkedList也不是线程安全的。如果多个线程并发访问链表，并且至少其中的一个线程修改了链表的结构，那么这个链表必须进行外部加锁。或者使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> LinkedList(...))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>堆栈是我们常说的 后入先出 的容器。它继承了Vector类，提供了通常用的push和pop操作，以及在栈顶的peek方法，测试stack是否为空的empty方法，和一个寻找与栈顶距离的search方法。</p>
<p>第一次创建栈，不包含任何元素。一个更完善，可靠性更强的LIFO栈操作由Deque接口和它的实现提供，应该优先使用这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;()</span><br></pre></td></tr></table></figure>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet是Set接口的实现类。不保证元素的迭代顺序，也不是线程安全的，允许null元素</p>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet是一个基于TreeMap的NavigableSet实现。</p>
<h3 id="LinkedHashSet类"><a href="#LinkedHashSet类" class="headerlink" title="LinkedHashSet类"></a>LinkedHashSet类</h3><p>LinkedHashSet是Set接口的Hash表和LinkedList的实现。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap是一个利用哈希表原理来存储元素的集合，并且允许空的key-value键值对。HashMap是非线程安全的，而HashTable是线程安全的容器。</p>
<p>HashMap的实例有两个参数影响其性能：初始容量和加载因子。</p>
<h3 id="LinkedHashMap类"><a href="#LinkedHashMap类" class="headerlink" title="LinkedHashMap类"></a>LinkedHashMap类</h3><p>LinkedHashMap类是Map接口的哈希表和链表的实现。与HashMap不同之处在于它维护了一个贯穿其所有条目的双向链表。这个链表定义了遍历顺序，通常是插入map中的顺序。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型其实就是一种参数化的集合，它限制了你添加进集合的类型。泛型的本质就是一种参数化类型。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>Java 反射机制是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法；对于任意一个对象，都能够知道调用它的任意属性和方法，这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>在java中，每定义一个java class 实体都会产生一个Class对象，也就是说，当我们编写一个类，编译完成后，在生成的 .class 文件中，就会产生一个Class对象，这个Class对象用于表示这个类的类型信息。Class中没有公共的构造器，也就是说Class对象不能被实例化。</p>
<h3 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h3><p>反射中，ClassLoader类也非常重要。类装载器是用来把 <strong>类（class）</strong> 装载进 <strong>JVM</strong>的。 ClassLoader使用的是双亲委派模型来搜索加载类的，这个模型也就是<strong>双亲委派模型</strong>。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>在Java中，枚举使用 enum 关键字来表示，枚举其实是一项非常有用的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Family &#123;</span><br><span class="line">  FATHER,</span><br><span class="line">  MOTHER,</span><br><span class="line">  SON,</span><br><span class="line">  DAUGHTER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
